{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/config.ts","webpack:///./src/app/containers/ContactProviderContext.js","webpack:///./src/app/containers/ContactProvider.js","webpack:///./src/app/helpers/properties.js","webpack:///./src/app/constants.js","webpack:///./src/app/helpers/property.js","webpack:///./src/app/helpers/vcard.js","webpack:///./src/app/helpers/merge.js","webpack:///./src/app/components/import/AttachedFile.js","webpack:///./src/app/components/import/AttachingModalContent.js","webpack:///./src/app/components/import/ImportCsvTableHeader.js","webpack:///./src/app/helpers/fields.js","webpack:///./src/app/components/import/SelectImportField.js","webpack:///./src/app/helpers/types.js","webpack:///./src/app/components/import/SelectImportType.js","webpack:///./src/app/helpers/csvFormat.js","webpack:///./src/app/helpers/csv.js","webpack:///./src/app/components/import/ImportCsvTableRows.js","webpack:///./src/app/components/import/ImportCsvTableBody.js","webpack:///./src/app/helpers/importCsv.js","webpack:///./src/app/components/import/ImportCsvModalContent.js","webpack:///./src/app/components/DynamicProgress.js","webpack:///./src/app/components/import/ErrorDetails.js","webpack:///./src/app/helpers/contact.js","webpack:///./src/app/helpers/encrypt.js","webpack:///./src/app/helpers/import.js","webpack:///./src/app/helpers/progress.js","webpack:///./src/app/components/import/ImportingModalContent.js","webpack:///./src/app/components/import/ImportGroupsModalContent.js","webpack:///./src/app/components/import/ImportModal.js","webpack:///./src/app/components/ContactImageField.js","webpack:///./src/app/components/ContactAdrField.js","webpack:///./src/app/components/ContactImageModal.js","webpack:///./src/app/components/ContactFieldProperty.js","webpack:///./src/app/components/ContactLabelProperty.js","webpack:///./src/app/components/ContactModalLabel.js","webpack:///./src/app/components/ContactModalRow.js","webpack:///./src/app/components/EncryptedIcon.js","webpack:///./src/app/components/ContactModalProperties.js","webpack:///./src/app/components/UpsellFree.js","webpack:///./src/app/components/ContactModal.js","webpack:///./src/app/components/ContactGroupModal.js","webpack:///./src/app/components/ItemCheckbox.js","webpack:///./src/app/components/ContactGroupIcon.js","webpack:///./src/app/components/ContactRow.js","webpack:///./src/app/components/ContactsList.js","webpack:///./src/app/hooks/useContact.js","webpack:///./src/app/helpers/decrypt.js","webpack:///./src/app/components/ContactViewErrors.js","webpack:///./src/app/components/ContactImageSummary.js","webpack:///./src/app/components/ContactSummary.js","webpack:///./src/app/components/SelectEmailsModal.js","webpack:///./src/app/components/ContactGroupDropdownButton.js","webpack:///./src/app/components/ContactGroupDropdown.js","webpack:///./src/app/helpers/pgp.js","webpack:///./src/app/components/ContactMIMETypeSelect.js","webpack:///./src/app/components/ContactSchemeSelect.js","webpack:///./src/app/components/KeyWarningIcon.js","webpack:///./src/app/components/ContactKeysTable.js","webpack:///./src/app/components/ContactPgpSettings.js","webpack:///./src/app/components/ContactEmailSettingsModal.js","webpack:///./src/app/components/ContactViewProperty.js","webpack:///./src/app/components/ContactViewProperties.js","webpack:///./src/app/components/ContactView.js","webpack:///./src/app/helpers/export.js","webpack:///./src/app/components/Contact.js","webpack:///./src/app/components/ExportModal.js","webpack:///./src/app/components/MergeRow.js","webpack:///./src/app/components/ContactPlaceholder.js","webpack:///./src/app/components/ContactToolbar.js","webpack:///./src/app/content/PrivateHeader.js","webpack:///./src/app/components/UpgradeModal.js","webpack:///./src/app/content/PrivateSidebar.js","webpack:///./src/app/helpers/array.js","webpack:///./src/app/components/merge/MergedContactSummary.js","webpack:///./src/app/components/merge/ContactDetails.js","webpack:///./src/app/components/merge/MergeErrorContent.js","webpack:///./src/app/components/merge/MergingModalContent.js","webpack:///./src/app/components/merge/MergeContactPreview.js","webpack:///./src/app/helpers/css.js","webpack:///./src/app/components/merge/NameTableCell.js","webpack:///./src/app/components/merge/EmailsTableCell.js","webpack:///./src/app/components/merge/MergeTableBody.js","webpack:///./src/app/components/merge/MergeTable.js","webpack:///./src/app/components/merge/MergeModalContent.js","webpack:///./src/app/components/merge/MergeModal.js","webpack:///./src/app/components/delete/DeleteModal.js","webpack:///./src/app/content/PrivateLayout.js","webpack:///./src/app/containers/ContactsContainer.js","webpack:///./src/app/pages/SettingsPage.js","webpack:///./src/app/components/ContactsSection.js","webpack:///./src/app/pages/GeneralPage.js","webpack:///./src/app/components/ContactGroupsTable.js","webpack:///./src/app/components/ContactGroupsSection.js","webpack:///./src/app/pages/ContactGroupsPage.js","webpack:///./src/app/containers/SettingsContainer.js","webpack:///./src/app/content/PrivateApp.js","webpack:///./src/app/content/PublicApp.js","webpack:///./src/app/App.js","webpack:///./src/app/index.js","webpack:///./node_modules/design-system/assets/img/shared/bank-icons sync .svg$","webpack:///./node_modules/date-fns/locale lazy ^\\.\\/[a-z]{2}(-([A-Z]{2}))"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","sriHashes","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","indexOf","window","location","origin","crossOrigin","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","integrity","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","oldJsonpFunction","slice","CLIENT_ID","CLIENT_TYPE","CLIENT_SECRET","APP_VERSION","APP_NAME","API_URL","SECURE_URL","API_VERSION","DATE_VERSION","CHANGELOG_PATH","VERSION_PATH","SENTRY_RELEASE","SENTRY_DSN","createContext","ContactProvider","children","subscribe","useEventManager","cache","useInstance","createCache","createLRU","max","useLayoutEffect","Contacts","Array","isArray","ID","Action","Contact","has","EVENT_ACTIONS","DELETE","delete","UPDATE","set","status","STATUS","RESOLVED","ContactProviderContext","Provider","FIELDS_WITH_PREF","hasPref","field","includes","sanitizeProperties","properties","filter","map","toString","split","addPref","prefs","reduce","acc","pref","sortByPref","firstEl","secondEl","reOrderByPref","withPref","withoutPref","sort","concat","generateNewGroupName","existingGroups","index","found","addGroup","group","getFirstValue","find","getAllValues","OTHER_INFORMATION_FIELDS","VCARD_KEY_FIELDS","CLEAR_FIELDS","SIGNED_FIELDS","OVERWRITE","CATEGORIES","getValue","getValues","jCal","getRawValues","val","clearType","toLowerCase","replace","getType","types","formatAdr","adr","Boolean","trim","join","getKeysFromProperties","emailGroup","defaultSign","a","async","base64","binaryStringToArray","decodeBase64","getKeys","then","publicKey","catch","noop","pinnedKeyPromises","encrypt","sign","scheme","mimeType","pinnedKeys","ONE_OR_MORE_MUST_BE_PRESENT","ONE_OR_MORE_MAY_BE_PRESENT","PROPERTIES","fn","cardinality","nickname","photo","bday","anniversary","gender","tel","email","impp","lang","tz","geo","title","role","logo","org","member","related","categories","note","prodid","rev","sound","uid","clientpidmap","url","version","fburl","caladruri","caluri","isCustomField","startsWith","parse","vcard","comp","ICAL","Component","getAllProperties","splitProperty","getParameter","prefValue","prop","toICAL","some","versionProperty","Property","setValue","addProperty","component","fieldWithGroup","setParameter","merge","contact","forEach","isValid","vcf","match","readVcf","file","readFileAsString","linkConnections","connections","didModify","newConnections","connection","connected","indexFound","keys","obj","findKeyIndex","unique","extractNewValue","mergedValues","isNotNewAdr","mergedAdr","componentIsArray","valueIsArray","str","contacts","mergedContact","mergedProperties","mergedPropertiesPrefs","mergedGroups","changeGroup","values","newGroup","newValue","newPref","Math","canAdd","AttachedFile","iconName","className","clear","onClear","rest","splitExtension","fileName","extension","Icon","toUpperCase","humanSize","size","Button","onClick","AttachingModalContent","attached","onAttach","Alert","learnMore","Bordered","FileInput","accept","id","onChange","PropTypes","files","ImportCsvTableHeader","disabledPrevious","disabledNext","onPrevious","onNext","TableCell","disabled","icon","defaultPropTypes","getOtherInformationFields","text","getAllFieldLabels","SelectImportField","onChangeField","fields","Label","Select","options","getAllTypes","SelectImportType","onChangeType","beIgnoredCsvProperties","toVcardType","csvType","templates","header","checked","combineInto","combineIndex","toPreVcard","original","standard","normalize","test","custom","preVcards","combine","propertyN","fill","propertyADR","propertyORG","display","readCsv","Papa","dynamicTyping","complete","errors","headers","skipEmptyLines","headersLength","filteredContacts","formattedHeaders","beRemoved","beChanged","isEmptyHeaderIndex","capitalize","_header","_value","standarize","enrichedHeaders","standardContacts","translator","flat","preVcard","prepare","preVcardContacts","nonCombined","combined","combination","preparedPreVcardContacts","indices","k","entries","toVcard","ImportCsvTableRows","onToggle","Checkbox","rowSpan","ImportCsvTableBody","loading","TableRowBusy","colSpan","modifyContactField","preVcardsContact","newField","modifyPreVcardField","modifyContactType","newType","modifyPreVcardType","ImportCsvModalContent","onSetVcardContacts","createNotification","useNotifications","useLoading","isParsingFile","withParsing","useState","contactIndex","setContactIndex","preVcardsContacts","setPreVcardsContacts","useEffect","parseFile","toVcardContacts","Table","groupIndex","firstNameIndex","findIndex","lastNameIndex","isFirstNameChecked","isLastNameChecked","toggleContactChecked","Block","DynamicProgress","alt","displayDuring","displaySuccess","displayFailed","endPostponed","failed","Loader","displayEnd","aria-describedby","aria-atomic","aria-live","ErrorDetails","summary","Details","Summary","generateUID","s4","floor","random","substring","CLEAR_TEXT","CONTACT_CARD_TYPE","ENCRYPTED_AND_SIGNED","SIGNED","splitProperties","toClearText","toSign","toEncryptAndSign","prepareCards","privateKeys","publicKeys","encryptMessage","armor","detached","Data","Signature","signature","Type","hasUID","hasFN","defaultUID","defaultFN","signMessage","prepareContact","privateKey","sanitized","withGroup","Cards","prepareContacts","hasCategories","vcardContact","splitContacts","withCategories","withoutCategories","percentageProgress","successful","total","min","combineProgress","processes","allocated","combinedTotal","combinedAllocations","progresses","combinedProgress","round","OVERWRITE_CONTACT","IGNORE","INCLUDE","SINGLE_SUCCESS","API_CODES","createParseErrorMessage","createEncryptErrorMessage","createSubmitErrorMessage","ImportingModalContent","isVcf","vcardContacts","onFinish","api","useApi","withLoading","parsed","encrypted","submitted","failedOnEncrypt","failedOnParse","failedOnSubmit","model","setModel","abortController","AbortController","parseVcfContacts","signal","vcards","pop","extractVcards","aborted","parsedVcard","parseVcard","encryptContact","contactEncrypted","encryptBatch","encryptContacts","toPublic","contactBatches","encryptedContacts","batch","encryptedBatch","submitBatch","labels","indexMap","config","addContacts","Overwrite","Labels","Response","responses","Responses","Code","submittedBatch","failedOnSubmitBatch","submitContacts","apiCalls","wait","parsedContacts","abort","ngettext","msgid","ImportGroupsModalContent","Row","MAX_SIZE","BASE_SIZE","ImportModal","userKeysList","createModal","useModals","step","setStep","setFile","setVcardContacts","importFinished","setImportFinished","submit","PrimaryButton","handleClear","content","attachedFile","Confirm","onConfirm","onClose","confirm","close","onSubmit","read","ResetButton","modalProps","FormModal","ContactImageField","ContactAdrField","address","addressArray","from","_","initialAddress","setAddress","handleChange","newAddress","Input","placeholder","htmlFor","ContactImageModal","initialUrl","setUrl","Field","reader","FileReader","onloadend","resizeImage","maxWidth","maxHeight","finalMimeType","encoderOptions","bigResize","base64str","readAsDataURL","defaultProps","ContactFieldProperty","EmailInput","TelInput","TextArea","date","Date","parseISO","DateInput","toISOString","ContactLabelProperty","label","ContactModalLabel","otherInformationFields","ContactModalRow","onRemove","isOrderable","canDelete","canClear","list","OrderableHandle","DropdownActions","EncryptedIcon","Tooltip","ICONS","other","ContactModalProperties","allProperties","onOrderChange","onAdd","TITLES","rows","useMemo","handleSortEnd","useCallback","newIndex","oldIndex","orderedProperties","move","scrollContainerClass","OrderableContainer","helperClass","onSortEnd","useDragHandle","row","OrderableElement","UpsellFree","redirectTo","upgradeToPaidPlanSvg","style","DEFAULT_MODEL","THROW_ERROR_IF_CONFLICT","editableFields","UID_PREFIX","ContactModal","contactID","initialProperties","history","useUser","user","useUserKeys","loadingUserKeys","formatModel","setProperties","handleRemove","propertyUID","handleAdd","randomIntFromInterval","newProperties","handleOrderChange","unshift","notEditableProperties","hasPaidMail","ContactGroupTable","contactEmails","onDelete","TableHeader","cells","TableBody","Name","Email","SmallButton","TableRow","mapIDs","ContactGroupModal","contactGroupID","setLoading","useContactGroups","contactGroups","useContactEmails","contactGroup","existingContactEmails","LabelIDs","color","Color","LABEL_COLORS","contactEmailIDs","orderBy","contactEmailID","contactGroupParams","updateLabel","createContactGroup","toLabel","toUnlabel","diff","labelContactEmails","LabelID","ContactEmailIDs","unLabelContactEmails","ColorSelector","selected","contactEmail","alreadyExist","copy","ItemCheckbox","ContactGroupIcon","ContactRow","contactGroupsMap","onCheck","emails","isChecked","classnames","stopPropagation","data-contact-id","getInitial","labelID","addPlus","withRouter","totalContacts","totalContactsInGroup","onClearSearch","onClearSelection","isDesktop","listRef","useRef","containerRef","lastChecked","setLastChecked","handleCheck","shiftKey","nativeEvent","getAttribute","contactIDs","start","end","handleClick","pathname","timeoutID","current","scrollToRow","addContact","importContact","IllustrationPlaceholder","noContactsImg","jt","editGroup","handleEditGroup","clearSearch","LinkButton","noResultsImg","ref","height","width","rowRenderer","rowCount","rowHeight","useContact","useContext","miss","getContact","useCachedModelResult","ENCRYPTED","ACTIONS","getMessage","getSignature","decryptMessage","verified","verifyMessage","createCleartextMessage","card","decryptedCards","sanitizedCards","ContactViewErrors","Href","ContactImageSummary","isURL","showAnyways","setShowAnyways","image","setImage","useMailSettings","ShowImages","loadingMailSettings","loadingResize","withLoadingResize","showPhoto","SHOW_IMAGES","REMOTE","toImage","isSmall","resized","backgroundImage","backgroundPosition","backgroundRepeat","ContactSummary","leftBlockWidth","href","SelectEmailsModal","ContactID","contactEmailIndex","toSubmit","ContactGroupDropdownButton","buttonRef","caretClassName","isOpen","DropdownCaret","collectContacts","duplicate","ContactGroupDropdown","forToolbar","keyword","setKeyword","usePopperAnchor","anchorRef","toggle","useContacts","inGroup","getModel","filteredContactGroups","normalizedKeyword","Dropdown","autoClose","SearchInput","autoFocus","checkboxId","indeterminate","selectedContactEmails","collectedContacts","groupEntries","TYPE_INTERNAL","RECIPIENT_TYPE","ENABLE_ENCRYPTION","KEY_FLAGS","isInternalUser","RecipientType","sortApiKeys","trustedFingerprints","verifyOnlyFingerprints","fingerprint","getFingerprint","toBitMap","isVerificationOnly","isNotTrusted","sortPinnedKeys","expiredFingerprints","revokedFingerprints","cannotSend","getKeyEncryptStatus","serverTime","creationTime","getCreationTime","getExpirationTime","expirationTime","isExpired","isRevoked","ContactMIMETypeSelect","MIME_TYPES","PLAINTEXT","ContactSchemeSelect","PGPScheme","defaultValue","PACKAGE_TYPE","SEND_PGP_INLINE","KeyWarningIcon","currentEmail","keyEmails","assignedEmails","users","userId","userid","exec","ContactKeysTable","setKeys","useActiveBreakpoint","isNarrow","isTinyMobile","totalApiKeys","allKeys","isPGPInternal","pinned","uniqueKeys","uniqueBy","algoInfo","getAlgorithmInfo","algo","describe","isTrusted","isActive","isWKD","isPGPExternal","isUploaded","canBeActive","canBeTrusted","canBeUntrusted","parsedKeys","scope","creation","expiration","blob","Blob","filename","downloadFile","apiIndex","pinnedIndex","reOrderedApiKeys","reOrderedPinnedKeys","Set","add","format","locale","dateLocale","Fragment","Badge","ContactPgpSettings","trustedApiKeys","hasApiKeys","hasPinnedKeys","hasTrustedApiKeys","noPinnedKeyCanSend","noTrustedApiKeyCanSend","pgpAddressDisabled","isPGPExternalWithoutWKDKeys","Info","Toggle","SelectKeyFiles","onFiles","multiple","SEND_PGP_MIME","PGP_MAP","ContactEmailSettingsModal","emailProperty","showPgpSettings","setShowPgpSettings","Sign","isLoading","isMimeTypeFixed","hasPGPInline","getKeysProperties","trustedKeys","encodeBase64","arrayToBinaryString","toPacketlist","write","toKeyProperty","getPublicKeysEmailHelper","apiKeysConfig","internalUser","externalUser","Keys","Flags","apiKeys","orderedApiKeys","isPGPExternalWithWKDKeys","Dialog","modalTitleID","Content","otherProperties","emailProperties","onReset","noValidate","Inner","Footer","ContactViewProperty","rightBlockWidth","work","home","cell","main","yomi","fax","pager","first","cleanType","rel","RemoteImage","getContent","Group","ButtonGroup","Copy","getActions","ContactViewProperties","toExclude","ContactView","singleExport","contactLoading","splitKeys","ExportModal","onSave","loadingContacts","contactsExported","addSuccess","contactsNotExported","addError","countContacts","ceil","apiWithAbort","exportBatch","queryContactExport","Page","PageSize","contactDecrypted","contactExported","exportContacts","allVcards","now","footer","MergeRow","onMerge","boldText","PaidCards","onImport","onExport","onGroups","importSvg","exportSvg","contactGroupsSvg","FreeCards","upgradeSvg","ContactPlaceholder","selectedContacts","contactGroupName","onUncheck","canMerge","totalContactsText","contactGroupCard","boldTotalContacts","navigateTo","Link","to","ContactToolbar","activeIDs","contactEmailsMap","simplified","contactEmailsSelected","ToolbarSeparator","PrivateHeader","search","onSearch","expanded","onToggleExpand","inSettings","MainLogo","Hamburger","Searchbox","TopNavbar","UpgradeButton","external","TopNavbarLink","aria-current","SearchDropdown","hasCaret","FloatingButton","UpgradeModal","PrivateSidebar","URLSearchParams","link","_match","Sidebar","mobileLinks","moveInGroup","collection","MergedContactSummary","tels","adrs","orgs","notes","items","ContactDetails","small","MergeErrorContent","alreadyMerged","beMergedModel","beDeletedModel","totalBeMerged","mergedAndEncrypted","failedOnMergeAndEncrypt","getDecryptedContact","decrypt","getDecryptedGroup","groupIDs","decryptedGroup","decryptedContact","encryptAlreadyMerged","beSubmittedContacts","encryptedMergedContact","mergeAndEncrypt","beDeletedBatchIDs","beDeletedAfterMergeIDs","state","ignoreClose","deleteContacts","deleteMarkedForDeletion","beDeletedIDs","MergeContactPreview","updateModel","isMerging","setIsMerging","mergeFinished","setMergeFinished","beMergedIDs","handleRemoveMerged","beRemovedIDs","orderedContacts","beMergedContacts","errorOnLoad","errorOnMerge","hasClose","opaqueClassName","greyedOut","NameTableCell","highlightedID","deleted","EmailsTableCell","MergeTableBody","beDeleted","onClickCheckbox","onClickDetails","onToggleDelete","OrderableTableBody","OrderableTableRow","MergeTableHeader","MergeTable","onClickPreview","OrderableTable","MergeModalContent","beMergedID","beMergedModelSingle","beDeletedModelSingle","MergeModal","willBeMerged","DeleteModal","deleteAll","loadingDelete","withLoadingDelete","ErrorButton","clearContacts","allSucceded","apiSuccess","PrivateLayout","AppsSidebar","StorageSpaceStatus","ContactsContainer","useToggle","setExpand","updateSearch","normalizedSearch","loadingContactEmails","loadingContactGroups","checkedContacts","setCheckedContacts","hasChecked","toMap","searchFilter","groupFilter","formattedContacts","mergeableContacts","namesConnections","emailConnections","allConnections","extractMergeable","filteredCheckedIDs","hasCheckedAllFiltered","filteredContactsLength","update","handleClearSearch","handleCheckAllFiltered","handleUncheckAll","contactsLength","noHeader","contactComponent","ErrorBoundary","contactsListComponent","emptyAddressBook","contactPlaceHolderComponent","SettingsPage","SettingsTitle","ContactsSection","AutoSaveContacts","SubTitle","AutoSaveContactsToggle","autoSaveContacts","GeneralPage","ContactGroupsTable","setContactGroups","handleConfirmDeletion","deleteLabel","newList","orderContactGroup","OrderableTableHeader","countEmailAddresses","ContactGroupsSection","ContactGroupsPage","SettingsContainer","mainAreaRef","scrollTop","Switch","Route","path","EVENT_MODELS","UserModel","UserSettingsModel","MailSettingsModel","ContactsModel","SubscriptionModel","ContactEmailsModel","ContactGroupsModel","PRELOAD_MODELS","PrivateApp","onLogout","StandardPrivateApp","locales","preloadModels","eventModels","render","PublicApp","onLogin","StandardPublicApp","LoginForm","sentry","Setup","useAuthentication","UID","login","logout","hot","ProtonApp","ReactDOM","querySelector","webpackContext","req","webpackContextResolve","code","webpackAsyncContext","ids"],"mappings":"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CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,mBAAoB,CACnB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,GAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,gBAAiB,CAChB,OACA,IAED,mBAAoB,CACnB,OACA,IAED,mBAAoB,CACnB,OACA,KAGF,SAASumC,EAAoBH,GAC5B,IAAInuC,EAAoBuD,EAAEwE,EAAKomC,GAC9B,OAAOvtC,QAAQC,UAAUyK,MAAK,WAC7B,IAAI9K,EAAI,IAAIwB,MAAM,uBAAyBmsC,EAAM,KAEjD,MADA3tC,EAAE6tC,KAAO,mBACH7tC,KAIR,IAAI+tC,EAAMxmC,EAAIomC,GAAM96B,EAAKk7B,EAAI,GAC7B,OAAOvuC,EAAoBQ,EAAE+tC,EAAI,IAAIjjC,MAAK,WACzC,OAAOtL,EAAoBqT,MAG7Bi7B,EAAoB/9B,KAAO,WAC1B,OAAOzR,OAAOyR,KAAKxI,IAEpBumC,EAAoBj7B,GAAK,OACzB/S,EAAOD,QAAUiuC,G","file":"index.bbc6774b.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {\"3\":\"8cc6bd05\",\"4\":\"289eac7a\",\"5\":\"34349e75\",\"6\":\"87e23fae\",\"7\":\"ce6bb801\",\"8\":\"4fb07aef\",\"9\":\"947f57b2\",\"10\":\"c500f9e0\",\"11\":\"6e754a52\",\"12\":\"2de2dcec\",\"13\":\"26218c77\",\"14\":\"4232a5ec\",\"15\":\"609df72e\",\"16\":\"012fa836\",\"17\":\"bdebd471\",\"18\":\"08ebfe2c\",\"19\":\"16f6169c\",\"20\":\"d736650b\",\"21\":\"10671e7d\",\"22\":\"a56c611e\",\"23\":\"66ca65c5\",\"24\":\"30469ae3\",\"25\":\"ac5f5d69\",\"26\":\"b6da30c6\",\"27\":\"1e187bdf\",\"28\":\"1dbedd03\",\"29\":\"57a08404\",\"30\":\"051b1870\",\"31\":\"94cd7924\",\"32\":\"c82c4169\",\"33\":\"fec249b2\",\"34\":\"091970ef\",\"35\":\"990b39c7\",\"36\":\"6bd0e35d\",\"37\":\"99015436\",\"38\":\"41c9f701\",\"39\":\"459f1e59\",\"40\":\"628e857b\",\"41\":\"184cdca1\",\"42\":\"e893aea6\",\"43\":\"a458ed20\",\"44\":\"37493299\",\"45\":\"4deed603\",\"46\":\"4c1a2f55\",\"47\":\"26991b7c\",\"48\":\"e415b576\",\"49\":\"59a11d7d\",\"50\":\"56cee7c7\",\"51\":\"eb96219e\",\"52\":\"896d8463\",\"53\":\"6e331f91\",\"54\":\"752e1167\",\"55\":\"ac9be0c7\",\"56\":\"92580cea\",\"57\":\"ba7fd9cf\",\"58\":\"fe25594a\",\"59\":\"fbd3d022\",\"60\":\"f764d01c\",\"61\":\"9d38de72\",\"62\":\"ac5ad630\",\"63\":\"81184869\",\"64\":\"c6d1b7db\"}[chunkId] + \".chunk.js\"\n \t}\n \tvar sriHashes = {\"3\":\"sha384-9934ABN6uqPEPFosQLqxuVhvYUV4okLUNbM0wPFOjE32xxR0586aPIAfPwsnK0aM\",\"4\":\"sha384-c8lzpMfT7HLNH/GninvVmldA6MAz78U7S67XgZ0sL1zC/XsvbAc1sk/8WCbo5DRm\",\"5\":\"sha384-lv7AR2bqV8OenkumNTiZZdadAbQfO2XuJbYqEt9AzFdGlC10pFrN3Cs+aZUgjPcD\",\"6\":\"sha384-zGs+rCNJ2ybc4gZG6rllZSyRoPEPzHKQsQdmg5Ct1obpLbhfrgY0Eh8xKnaVYAWQ\",\"7\":\"sha384-pYGHH3VUsYMwA4BAKILHXmvGjpaxZlX7K4Of8Vf0TpR1zS6KDsgHFNzDpzirDyBf\",\"8\":\"sha384-ACeUJuCEJ59IYImLrUenrF6deSrpeWezxLcOsBAQyORKzdpa17wYYLC3/lu9FXfx\",\"9\":\"sha384-i0T45goKd5FtPV6EQM7mrJpda8H8zPWOz5tjU9ymETt7xBC6jUjwNqHloDdlm24u\",\"10\":\"sha384-8jUnc1d4TZkeepUWsacU28Ba3xjVZQC+DhOPOUgsOujkW4AH00aKevnp3eALoF96\",\"11\":\"sha384-DArCUJcqJmVbAYO1HmaQBxRDAd1LhtMG3EtURSQnKJtwDiZ1YwnP2rwfkK69PMf4\",\"12\":\"sha384-XS0QUhEY75QdhPe6i1rnrb4KAI4vmxXrsCsUmdIWSbx+ZzXXqOOWQouR+Hua6ukg\",\"13\":\"sha384-m+5HhZASMNDlwdTS4rbCfY+uMTLoDEBuHkgo2eRz1U72aRnXBRtcFNIpYN8UcOw0\",\"14\":\"sha384-lRW/huJoiN9BopHCZ2RcPCpNHFtWg3585yWFpWhv+DHGLlUB9fgLWMA1V/Roj1+b\",\"15\":\"sha384-irOAQuzwBISkvtz8hzaB0WP9TNhpfAYByjaJsV8JxgV+2F+3umYIZtxCJDfclqux\",\"16\":\"sha384-BRfHejCiWsn28LbRHzgaPHBmWBeqhz+loh+/rXH2QTedcz0OMFYxD7pvQch4Maq8\",\"17\":\"sha384-UP9yAZvoLx3uOKiaRwDd8CnL+TG6XnvmCQ/dqZUmuxDfNZimQYs6mhtwaDm1mC/E\",\"18\":\"sha384-ES8l1C4+eGYE3gz5iokugFlvGNUc3Jkl+RqsyPcNNYjnbugjT4OPnWttCcelmjC/\",\"19\":\"sha384-zuIZQSzznBcH/aeP6dj/cfl9tnmBnFZ5OvQWlFuj6zTniPXSJ825U++zKvplDaFc\",\"20\":\"sha384-jKcgQSWZyXXAHZ7g5WNU6glCJtd1tVX4BAcyO+Qo4PJMWFI7EIYYfbb1ieSu4Eob\",\"21\":\"sha384-8kzw/z8VFEI4cFXKzDPIhxdSEz3rcKu7VL7Hb8dm/1jP9WDy3G/6Pq1sk0DwdlUQ\",\"22\":\"sha384-vQaEGDUlI+f05Zln/tyPRJX7Q+EH6KpzX5B+1Ksqeq6smzvDMRw/VcuU7WO/9UWo\",\"23\":\"sha384-AoehfZkceTHXRM5ePhp5CSnOVH2PoqIeL8gzUpv5R1Vw2lZJrXIDuzUsxp4KZgq3\",\"24\":\"sha384-hMnh3w0w1iPOFlEhpEHjBAlGJVlowHPzeZ0M2IgBRwTD2htzyWAa5MRvVPkTzdJA\",\"25\":\"sha384-W/vYvDOgjWSw6gxJmVjoKKQmMwfR9dWhEORiTWcPGpDRuwQORazeQfeyxzfjoXdW\",\"26\":\"sha384-l0G9EBxQrDdTWOPdCuYSNETCg5O6AtKYekF47wIyiTjGwE04QYa8SLMSFxd8o71d\",\"27\":\"sha384-6OO7XYx9E3QXkIhdIlHQVH8Ue44DVJp6nrwTvFmrbXg9Nli+uRZgKGomg8WeiR5q\",\"28\":\"sha384-kf5ojG+WPoIphDkrlnR3D8popMDAnND5JLIltB7TQ3ye6zb8uOGYlF9AbKB08a9+\",\"29\":\"sha384-tnX0KN/cE5IZdJclcW7QcVbgrkg9mJrThT3/qxojXwCgrikX9kQaSLV7HtGWEp0J\",\"30\":\"sha384-WkkBR/2HPdRYZvC42rOkNplMBjlRLXlN6PHAN44T7C/py4oriEnv33Ze51S6Rd82\",\"31\":\"sha384-UNRa2ZGZ41ii/29/KnlYViDgvnb2hA6l3XuLrgDQLwLazM8VuaURvhQ02mJeICwL\",\"32\":\"sha384-AsuQU0y81OeHG6H/atJuFNibNJ5XjvuskJjC8MqHRThMTaVPAmIOVriCK+2vvchr\",\"33\":\"sha384-LgLJ3EvoZtIH0CDV7fGICHlQSeplOQ91vtIYNNJDdA0ENr/Q8yHfcxRMibTRv2lT\",\"34\":\"sha384-hb/lMcKNyJvXHCaXxXXmGClN2mW6KRgbY+U2PjU1kOm93RG9Om+r8pX3Kpdnnqh4\",\"35\":\"sha384-z+Zv2ZTMH6JCh48NoXvxPueez9w8XAHZlpPDMY1Y7I/pt1eJSgxgxDwf0PK0JIOR\",\"36\":\"sha384-XSYUc6dvyA7SajIlM8GwH5oqi7VeUAjVBcc+vQzlmJa7ttnN2oEJLsCphFHkS5C0\",\"37\":\"sha384-5h0AJiBbQmnmdLoIV6T3+wDDvPlyPQt8iwni+MkRZDnYXO26pMsmc4d/l9zZV3N3\",\"38\":\"sha384-W8sU1K3akH3iR1b2CgC0NjRHd2navx73bLUlbH/kxAxjm80AEJ9+GkNHEwiGvtS8\",\"39\":\"sha384-VzYMHzEL3iG47djGZ8oFdSxk2k88lejaAAXa9j9sP8JFkQ9KO6juZrjnv0Qt+Qhv\",\"40\":\"sha384-T4PpKTsD9/LYiH7irzAx7ZNGJbC/5RGjEpsq+i/Sov/Ok3YDK/L6soiemAuLjJIN\",\"41\":\"sha384-PPuiSgLVtm9dKVr7s5Yf2+MmSsnBNsQizBIyR1tTgVclLmyp8M/+LaANz/QaZl4w\",\"42\":\"sha384-fjyvCz3D+xT+Y1DiQ1DXBeYM/yVCjVhkIMJIK7Hmj2KRnh/JgCmUS9Y3BchRLHKE\",\"43\":\"sha384-9cRxEJRfWCr3NJOWD5RWORkImWu7NhRUbdWmKRL4O30QZt5YHGWqGAHdu3nm6iJN\",\"44\":\"sha384-ojzmhdPobWffn3uS7YlXq8nUjrFSKnIEo5igI9VmsV0hf5sML1vuqo3WNQ8cVTd0\",\"45\":\"sha384-zx8A2SLhiOzCrp0YsZI3L67f601RtYZkG+T8Ypn7cEIxMb/5kfyjlu0AncxNsqRl\",\"46\":\"sha384-orcgeC+mhWxY99KH2JApmjOshTEcJ8ndZzOdUKfttrMZQPDlTULjWPOarYsXRrbC\",\"47\":\"sha384-nJ0DaYc5GWnwssOIfk5YahTBrNISX+r0xmSvJ0bF4pAIQejpnw1KPc2LOAKkK5x3\",\"48\":\"sha384-jzEKNGMf5XBJm1srqq8UZsYGD+XNEsV5YBMeGRWR0udJC4N3pC8R8pttnubZVHtk\",\"49\":\"sha384-WahoBLbM74PGDr/7/fXrnbvs2TwiYihLfkiAnqvHOqFsnZNmEasRBasd43J3F4X7\",\"50\":\"sha384-C4bS4nSOgnJlFMdjHgoFhiVjA+XiFeet6Tqtfgg7zRxg/kBVdibpD/2as6vLDNrA\",\"51\":\"sha384-wRNAFACmiKh7qvcPXQkjdrU2MwDDvwci1sZepkaQDh9RAPWI7RNjPoHAZGV5FYlW\",\"52\":\"sha384-a0b3xhuXCCBxCKwbP5wjNQc9ZCzDHmH+TTVVkdrpNKO4OwbDLA5UyJTJ90l9nGv8\",\"53\":\"sha384-XP0rQY7SqZIC5f/uxurYuYi0a8MNVdxarSV8Vb6nscMsXpLRjrUREf2siCZ6KvBM\",\"54\":\"sha384-VQiGyLj12mnQv4Gbq262pqG3ClZUAWoI4cOiClzNf9fqBd66eAI+Jp+I149+8Qe5\",\"55\":\"sha384-rV6u8eshKm1ESH0MK6LYeqyY5+8C2Nt/qVn8ooBr+GcZSUnFi2c9aXdddVrU/wIp\",\"56\":\"sha384-zaGeszS8oQHGzgMlYL0/wQkNyuEvpbswRtityiuS4y0GzxCjy+d+NIL3CNRSg4cn\",\"57\":\"sha384-hS/5RVkIw66sQdEqjl66X/YjLX3eBqWBSce7sbXdSbLGiEpb8nGbrj9SNx8hRqwy\",\"58\":\"sha384-s763XtDuYj/NBS8L6/uXd3TCBhjsztgBv2SZPbX/QtpaDiv0LgKLxIx2astqjLY5\",\"59\":\"sha384-TzW2aFz9aLA54S/yPUzTlCBuh1+hJ2iPVNdgtZIAP1LzEfKwF8ZvBhzWTpmz8CPr\",\"60\":\"sha384-skCRYdZpBI4T0RUlwriRgXKe5LNXomfke5BxGWyCbQJw5i3xUe3AFrEM/7F63s/0\",\"61\":\"sha384-Q4E0teznn7Aj66mYA9mT7JRn+zOhBcDvsEjxSOoAoV52jtiBsKJh7Tlh0MejtUB/\",\"62\":\"sha384-GZV2VNVAzNi975g0cLQQ/DKnCiLUkNI7Ooc00P42VLsnwOdxRt0e8DaO754mBJ6K\",\"63\":\"sha384-eU8Nu5+9hDL+VCxDT9Kl2XnXb08gLe5740xMLlDmOcE06oBYmO3l9Lwv0EelIyDy\",\"64\":\"sha384-XoiKA1IU2zJPo8CPBM/oQVuTJcij0q5Xr5oQMtlJLP4ArWl/A05zMuLZ03LCVVsy\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n \t\t\t\tif (script.src.indexOf(window.location.origin + '/') !== 0) {\n \t\t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\t}\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tscript.integrity = sriHashes[chunkId];\n \t\t\t\tscript.crossOrigin = \"anonymous\";\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const CLIENT_ID = 'WebContacts';\nexport const CLIENT_TYPE = 1;\nexport const CLIENT_SECRET = '';\nexport const APP_VERSION = '0.0.0';\nexport const APP_NAME = 'proton-contacts';\nexport const API_URL = 'https://protonmail.blue/api';\nexport const SECURE_URL = 'https://secure.protonmail.blue';\nexport const API_VERSION = '3';\nexport const DATE_VERSION = 'Tue, 17 Dec 2019 15:10:29 GMT';\nexport const CHANGELOG_PATH = 'assets/changelog.tpl.html';\nexport const VERSION_PATH = 'assets/version.json';\nexport const SENTRY_RELEASE = '';\nexport const SENTRY_DSN = '';","import { createContext } from 'react';\n\nexport default createContext();\n","import React, { useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useInstance, useEventManager } from 'react-components';\nimport createCache from 'proton-shared/lib/helpers/cache';\nimport createLRU from 'proton-shared/lib/helpers/lru';\nimport { EVENT_ACTIONS } from 'proton-shared/lib/constants';\nimport { STATUS } from 'proton-shared/lib/models/cache';\n\nimport ContactProviderContext from './ContactProviderContext';\n\n/**\n * The purpose of this provider is to synchronize individual contact fetches with updates from the event manager,\n * and to have a separate LRU cache for it.\n */\nconst ContactProvider = ({ children }) => {\n    const { subscribe } = useEventManager();\n    const cache = useInstance(() => {\n        return createCache(createLRU({ max: 10 }));\n    });\n\n    useLayoutEffect(() => {\n        return subscribe(({ Contacts }) => {\n            if (!Array.isArray(Contacts)) {\n                return;\n            }\n            for (const { ID, Action, Contact } of Contacts) {\n                // Ignore updates for non-fetched contacts.\n                if (!cache.has(ID)) {\n                    continue;\n                }\n                if (Action === EVENT_ACTIONS.DELETE) {\n                    cache.delete(ID);\n                }\n                if (Action === EVENT_ACTIONS.UPDATE) {\n                    // The contact is always received in full, so we can ignore if the contact would be currently fetching (to merge the old data)\n                    cache.set(ID, { value: Contact, status: STATUS.RESOLVED });\n                }\n            }\n        });\n    }, []);\n\n    return <ContactProviderContext.Provider value={cache}>{children}</ContactProviderContext.Provider>;\n};\n\nContactProvider.propTypes = {\n    children: PropTypes.node\n};\n\nexport default ContactProvider;\n","// Vcard fields for which we keep track of PREF parameter\nconst FIELDS_WITH_PREF = ['fn', 'email', 'tel', 'adr', 'key'];\n\n/**\n * Given a Vcard field, return true if we take into consideration its PREF parameters\n * @param {String} field\n * @returns {Boolean}\n */\nexport const hasPref = (field) => FIELDS_WITH_PREF.includes(field);\n\n/**\n * Make sure we keep only valid properties\n * In case adr property is badly formatted, re-format\n * @param {Array} properties\n * @returns {Array}\n */\nexport const sanitizeProperties = (properties = []) => {\n    /*\n        property values should be either arrays or strings\n        transform to string otherwise (usually the case of a date for bday or anniversary fields)\n        enforce value for adr field be an array\n    */\n    return properties\n        .filter(({ value }) => value)\n        .map((property) =>\n            Array.isArray(property.value) ? property : { ...property, value: property.value.toString() }\n        )\n        .map((property) => {\n            const { field, value } = property;\n            if (field !== 'adr' || Array.isArray(value)) {\n                return property;\n            }\n            // assume the bad formatting used commas instead of semicolons\n            const newValue = value.split(',').slice(0, 6);\n            return { ...property, value: newValue };\n        });\n};\n\n/**\n * Add `pref` to email, adr, tel to save order\n * @param {Array} properties\n * @param {Array}\n */\nexport const addPref = (properties = []) => {\n    const prefs = FIELDS_WITH_PREF.reduce((acc, field) => {\n        acc[field] = 0;\n        return acc;\n    }, Object.create(null));\n\n    return properties.map((property) => {\n        if (!FIELDS_WITH_PREF.includes(property.field)) {\n            return property;\n        }\n\n        const pref = (prefs[property.field] = prefs[property.field] + 1);\n\n        return {\n            ...property,\n            pref\n        };\n    });\n};\n\n/**\n * Function that sorts properties by preference\n */\nexport const sortByPref = (firstEl, secondEl) => firstEl.pref - secondEl.pref;\n\n/**\n * Given a list of properties with preference, reorder them according to the preference\n * @param {Array} properties\n * @returns {Array}\n */\nexport const reOrderByPref = (properties) => {\n    const { withPref, withoutPref } = properties.reduce(\n        (acc, property) => {\n            if (FIELDS_WITH_PREF.includes(property.field)) {\n                acc.withPref.push(property);\n            } else {\n                acc.withoutPref.push(property);\n            }\n            return acc;\n        },\n        { withPref: [], withoutPref: [] }\n    );\n\n    return withPref.sort(sortByPref).concat(withoutPref);\n};\n\n/**\n * Generate new group name that doesn't exist\n * @param {Array<String>} existingGroups\n * @returns {String}\n */\nexport const generateNewGroupName = (existingGroups = []) => {\n    let index = 1;\n    let found = false;\n\n    while (!found) {\n        if (existingGroups.includes(`item${index}`)) {\n            index++;\n        } else {\n            found = true;\n        }\n    }\n\n    return `item${index}`;\n};\n\n/**\n * Add `group` if missing for email.\n * @param {Array} properties\n * @returns {Array}\n */\nexport const addGroup = (properties = []) => {\n    const existingGroups = properties.map(({ group }) => group);\n    return properties.map((property) => {\n        if (!['email'].includes(property.field) || property.group) {\n            return property;\n        }\n\n        const group = generateNewGroupName(existingGroups);\n        existingGroups.push(group);\n\n        return {\n            ...property,\n            group\n        };\n    });\n};\n\n/**\n * Given an array of vCard properties (see notation in the file './csv.js'),\n * get the value for a certain field the first time it appears in the array\n * @param {Array<Object>}   properties\n * @param {String}          field\n *\n * @return {String,Array}\n */\nexport const getFirstValue = (properties, field) => {\n    const { value } = properties.find(({ field: f }) => f === field) || {};\n    return value;\n};\n\n/**\n * Given an array of vCard properties (see notation in the file './csv.js'),\n * get all the values for a certain field (which can appear several times in the array)\n * @param {Array<Object>}   properties\n * @param {String}          field\n *\n * @return {String,Array}\n */\nexport const getAllValues = (properties, field) => {\n    return addPref(properties)\n        .filter(({ field: f }) => f === field)\n        .sort(sortByPref)\n        .map(({ value }) => value);\n};\n","export const CONTACT_IMG_SIZE = 180; // size in px that we display in desktop view\nexport const POST_BOX = 0;\nexport const EXTENDED = 1;\nexport const STREET = 2;\nexport const LOCALITY = 3;\nexport const REGION = 4;\nexport const POSTAL_CODE = 5;\nexport const COUNTRY = 6;\n\n// List of fields display in the bottom section for contact view\nexport const OTHER_INFORMATION_FIELDS = [\n    'bday',\n    'anniversary',\n    'gender',\n    'lang',\n    'tz',\n    'geo',\n    'title',\n    'role',\n    'photo',\n    'logo',\n    'org',\n    'member',\n    'note',\n    'url'\n];\n\nexport const VCARD_KEY_FIELDS = ['key', 'x-pm-mimetype', 'x-pm-encrypt', 'x-pm-sign', 'x-pm-scheme', 'x-pm-tls'];\nexport const CLEAR_FIELDS = ['version', 'prodid', 'categories'];\nexport const SIGNED_FIELDS = ['version', 'prodid', 'fn', 'uid', 'email'].concat(VCARD_KEY_FIELDS);\n\nexport const SIGNATURE_NOT_VERIFIED = 1;\nexport const FAIL_TO_READ = 2;\nexport const FAIL_TO_LOAD = 3;\nexport const FAIL_TO_DECRYPT = 4;\nexport const PGP_INLINE = 'pgp-inline';\nexport const PGP_MIME = 'pgp-mime';\nexport const PGP_INLINE_TEXT = 'PGP/Inline';\nexport const PGP_MIME_TEXT = 'PGP/MIME';\nexport const PGP_SIGN = 1;\n\nexport const OVERWRITE = {\n    // when UID conflict at contact import\n    THROW_ERROR_IF_CONFLICT: 0,\n    OVERWRITE_CONTACT: 1\n};\n\nexport const CATEGORIES = {\n    IGNORE: 0,\n    INCLUDE: 1\n};\n\n// BACK-END DATA\nexport const API_SAFE_INTERVAL = 100; // API request limit: 100 requests / 10 seconds, so 1 request every 100 ms is safe\nexport const QUERY_EXPORT_MAX_PAGESIZE = 50; // in GET API route /contacts/export\n// Manual limit on number of imported contacts to be sent to the API, so that the response does not take too long\nexport const ADD_CONTACTS_MAX_SIZE = 100;\n\n// FRONT-END RESTRICTIONS\nexport const MAX_SIMULTANEOUS_CONTACTS_ENCRYPT = 5;\n","import { getKeys, arrayToBinaryString, binaryStringToArray, decodeBase64, encodeBase64 } from 'pmcrypto';\nimport { PGP_SIGN, VCARD_KEY_FIELDS } from '../constants';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { sortByPref } from './properties';\n\n/**\n * ICAL library can crash if the value saved in the vCard is improperly formatted\n * If it crash we get the raw value from jCal key\n * @param {ICAL.Property} property\n *\n * @return {Array<String>}\n */\nconst getRawValues = (property) => {\n    try {\n        return property.getValues();\n    } catch (error) {\n        const [, , , value = ''] = property.jCal || [];\n        return [value];\n    }\n};\n\n/**\n * Get the value of an ICAL property\n * @param {ICAL.Property} property\n *\n * @return {String,Array}  currently an array for the field adr, a string otherwise\n */\nexport const getValue = (property) => {\n    const [value] = getRawValues(property).map((val) => {\n        // adr\n        if (Array.isArray(val)) {\n            return val;\n        }\n\n        if (typeof val === 'string') {\n            return val;\n        }\n\n        // date\n        return val.toString();\n    });\n\n    return value;\n};\n\n/**\n * Transform a custom type starting with 'x-' into normal type\n * @param {String} type\n *\n * @return {String}\n */\nexport const clearType = (type = '') => type.toLowerCase().replace('x-', '');\n\n/**\n * Given types in an array, return the first type.\n * If types is a string already, return it\n * @param {String,Array} types\n *\n * @return {String}\n */\nexport const getType = (types = []) => {\n    if (Array.isArray(types)) {\n        if (!types.length) {\n            return '';\n        }\n        return types[0];\n    }\n    return types;\n};\n\n/**\n * Transform an array value for the field 'adr' into a string to be displayed\n * @param {Array} adr\n *\n * @return {String}\n */\nexport const formatAdr = (adr = []) => {\n    return adr\n        .filter(Boolean)\n        .map((value) => value.trim())\n        .join(', ');\n};\n\n/**\n * Given an array of vCard properties, extract the keys and key-related fields\n * relevant for an email address\n * @param {Array} properties\n * @param {String} emailGroup       Group that characterizes the email address\n * @param {Number} defaultSign             Default sign value in case no other is specified in the vcard\n * @returns {Promise<{scheme: String, encrypt: Boolean, mimeType: String, pinnedKeys: Array}>}\n */\nexport const getKeysFromProperties = async (properties, emailGroup, defaultSign) => {\n    const { pinnedKeyPromises, mimeType, encrypt, scheme, sign } = properties\n        .filter(({ field, group }) => VCARD_KEY_FIELDS.includes(field) && group === emailGroup)\n        .reduce(\n            (acc, { field, value, pref }) => {\n                if (field === 'key' && value) {\n                    const [, base64 = ''] = value.split(',');\n                    const key = binaryStringToArray(decodeBase64(base64));\n\n                    if (key.length) {\n                        const promise = getKeys(key)\n                            .then(([publicKey]) => ({ publicKey, pref }))\n                            .catch(noop);\n                        acc.pinnedKeyPromises.push(promise);\n                    }\n\n                    return acc;\n                }\n                if (field === 'x-pm-encrypt' && value) {\n                    acc.encrypt = value === 'true';\n                    return acc;\n                }\n                if (field === 'x-pm-sign' && value) {\n                    acc.sign = value === 'true';\n                    return acc;\n                }\n                if (field === 'x-pm-scheme' && value) {\n                    acc.scheme = value;\n                    return acc;\n                }\n                if (field === 'x-pm-mimetype' && value) {\n                    acc.mimeType = value;\n                    return acc;\n                }\n                return acc;\n            },\n            { pinnedKeyPromises: [], mimeType: '', encrypt: false, scheme: '', sign: defaultSign === PGP_SIGN } // Default values\n        );\n    const pinnedKeys = (await Promise.all(pinnedKeyPromises))\n        .filter(Boolean)\n        .sort(sortByPref)\n        .map(({ publicKey }) => publicKey);\n\n    return { pinnedKeys, mimeType, encrypt, scheme, sign };\n};\n\n/**\n * Transform a key into a vCard property\n * @param {} publicKey      A PGP key\n * @param {String} group\n * @param {Number} index\n * @returns { field, pref, value, group }\n */\nexport const toKeyProperty = ({ publicKey, group, index }) => ({\n    field: 'key',\n    value: `data:application/pgp-keys;base64,${encodeBase64(arrayToBinaryString(publicKey.toPacketlist().write()))}`,\n    group,\n    pref: `${index + 1}` // order is important\n});\n","import ICAL from 'ical.js';\nimport { readFileAsString } from 'proton-shared/lib/helpers/file';\nimport { hasPref, sortByPref } from './properties';\nimport { getValue } from './property';\n\nexport const ONE_OR_MORE_MUST_BE_PRESENT = '1*';\nexport const EXACTLY_ONE_MUST_BE_PRESENT = '1';\nexport const EXACTLY_ONE_MAY_BE_PRESENT = '*1';\nexport const ONE_OR_MORE_MAY_BE_PRESENT = '*';\n\nexport const PROPERTIES = {\n    fn: { cardinality: ONE_OR_MORE_MUST_BE_PRESENT },\n    n: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    nickname: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    photo: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    bday: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    anniversary: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    gender: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    adr: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    tel: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    email: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    impp: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    lang: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    tz: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    geo: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    title: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    role: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    logo: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    org: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    member: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    related: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    categories: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    note: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    prodid: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    rev: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    sound: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    uid: { cardinality: EXACTLY_ONE_MAY_BE_PRESENT },\n    clientpidmap: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    url: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    version: { cardinality: EXACTLY_ONE_MUST_BE_PRESENT },\n    key: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    fburl: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    caladruri: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT },\n    caluri: { cardinality: ONE_OR_MORE_MAY_BE_PRESENT }\n};\n\nexport const getAllFields = () => Object.keys(PROPERTIES);\nexport const isCustomField = (field = '') => field.startsWith('x-');\n\n/**\n * Parse vCard String and return contact properties model as an Array\n * @param {String} vcard to parse\n * @returns {Array} contact properties ordered\n */\nexport const parse = (vcard = '') => {\n    const comp = new ICAL.Component(ICAL.parse(vcard));\n    const properties = comp.getAllProperties();\n\n    return properties\n        .reduce((acc, property) => {\n            const splitProperty = property.name.split('.');\n            const field = splitProperty[1] ? splitProperty[1] : splitProperty[0];\n            const type = property.getParameter('type');\n            const prefValue = property.getParameter('pref');\n            const pref = typeof prefValue === 'string' && hasPref(field) ? +prefValue : undefined;\n\n            // Ignore invalid field\n            if (!field) {\n                return acc;\n            }\n\n            const isCustom = isCustomField(field);\n\n            // Ignore invalid property\n            if (!isCustom && !PROPERTIES[field]) {\n                return acc;\n            }\n\n            const group = splitProperty[1] ? splitProperty[0] : undefined;\n            const prop = { pref, field, group, type, value: getValue(property) };\n\n            acc.push(prop);\n\n            return acc;\n        }, [])\n        .sort(sortByPref);\n};\n\n/**\n * Parse contact properties to create a ICAL vcard component\n * @param {Array} contact properties\n * @returns {ICAL.Component} vcard\n */\nexport const toICAL = (properties = []) => {\n    const comp = new ICAL.Component('vcard');\n    if (!properties.some(({ field }) => field === 'version')) {\n        const versionProperty = new ICAL.Property('version');\n        versionProperty.setValue('4.0');\n        comp.addProperty(versionProperty);\n    }\n    return properties.reduce((component, { field, type, pref, value, group }) => {\n        const fieldWithGroup = [group, field].filter(Boolean).join('.');\n        const property = new ICAL.Property(fieldWithGroup);\n        property.setValue(value);\n        type && property.setParameter('type', type);\n        pref && property.setParameter('pref', '' + pref);\n        component.addProperty(property);\n        return component;\n    }, comp);\n};\n\n/**\n * Merge multiple contact properties\n * order matters\n * @param {Array} contact\n * @returns {Array} contact properties\n */\nexport const merge = (contact = []) => {\n    return contact.reduce((acc, properties) => {\n        properties.forEach((property) => {\n            const { field } = property;\n            const { cardinality = ONE_OR_MORE_MAY_BE_PRESENT } = PROPERTIES[field] || {};\n\n            if ([ONE_OR_MORE_MUST_BE_PRESENT, ONE_OR_MORE_MAY_BE_PRESENT].includes(cardinality)) {\n                acc.push(property);\n            } else if (!acc.find(({ field: f }) => f === field)) {\n                acc.push(property);\n            }\n        });\n        return acc;\n    }, []);\n};\n\n/**\n * Basic test for the validity of a vCard file read as a string\n * @param {String} vcf\n *\n * @return {Boolean}\n */\nconst isValid = (vcf = '') =>\n    !!vcf.match(/BEGIN:VCARD/g) && vcf.match(/BEGIN:VCARD/g).length === (vcf.match(/END:VCARD/g) || []).length;\n\n/**\n * Read a vCard file as a string. If there are errors when parsing the csv, throw\n * @param {File} vcf\n *\n * @return {String}\n */\nexport const readVcf = async (file) => {\n    const vcf = await readFileAsString(file);\n    if (!isValid(vcf)) {\n        throw new Error('Error when reading vcf file');\n    }\n    return vcf;\n};\n\n/**\n * Extract array of vcards from a string containing several vcards\n * @param {String} vcf\n *\n * @return {Array<String>}  Array of vcards\n */\nexport const extractVcards = (vcf = '') => {\n    const vcards = vcf.split('END:VCARD');\n    vcards.pop();\n    return vcards.map((vcard) => vcard.trim() + '\\r\\nEND:VCARD');\n};\n","import { normalize } from 'proton-shared/lib/helpers/string';\n\nimport { hasPref, generateNewGroupName } from './properties';\nimport { unique } from 'proton-shared/lib/helpers/array';\nimport { ONE_OR_MORE_MUST_BE_PRESENT, ONE_OR_MORE_MAY_BE_PRESENT, PROPERTIES, isCustomField } from './vcard';\n\n/**\n * Given an array of keys and an object storing an index for each key,\n * if the object contains any of these keys, return the index stored in the object\n * for the first of such keys. Otherwise return -1\n * @param {Array} keys\n * @param {Object} obj\n *\n * @return {Number}\n */\nconst findKeyIndex = (keys, obj) => {\n    for (const key of keys) {\n        if (obj[key] !== undefined) {\n            return obj[key];\n        }\n    }\n    return -1;\n};\n\n/**\n * Given a list of connections (a \"connection\" is a list of keys [key1, key2, ...] connected for some reason),\n * find recursively all connections and return a new list of connections with no key repeated.\n * E.g.: [[1, 2, 3], [3, 5], [4, 6]] ->  [[1, 2, 3, 5], [4, 6]]\n * @param {Array} connections\n *\n * @return {Array}\n */\nexport const linkConnections = (connections) => {\n    let didModify = false;\n\n    const { newConnections } = connections.reduce(\n        (acc, connection) => {\n            const { connected, newConnections } = acc;\n            // check if some index in current connection has been connected already\n            const indexFound = findKeyIndex(connection, connected);\n\n            if (indexFound !== -1) {\n                // add indices in current connection to the connected connection\n                newConnections[indexFound] = unique([...connection, ...newConnections[indexFound]]);\n                for (const key of connection) {\n                    // update list of connected indices\n                    if (connected[key] === undefined) {\n                        connected[key] = indexFound;\n                    }\n                }\n                didModify = true;\n            } else {\n                // update list of connected indices\n                for (const key of connection) {\n                    connected[key] = newConnections.length;\n                }\n                newConnections.push(connection);\n            }\n            return acc;\n        },\n        { connected: Object.create(null), newConnections: [] }\n    );\n    // if some indices previously unconnected have been connected,\n    // run linkConnections again\n    if (didModify) {\n        return linkConnections(newConnections);\n    }\n    // otherwise no more connections to be established\n    return connections;\n};\n\n/**\n * Given a list of contacts, extract the ones that can be merged\n * @param {Array<Object>} contacts      Each contact is an object { ID, emails, Name, LabelIDs }\n *\n * @returns {Array<Array<Object>>}      List of groups of contacts that can be merged\n */\nexport const extractMergeable = (contacts = []) => {\n    // detect duplicate names\n    // namesConnections = { name: [contact indices with this name] }\n    const namesConnections = Object.values(\n        contacts.reduce((acc, { Name }, index) => {\n            const name = normalize(Name);\n\n            if (!acc[name]) {\n                acc[name] = [index];\n            } else {\n                acc[name].push(index);\n            }\n\n            return acc;\n        }, Object.create(null))\n    )\n        .map(unique)\n        .filter((connection) => connection.length > 1);\n\n    // detect duplicate emails\n    // emailConnections = { email: [contact indices with this email] }\n    const emailConnections = Object.values(\n        contacts.reduce((acc, { emails }, index) => {\n            emails.map(normalize).forEach((email) => {\n                if (!acc[email]) {\n                    acc[email] = [index];\n                } else {\n                    acc[email].push(index);\n                }\n            });\n            return acc;\n        }, Object.create(null))\n    )\n        .map(unique)\n        .filter((connection) => connection.length > 1);\n\n    // Now we collect contact indices that go together\n    // either in duplicate names or duplicate emails.\n    const allConnections = linkConnections([...namesConnections, ...emailConnections]);\n\n    return allConnections.map((indices) => indices.map((index) => contacts[index]));\n};\n\n/**\n * Given the value and field of a contact property, and a list of merged properties,\n * return '' if the value has been merged, or the new value to be merged otherwise\n * @param {String|Array} value\n * @param {String} field\n * @param {Array<String|Array>} mergedValues\n *\n * @return {String}\n */\nexport const extractNewValue = (value, field, mergedValues = []) => {\n    //  the field adr has to be treated separately since it has an array value\n    if (field === 'adr') {\n        // the array structure of an 'adr' value is\n        // value = [ PObox, extAdr, street, city, region, postalCode, country ]\n        // each of the elements inside value can be a string or an array of strings\n\n        // compare with merged addresses\n        const isNotNewAdr = mergedValues\n            .map((mergedAdr) => {\n                // check adr element by adr element to see if there are new values\n                const isNewComponent = mergedAdr\n                    .map((component, index) => {\n                        // each of the components inside adr may be an array itself\n                        const componentIsArray = Array.isArray(component);\n                        const valueIsArray = Array.isArray(value[index]);\n                        if (componentIsArray && valueIsArray) {\n                            return value[index].some((str) => !component.includes(str));\n                        }\n                        if (!componentIsArray && !valueIsArray) {\n                            return component !== value[index];\n                        }\n                        return true;\n                    })\n                    .filter(Boolean);\n\n                return !isNewComponent.length;\n            })\n            // keep track of only repeated addresses\n            .filter(Boolean);\n\n        // if some address is repeated, it is not new\n        return !isNotNewAdr.length ? value : '';\n    }\n    // for the other fields, value is a string, and mergedValues an array of strings\n    return !mergedValues.includes(value) ? value : '';\n};\n\n/**\n * Merge a list of contacts. The contacts must be ordered in terms of preference.\n * @param {Array<Array<Object>>} contacts   Each contact is a list of properties [{ pref, field, group, type, value }]\n *\n * @return {Array}                          The merged contact\n */\nexport const merge = (contacts = []) => {\n    if (!contacts.length) {\n        return [];\n    }\n\n    const { mergedContact } = contacts.reduce(\n        (acc, contact, index) => {\n            const { mergedContact, mergedProperties, mergedPropertiesPrefs, mergedGroups } = acc;\n            if (index === 0) {\n                // merged contact inherits all properties from the first contact\n                mergedContact.push(...contact);\n                // keep track of merged properties with respective prefs and merged groups\n                for (const { pref, field, value, group } of contact) {\n                    if (!mergedProperties[field]) {\n                        mergedProperties[field] = [value];\n                        if (hasPref(field)) {\n                            mergedPropertiesPrefs[field] = [pref];\n                        }\n                    } else {\n                        mergedProperties[field].push(value);\n                        if (hasPref(field)) {\n                            mergedPropertiesPrefs[field].push(pref);\n                        }\n                    }\n                    // email and groups are in one-to-one correspondence\n                    if (field === 'email') {\n                        mergedGroups[value] = group;\n                    }\n                }\n            } else {\n                // for the other contacts, keep only non-merged properties\n\n                // but first prepare to change repeated groups\n                // extract groups in contact to be merged\n                const groups = contact\n                    .filter(({ field }) => field === 'email')\n                    .map(({ value, group }) => ({ email: value, group }));\n                // establish how groups should be changed\n                const changeGroup = groups.reduce((acc, { email, group }) => {\n                    if (Object.values(mergedGroups).includes(group)) {\n                        acc[group] = mergedGroups[email] || generateNewGroupName(Object.values(mergedGroups));\n                    } else {\n                        acc[group] = group;\n                    }\n                    return acc;\n                }, Object.create(null));\n\n                for (const property of contact) {\n                    const { pref, field, group, value } = property;\n                    const newGroup = group ? changeGroup[group] : group;\n                    if (!mergedProperties[field]) {\n                        // an unseen property is directly merged\n                        mergedContact.push({ ...property, pref: pref, group: newGroup });\n                        mergedProperties[field] = [value];\n                        if (hasPref(field)) {\n                            mergedPropertiesPrefs[field] = [pref];\n                        }\n                        if (newGroup && field === 'email') {\n                            mergedGroups[value] = newGroup;\n                        }\n                    } else {\n                        // for properties already seen,\n                        // check if there is a new value for it\n                        const newValue = extractNewValue(value, field, mergedProperties[field]);\n                        const newPref = hasPref(field) ? Math.max(...mergedPropertiesPrefs[field]) + 1 : undefined;\n                        // check if the new value can be added\n                        const canAdd =\n                            isCustomField(field) ||\n                            [ONE_OR_MORE_MAY_BE_PRESENT, ONE_OR_MORE_MUST_BE_PRESENT].includes(\n                                PROPERTIES[field].cardinality\n                            );\n\n                        if (!!newValue && canAdd) {\n                            mergedContact.push({ ...property, pref: newPref, value: newValue, group: newGroup });\n                            mergedProperties[field].push(newValue);\n                            if (hasPref(field)) {\n                                mergedPropertiesPrefs[field] = [newPref];\n                            }\n                            if (newGroup && field === 'email') {\n                                mergedGroups[value] = newGroup;\n                            }\n                        }\n                    }\n                }\n            }\n            return acc;\n        },\n        {\n            mergedContact: [],\n            mergedProperties: Object.create(null),\n            mergedPropertiesPrefs: Object.create(null),\n            mergedGroups: Object.create(null)\n        }\n    );\n\n    return mergedContact;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, Button } from 'react-components';\n\nimport humanSize from 'proton-shared/lib/helpers/humanSize';\nimport { splitExtension } from 'proton-shared/lib/helpers/file';\n\nconst AttachedFile = ({ file, iconName, className, clear = c('Action').t`Delete`, onClear, ...rest }) => {\n    const [fileName, extension] = splitExtension(file.name);\n\n    return (\n        <div className={`flex bordered-container w100 ${className}`} {...rest}>\n            <div className=\"p0-5 flex flex-item-noshrink w10\">\n                <Icon name={iconName} className=\"mauto\" />\n            </div>\n            <div className=\"message-attachmentInfo p0-5 flex flex-nowrap w90\">\n                <div className=\"flex-item-fluid pr1\">\n                    <div className=\"ellipsis\" title={fileName}>\n                        {fileName}\n                    </div>\n                    <div>{`${extension.toUpperCase()} - ${humanSize(file.size)}`}</div>\n                </div>\n                <Button className=\"flex-item-noshrink\" onClick={onClear}>\n                    {clear}\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nAttachedFile.propTypes = {\n    file: PropTypes.instanceOf(File).isRequired,\n    iconName: PropTypes.string.isRequired,\n    clear: PropTypes.string,\n    onClear: PropTypes.func\n};\n\nexport default AttachedFile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Bordered, FileInput, Alert } from 'react-components';\n\nimport AttachedFile from './AttachedFile';\n\nconst AttachingModalContent = ({ attached, file, onAttach, onClear }) => {\n    return (\n        <>\n            <Alert learnMore=\"https://protonmail.com/support/knowledge-base/adding-contacts/\">\n                {c('Description')\n                    .t`We support importing CSV files from Outlook, Outlook Express, Yahoo! Mail, Hotmail, Eudora and some other apps. We also support importing vCard 4.0. (UTF-8 encoding).`}\n            </Alert>\n            <Bordered className=\"flex\">\n                {/* TODO: drag&drop component here. There seems to be no React component for this kind of behavior yet */}\n                {attached ? (\n                    <AttachedFile file={file} iconName=\"contacts-groups\" onClear={onClear} />\n                ) : (\n                    <FileInput className=\"center\" accept=\".csv, .vcf\" id=\"import-contacts\" onChange={onAttach}>\n                        {c('Action').t`Select file from computer`}\n                    </FileInput>\n                )}\n            </Bordered>\n        </>\n    );\n};\n\nAttachingModalContent.propTypes = {\n    attached: PropTypes.bool,\n    file: PropTypes.instanceOf(File),\n    onAttach: PropTypes.func,\n    onClear: PropTypes.func\n};\n\nAttachingModalContent.PropTypes = {\n    files: []\n};\n\nexport default AttachingModalContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { TableCell, Button, Icon } from 'react-components';\n\nconst ImportCsvTableHeader = ({ disabledPrevious, disabledNext, onPrevious, onNext, ...rest }) => {\n    return (\n        <thead {...rest}>\n            <tr>\n                <TableCell type=\"header\" className=\"w15 aligncenter\">\n                    {c('TableHeader').t`IMPORT`}\n                </TableCell>\n                <TableCell type=\"header\" className=\"aligncenter\">{c('TableHeader').t`CSV FIELD`}</TableCell>\n                <TableCell type=\"header\" className=\"aligncenter\">{c('TableHeader').t`VCARD FIELD`}</TableCell>\n                <TableCell type=\"header\" className=\"w30 aligncenter\">\n                    <div className=\"inline-flex\">\n                        <span className=\"flex-item-centered-vert mr0-5\">{c('TableHeader').t`VALUES`}</span>\n                        <span className=\"flex flex-nowrap\">\n                            <Button\n                                disabled={disabledPrevious}\n                                icon={<Icon name=\"caret\" className=\"flex-item-noshrink rotateZ-90\" />}\n                                onClick={onPrevious}\n                            />\n                            <Button\n                                disabled={disabledNext}\n                                icon={<Icon name=\"caret\" className=\"flex-item-noshrink rotateZ-270\" />}\n                                onClick={onNext}\n                            />\n                        </span>\n                    </div>\n                </TableCell>\n            </tr>\n        </thead>\n    );\n};\n\nImportCsvTableHeader.propTypes = {\n    disabledPrevious: PropTypes.bool,\n    disabledNext: PropTypes.bool,\n    onPrevious: PropTypes.func,\n    onNext: PropTypes.func\n};\n\nImportCsvTableHeader.defaultPropTypes = {\n    disabledPrevious: true,\n    disabledNext: true\n};\n\nexport default ImportCsvTableHeader;\n","import { c } from 'ttag';\n\nexport const getAllFields = () => [\n    { text: c('Contact field label').t`Name`, value: 'fn' },\n    { text: c('Contact field label').t`Compact name`, value: 'n' },\n    { text: c('Contact field label').t`Nickname`, value: 'nickname' },\n    { text: c('Contact field label').t`Email`, value: 'email' },\n    { text: c('Contact field label').t`Phone`, value: 'tel' },\n    { text: c('Contact field label').t`Address`, value: 'adr' },\n    { text: c('Contact field label').t`Photo`, value: 'photo' },\n    { text: c('Contact field label').t`Organization`, value: 'org' },\n    { text: c('Contact field label').t`Birthday`, value: 'bday' },\n    { text: c('Contact field label').t`Anniversary`, value: 'anniversary' },\n    { text: c('Contact field label').t`Title`, value: 'title' },\n    { text: c('Contact field label').t`Role`, value: 'role' },\n    { text: c('Contact field label').t`Note`, value: 'note' },\n    { text: c('Contact field label').t`URL`, value: 'url' },\n    { text: c('Contact field label').t`Gender`, value: 'gender' },\n    { text: c('Contact field label').t`Language`, value: 'lang' },\n    { text: c('Contact field label').t`Timezone`, value: 'tz' },\n    { text: c('Contact field label').t`Geo`, value: 'geo' },\n    { text: c('Contact field label').t`Logo`, value: 'logo' },\n    { text: c('Contact field label').t`Member`, value: 'member' },\n    { text: c('Contact field label').t`IMPP`, value: 'impp' },\n    { text: c('Contact field label').t`Related`, value: 'related' },\n    { text: c('Contact field label').t`Categories`, value: 'categories' },\n    { text: c('Contact field label').t`Sound`, value: 'sound' }\n];\n\nexport const getEditableFields = () => [\n    { text: c('Contact field label').t`Name`, value: 'fn' },\n    { text: c('Contact field label').t`Email`, value: 'email' },\n    { text: c('Contact field label').t`Phone`, value: 'tel' },\n    { text: c('Contact field label').t`Address`, value: 'adr' },\n    { text: c('Contact field label').t`Photo`, value: 'photo' },\n    { text: c('Contact field label').t`Organization`, value: 'org' },\n    { text: c('Contact field label').t`Birthday`, value: 'bday' },\n    { text: c('Contact field label').t`Anniversary`, value: 'anniversary' },\n    { text: c('Contact field label').t`Title`, value: 'title' },\n    { text: c('Contact field label').t`Role`, value: 'role' },\n    { text: c('Contact field label').t`Member`, value: 'member' },\n    { text: c('Contact field label').t`Note`, value: 'note' },\n    { text: c('Contact field label').t`URL`, value: 'url' },\n    { text: c('Contact field label').t`Gender`, value: 'gender' },\n    { text: c('Contact field label').t`Language`, value: 'lang' },\n    { text: c('Contact field label').t`Timezone`, value: 'tz' },\n    { text: c('Contact field label').t`Geo`, value: 'geo' },\n    { text: c('Contact field label').t`Logo`, value: 'logo' }\n];\nexport const getOtherInformationFields = () => [\n    { text: c('Contact field label').t`Photo`, value: 'photo' },\n    { text: c('Contact field label').t`Organization`, value: 'org' },\n    { text: c('Contact field label').t`Birthday`, value: 'bday' },\n    { text: c('Contact field label').t`Anniversary`, value: 'anniversary' },\n    { text: c('Contact field label').t`Title`, value: 'title' },\n    { text: c('Contact field label').t`Role`, value: 'role' },\n    { text: c('Contact field label').t`Member`, value: 'member' },\n    { text: c('Contact field label').t`Note`, value: 'note' },\n    { text: c('Contact field label').t`URL`, value: 'url' },\n    { text: c('Contact field label').t`Gender`, value: 'gender' },\n    { text: c('Contact field label').t`Language`, value: 'lang' },\n    { text: c('Contact field label').t`Timezone`, value: 'tz' },\n    { text: c('Contact field label').t`Geo`, value: 'geo' },\n    { text: c('Contact field label').t`Logo`, value: 'logo' }\n];\n\nexport const getAllFieldLabels = () => ({\n    fn: c('Contact field label').t`Name`,\n    n: c('Contact field label').t`Compact name`,\n    nickname: c('Contact field label').t`Nickname`,\n    email: c('Contact field label').t`Email`,\n    tel: c('Contact field label').t`Phone`,\n    adr: c('Contact field label').t`Address`,\n    photo: c('Contact field label').t`Photo`,\n    org: c('Contact field label').t`Organization`,\n    bday: c('Contact field label').t`Birthday`,\n    anniversary: c('Contact field label').t`Anniversary`,\n    title: c('Contact field label').t`Title`,\n    role: c('Contact field label').t`Role`,\n    note: c('Contact field label').t`Note`,\n    url: c('Contact field label').t`URL`,\n    gender: c('Contact field label').t`Gender`,\n    lang: c('Contact field label').t`Language`,\n    tz: c('Contact field label').t`Timezone`,\n    geo: c('Contact field label').t`Geo`,\n    logo: c('Contact field label').t`Logo`,\n    member: c('Contact field label').t`Member`,\n    impp: c('Contact field label').t`IMPP`,\n    related: c('Contact field label').t`Related`,\n    categories: c('Contact field label').t`Categories`,\n    sound: c('Contact field label').t`Sound`\n});\n\n// ** NOT USED FOR THE MOMENT **\n// export const getIcons = () => ({\n//     email: 'email',\n//     org: 'organization',\n//     tel: 'phone',\n//     adr: 'address',\n//     bday: 'birthday',\n//     anniversary: 'anniversary',\n//     title: 'title',\n//     role: 'role',\n//     note: 'note',\n//     url: 'domains',\n//     gender: 'gender',\n//     lang: 'alias', // TODO icon missing\n//     tz: 'alias', // TODO icon missing\n//     geo: 'domains',\n//     logo: 'photo',\n//     member: 'member-contact'\n// });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Select } from 'react-components';\n\nimport { getAllFields } from '../../helpers/fields';\n\nconst SelectImportField = ({ value, onChangeField }) => {\n    const fields = getAllFields();\n\n    const handleChangeField = ({ target }) => onChangeField(target.value);\n\n    return (\n        <Label className=\"pt0\">\n            <Select value={value} options={fields} onChange={handleChangeField} />\n        </Label>\n    );\n};\n\nSelectImportField.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChangeField: PropTypes.func\n};\n\nexport default SelectImportField;\n","import { c } from 'ttag';\n\nexport const getTypeLabels = () => ({\n    work: c('Contact type label').t`Work`,\n    home: c('Contact type label').t`Personal`,\n    cell: c('Contact type label').t`Mobile`,\n    main: c('Contact type label').t`Main`,\n    yomi: c('Contact type label').t`Yomi`,\n    other: c('Contact type label').t`Other`,\n    fax: c('Contact type label').t`Fax`,\n    pager: c('Contact type label').t`Pager`\n});\n\nexport const getAllTypes = () => ({\n    fn: [{ text: c('Property type').t`Name`, value: '' }, { text: c('Property type').t`Yomi`, value: 'yomi' }],\n    n: [],\n    nickname: [],\n    email: [\n        { text: c('Property type').t`Email`, value: '' },\n        { text: c('Property type').t`Home`, value: 'home' },\n        { text: c('Property type').t`Work`, value: 'work' },\n        { text: c('Property type').t`Other`, value: 'other' }\n    ],\n    tel: [\n        { text: c('Property type').t`Phone`, value: '' },\n        { text: c('Property type').t`Home`, value: 'home' },\n        { text: c('Property type').t`Work`, value: 'work' },\n        { text: c('Property type').t`Other`, value: 'other' },\n        { text: c('Property type').t`Mobile`, value: 'cell' },\n        { text: c('Property type').t`Main`, value: 'main' },\n        { text: c('Property type').t`Fax`, value: 'fax' },\n        { text: c('Property type').t`Pager`, value: 'pager' }\n    ],\n    adr: [\n        { text: c('Property type').t`Address`, value: '' },\n        { text: c('Property type').t`Home`, value: 'home' },\n        { text: c('Property type').t`Work`, value: 'work' },\n        { text: c('Property type').t`Other`, value: 'other' }\n    ],\n    bday: [],\n    anniversary: [],\n    gender: [],\n    lang: [],\n    tz: [],\n    geo: [],\n    title: [],\n    role: [],\n    logo: [],\n    photo: [],\n    org: [],\n    related: [\n        { text: c('Property type').t`Contact`, value: 'contact' },\n        { text: c('Property type').t`Acquaintance`, value: 'acquaintance' },\n        { text: c('Property type').t`Friend`, value: 'friend' },\n        { text: c('Property type').t`Met`, value: 'met' },\n        { text: c('Property type').t`Co-worker`, value: 'co-worker' },\n        { text: c('Property type').t`Colleague`, value: 'colleague' },\n        { text: c('Property type').t`Co-resident`, value: 'co-resident' },\n        { text: c('Property type').t`Neighbor`, value: 'neighbor' },\n        { text: c('Property type').t`Child`, value: 'child' },\n        { text: c('Property type').t`Parent`, value: 'parent' },\n        { text: c('Property type').t`Sibling`, value: 'sibling' },\n        { text: c('Property type').t`Sibling`, value: 'spouse' },\n        { text: c('Property type').t`Kin`, value: 'kin' },\n        { text: c('Property type').t`Muse`, value: 'muse' },\n        { text: c('Property type').t`Crush`, value: 'crush' },\n        { text: c('Property type').t`Date`, value: 'date' },\n        { text: c('Property type').t`Sweetheart`, value: 'sweetheart' },\n        { text: c('Property type').t`Me`, value: 'me' },\n        { text: c('Property type').t`Agent`, value: 'agent' },\n        { text: c('Property type').t`Emergency`, value: 'emergency' }\n    ],\n    member: [],\n    note: [],\n    url: []\n});\n\nexport const getTypeValues = () => ({\n    fn: ['', 'yomi'],\n    n: [],\n    nickname: [],\n    email: ['', 'home', 'work', 'other'],\n    tel: ['', 'home', 'work', 'other', 'cell', 'main', 'fax', 'pager'],\n    adr: ['', 'home', 'work', 'other'],\n    bday: [],\n    anniversary: [],\n    gender: [],\n    lang: [],\n    tz: [],\n    geo: [],\n    title: [],\n    role: [],\n    logo: [],\n    org: [],\n    related: [\n        'contact',\n        'acquaintance',\n        'friend',\n        'met',\n        'co-worker',\n        'colleague',\n        'co-resident',\n        'neighbor',\n        'child',\n        'parent',\n        'sibling',\n        'spouse',\n        'kin',\n        'muse',\n        'crush',\n        'date',\n        'sweetheart',\n        'me',\n        'agent',\n        'emergency'\n    ],\n    member: [],\n    note: [],\n    url: []\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Select } from 'react-components';\n\nimport { getAllTypes } from '../../helpers/types';\n\nconst SelectImportType = ({ field, value, onChangeType }) => {\n    const types = getAllTypes();\n\n    const handleChangeType = ({ target }) => onChangeType(target.value);\n\n    return (\n        <Label className=\"pt0\">\n            <Select value={value} options={types[field]} onChange={handleChangeType} />\n        </Label>\n    );\n};\n\nSelectImportType.propTypes = {\n    field: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChangeType: PropTypes.func\n};\n\nexport default SelectImportType;\n","import { capitalize, normalize } from 'proton-shared/lib/helpers/string';\n\n// See './csv.js' for the definition of pre-vCard and pre-vCards contact\n\n// Csv properties to be ignored\nconst beIgnoredCsvProperties = [\n    'name',\n    'initials',\n    'short name',\n    'maiden name',\n    'group membership',\n    'mileage',\n    'billing information',\n    'directory server',\n    'sensitivity',\n    'priority',\n    'subject'\n];\n\n/**\n * For a list of headers and csv contacts extracted from a csv,\n * check if a given header index has the empty value for all contacts\n * @param {Number} index\n * @param {Array<Array<String>>} contacts\n *\n * @return {Boolean}\n */\nconst isEmptyHeaderIndex = (index, contacts) => !contacts.some((values) => values[index] !== '');\n\n/**\n * Standarize a custom vcard type coming from a csv property\n * @param {String} csvType\n *\n * @return {String}\n */\nconst toVcardType = (csvType) => {\n    const type = csvType.toLowerCase();\n\n    switch (type) {\n        case 'home':\n            return 'home';\n        case 'business':\n            return 'work';\n        case 'work':\n            return 'work';\n        case 'mobile':\n            return 'cell';\n        case 'cell':\n            return 'cell';\n        case 'other':\n            return 'other';\n        case 'main':\n            return 'main';\n        case 'primary':\n            return 'main';\n        case 'company main':\n            return 'work';\n        case 'pager':\n            return 'pager';\n        case 'home fax':\n            return 'fax';\n        case 'work fax':\n            return 'fax';\n        default:\n            return '';\n    }\n};\n\n/**\n * Given csv properties and csv contacts from any csv file, transform the properties\n * into csv properties from a standard outlook csv. Transform the contacts accordingly\n * @param {Object} csvData\n * @param {Array<String>} csvData.headers           Array of csv properties\n * @param {Array<Array<String>>} csvData.contacts   Array of csv contacts\n *\n * @return {Object.headers}                         Object with the standarized headers and the corresponding original header: { standard, original }\n * @return {Object.contacts}                        Standarized csv contacts\n */\nexport const standarize = ({ headers, contacts }) => {\n    if (!contacts.length) {\n        return { headers, contacts };\n    }\n\n    // do a first simple formatting of headers\n    const formattedHeaders = headers.map((header) => header.replace('_', ' ').toLowerCase());\n\n    // change name of certain headers into outlook equivalents\n    // remove headers we are not interested in\n    // merge headers 'xxx - type' and 'xxx - value' into one header\n    const { beRemoved, beChanged } = formattedHeaders.reduce(\n        (acc, header, i) => {\n            const { beRemoved, beChanged } = acc;\n            const value = contacts[0][i];\n            if (isEmptyHeaderIndex(i, contacts)) {\n                beRemoved[i] = true;\n            }\n            if (beIgnoredCsvProperties.includes(header) || header.startsWith('im') || header.includes('event')) {\n                beRemoved[i] = true;\n                return acc;\n            }\n            if (header === 'address') {\n                beChanged[i] = 'street';\n            }\n            if (header === 'zip') {\n                beChanged[i] = 'postal code';\n            }\n            if (header === 'county') {\n                beChanged[i] = 'state';\n            }\n            /*\n                consecutive headers for address n property are (n is an integer)\n                * address n - type\n                * address n - formatted\n                * address n - street\n                * address n - city\n                * address n - PO box\n                * address n - region\n                * address n - postal code\n                * address n - country\n                * address n - extended address\n                we have to drop the first two headers and change the rest accordingly\n            */\n            if (/^address\\s?(\\d+)? - type$/.test(header)) {\n                const [, pref] = header.match(/^address\\s?\\d+? - type$/);\n                const n = pref ? pref : '';\n                beRemoved[i] = true;\n                beRemoved[i + 1] = true;\n                beChanged[i + 2] = (capitalize(toVcardType(value)) + ` Street ${n}`).trim();\n                beChanged[i + 3] = (capitalize(toVcardType(value)) + ` City ${n}`).trim();\n                beChanged[i + 4] = (capitalize(toVcardType(value)) + ` PO Box ${n}`).trim();\n                beChanged[i + 5] = (capitalize(toVcardType(value)) + ` State ${n}`).trim();\n                beChanged[i + 6] = (capitalize(toVcardType(value)) + ` Postal Code ${n}`).trim();\n                beChanged[i + 7] = (capitalize(toVcardType(value)) + ` Country/Region ${n}`).trim();\n                beChanged[i + 8] = (capitalize(toVcardType(value)) + ` Extended Address ${n}`).trim();\n                return acc;\n            }\n            /*\n                consecutive headers for organization n property are (n is an integer)\n                * organization n - type\n                * organization n - name\n                * organization n - yomi name\n                * organization n - title\n                * organization n - department\n                * organization n - symbol\n                * organization n - location\n                * organization n - job description\n                we can simply keep the name, title and department changing the corresponding header\n            */\n            if (/^organization\\s?\\d+? - (\\w+)$/.test(header)) {\n                const [, str] = header.match(/^organization\\s?\\d+? - (\\w+)$/);\n                if (str === 'name') {\n                    beChanged[i] = 'Company';\n                } else if (str === 'title') {\n                    beChanged[i] = 'Job Title';\n                } else if (str === 'department') {\n                    beChanged[i] = 'Department';\n                } else if (str === 'job description') {\n                    beChanged[i] = 'Role';\n                } else {\n                    beRemoved[i] = true;\n                }\n                return acc;\n            }\n            /*\n                consecutive headers for generic property with type are\n                * property - type\n                * property - value\n                we have to erase the first header and change the second one accordingly\n            */\n            if (/(.*) - type$/i.test(header)) {\n                const [, property] = header.match(/(.*) - type$/i);\n                beRemoved[i] = true;\n                beChanged[i + 1] = (capitalize(toVcardType(value)) + ' ' + property).trim();\n                return acc;\n            }\n\n            return acc;\n        },\n        { beRemoved: Object.create(null), beChanged: Object.create(null) }\n    );\n\n    const enrichedHeaders = formattedHeaders\n        .map((header, index) => {\n            const original = headers[index];\n            return { original, standard: beChanged[index] ? beChanged[index] : header };\n        })\n        .filter((_header, index) => !beRemoved[index]);\n\n    const standardContacts = contacts.map((values) => values.filter((_value, j) => !beRemoved[j]));\n\n    return { headers: enrichedHeaders, contacts: standardContacts };\n};\n\nconst templates = {\n    fn({ header, value, index }) {\n        return {\n            header,\n            value,\n            checked: true,\n            pref: 1,\n            field: 'fn',\n            type: 'main',\n            combineInto: 'fn-main',\n            combineIndex: index\n        };\n    },\n    fnYomi({ header, value, index }) {\n        return {\n            header,\n            value,\n            checked: true,\n            pref: 2,\n            field: 'fn',\n            type: 'yomi',\n            combineInto: 'fn-yomi',\n            combineIndex: index\n        };\n    },\n    n({ header, value, index }) {\n        return { header, value, checked: true, field: 'n', combineInto: 'n', combineIndex: index };\n    },\n    email({ pref, header, value, type }) {\n        return {\n            pref,\n            header,\n            value,\n            checked: true,\n            field: 'email',\n            type,\n            group: pref\n        };\n    },\n    tel({ pref, header, value, type }) {\n        return {\n            pref,\n            header,\n            value,\n            checked: true,\n            field: 'tel',\n            type\n        };\n    },\n    adr({ pref, header, type, value, index }) {\n        return {\n            pref,\n            header,\n            value,\n            checked: true,\n            field: 'adr',\n            type,\n            combineInto: `adr-${type}`,\n            combineIndex: index\n        };\n    },\n    org({ pref, header, value, index }) {\n        return {\n            pref,\n            header,\n            value,\n            checked: true,\n            field: 'org',\n            combineInto: 'org',\n            combineIndex: index\n        };\n    }\n};\n\n/**\n * Given an object with a csv property name (header) in both original and standard form,\n * return a function that transforms a value for that property into one or several pre-vCard properties\n * @param {String} enrichedHeader.original\n * @param {String} enrichedHeader.standard\n *\n *\n * @return {Function}\n */\nexport const toPreVcard = ({ original, standard }) => {\n    const property = normalize(standard);\n    const header = original;\n    if (['title', 'name prefix'].includes(property)) {\n        return (value) => [templates['fn']({ header, value, index: 0 }), templates['n']({ header, value, index: 3 })];\n    }\n    if (['first name', 'given name'].includes(property)) {\n        return (value) => [templates['fn']({ header, value, index: 1 }), templates['n']({ header, value, index: 1 })];\n    }\n    if (['middle name', 'additional name'].includes(property)) {\n        return (value) => [templates['fn']({ header, value, index: 2 }), templates['n']({ header, value, index: 2 })];\n    }\n    if (['last name', 'family name'].includes(property)) {\n        return (value) => [templates['fn']({ header, value, index: 3 }), templates['n']({ header, value, index: 0 })];\n    }\n    if (['suffix', 'name suffix'].includes(property)) {\n        return (value) => [templates['fn']({ header, value, index: 4 }), templates['n']({ header, value, index: 4 })];\n    }\n    if (['given yomi', 'given name yomi'].includes(property)) {\n        return (value) => templates['fnYomi']({ header, value, index: 0 });\n    }\n    if (['middle name yomi', 'additional name yomi'].includes(property)) {\n        return (value) => templates['fnYomi']({ header, value, index: 1 });\n    }\n    if (['surname yomi', 'family name yomi'].includes(property)) {\n        return (value) => templates['fnYomi']({ header, value, index: 2 });\n    }\n    if (/^company\\s?(\\d*)/.test(property)) {\n        const [, pref] = property.match(/^company\\s?(\\d*)/);\n        return (value) => templates['org']({ pref, header, value, index: 0 });\n    }\n    if (/^department\\s?(\\d*)/.test(property)) {\n        const [, pref] = property.match(/^department\\s?(\\d*)/);\n        return (value) => templates['org']({ pref, header, value, index: 1 });\n    }\n    if (/^(\\w+)?\\s?e-?mail\\s?(\\d*)/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w+)?\\s?e-?mail\\s?(\\d*)/);\n        return (value) => templates['email']({ pref, header, value, type: type ? toVcardType(type) : '' });\n    }\n    if (/^(\\w+\\s*\\w+)?\\s?phone\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w+\\s*\\w+)?\\s?phone\\s?(\\d*)$/);\n        return (value) => templates['tel']({ pref, header, value, type: type ? toVcardType(type) : '' });\n    }\n    if (/^(\\w+)?\\s?fax\\s?(\\d*)$/.test(property)) {\n        const [, , pref] = property.match(/^(\\w+)?\\s?fax\\s?(\\d*)$/);\n        return (value) => templates['tel']({ pref, header, value, type: 'fax' });\n    }\n    if (/^(\\w+)?\\s?pager\\s?(\\d*)$/.test(property)) {\n        const [, , pref] = property.match(/^(\\w+)?\\s?pager\\s?(\\d*)$/);\n        return (value) => templates['tel']({ pref, header, value, type: 'pager' });\n    }\n    if (/^callback|telex\\s?(\\d*)$/.test(property)) {\n        const [, pref] = property.match(/^callback|telex\\s?(\\d*)$/);\n        return (value) => templates['tel']({ pref, header, value, type: 'other' });\n    }\n    if (/^(\\w*)\\s?po box\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?po box\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 0 });\n    }\n    if (/^(\\w*)\\s?extended address\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?extended address\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 1 });\n    }\n    if (/^(\\w*)\\s?street\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?street\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 2 });\n    }\n    if (/^(\\w*)\\s?city\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?city\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 3 });\n    }\n    if (/^(\\w*)\\s?state\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?state\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 4 });\n    }\n    if (/^(\\w*)\\s?postal code\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?postal code\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 5 });\n    }\n    if (/^(\\w*)\\s?country|region\\s?(\\d*)$/.test(property)) {\n        const [, type, pref] = property.match(/^(\\w*)\\s?country\\/region\\s?(\\d*)$/);\n        return (value) => templates['adr']({ pref, header, type: toVcardType(type), value, index: 6 });\n    }\n    if (property === 'nickname') {\n        return (value) => ({\n            header,\n            value: value,\n            checked: true,\n            field: 'nickname'\n        });\n    }\n    if (property === 'imaddress') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'impp'\n        });\n    }\n    if (property === 'job title') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'title'\n        });\n    }\n    if (property === 'role') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'role'\n        });\n    }\n    if (property.includes('relation')) {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'related'\n        });\n    }\n    if (property === \"manager's name\") {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'related',\n            type: 'co-worker'\n        });\n    }\n    if (property === \"assistant's name\") {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'related',\n            type: 'agent'\n        });\n    }\n    if (property === 'spouse') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'related',\n            type: 'spouse'\n        });\n    }\n    if (property === 'birthday') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'bday'\n        });\n    }\n    if (property === 'anniversary') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'anniversary'\n        });\n    }\n    if (property.includes('web')) {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'url'\n        });\n    }\n    if (property === 'photo') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'photo'\n        });\n    }\n    if (property === 'logo') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'logo'\n        });\n    }\n    if (property === 'location') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'geo',\n            type: 'main'\n        });\n    }\n    if (property === 'office location') {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'geo',\n            type: 'work'\n        });\n    }\n    if (property === 'notes' || property.includes('custom field')) {\n        return (value) => ({\n            header,\n            value,\n            checked: true,\n            field: 'note'\n        });\n    }\n\n    // convert any other property into custom note\n    return (value) => ({\n        header,\n        value,\n        checked: true,\n        field: 'note',\n        custom: true\n    });\n};\n\n/**\n * When there is only one pre-vCard property in a pre-vCards property, get the property\n * @param {Array} preVcards     A pre-vCards property\n *\n * @return {String}             Value of the pre-vCards property\n */\nconst getFirstValue = (preVcards) => (preVcards[0].checked ? preVcards[0].value : '');\n\n/**\n * This object contains the functions that must be used when combining pre-vCard properties into\n * vCard ones. The keys correspond to the field of the pre-vCards to be combined.\n */\nexport const combine = {\n    fn(preVcards) {\n        return preVcards.reduce((acc, { value, checked }) => (value && checked ? acc + ` ${value}` : acc), '').trim();\n    },\n    n(preVcards) {\n        const propertyN = new Array(5).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyN[combineIndex] = value;\n            }\n        });\n        return propertyN;\n    },\n    adr(preVcards) {\n        const propertyADR = new Array(7).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyADR[combineIndex] = value;\n            }\n        });\n        return propertyADR;\n    },\n    org(preVcards) {\n        const propertyORG = new Array(2).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyORG[combineIndex] = value;\n            }\n        });\n        return propertyORG.filter(Boolean).join(';');\n    },\n    email: getFirstValue,\n    tel: getFirstValue,\n    nickname: getFirstValue,\n    photo: getFirstValue,\n    bday: getFirstValue,\n    anniversary: getFirstValue,\n    title: getFirstValue,\n    role: getFirstValue,\n    note: getFirstValue,\n    url: getFirstValue,\n    gender: getFirstValue,\n    lang: getFirstValue,\n    tz: getFirstValue,\n    geo: getFirstValue,\n    logo: getFirstValue,\n    member: getFirstValue,\n    impp: getFirstValue,\n    related: getFirstValue,\n    categories: getFirstValue,\n    sound: getFirstValue,\n    custom(preVcards) {\n        const { header, value } = preVcards[0];\n        return value ? `${header}: ${getFirstValue(preVcards)}` : '';\n    }\n};\n\n/**\n * Because the value of a vCard property is not always a string (sometimes it is an array),\n * we need an additional function that combines the csv properties into a string to be displayed.\n * This object contains the functions that take an array of pre-vCards properties to be combined\n * and returns the value to be displayed. The keys correspond to the field of the pre-vCards to be combined.\n */\nexport const display = {\n    fn(preVcards) {\n        return preVcards.reduce((acc, { value, checked }) => (value && checked ? acc + ` ${value}` : acc), '').trim();\n    },\n    n(preVcards) {\n        const propertyN = new Array(5).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyN[combineIndex] = value;\n            }\n        });\n        return propertyN.filter(Boolean).join(', ');\n    },\n    adr(preVcards) {\n        const propertyADR = new Array(7).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyADR[combineIndex] = value;\n            }\n        });\n        return propertyADR.filter(Boolean).join(', ');\n    },\n    org(preVcards) {\n        const propertyORG = new Array(2).fill('');\n        preVcards.forEach(({ value, checked, combineIndex }) => {\n            if (checked) {\n                propertyORG[combineIndex] = value;\n            }\n        });\n        return propertyORG.filter(Boolean).join('; ');\n    },\n    nickname(preVcards) {\n        return getFirstValue(preVcards)[0];\n    },\n    email: getFirstValue,\n    tel: getFirstValue,\n    photo: getFirstValue,\n    bday: getFirstValue,\n    anniversary: getFirstValue,\n    title: getFirstValue,\n    role: getFirstValue,\n    note: getFirstValue,\n    url: getFirstValue,\n    gender: getFirstValue,\n    lang: getFirstValue,\n    tz: getFirstValue,\n    geo: getFirstValue,\n    logo: getFirstValue,\n    member: getFirstValue,\n    impp: getFirstValue,\n    related: getFirstValue,\n    categories: getFirstValue,\n    sound: getFirstValue,\n    custom(preVcards) {\n        const { header, value, checked } = preVcards[0];\n        return checked && value ? `${header}: ${getFirstValue(preVcards)}` : '';\n    }\n};\n","import Papa from 'papaparse';\nimport { standarize, combine, display, toPreVcard } from './csvFormat';\n\n/** NOTATION\n *\n * Because the words 'property' and 'contact' are used several times in this file with different\n * meanings depending on the context, let us establish here those context meanings.\n *\n * \"csv property\": The first row of a csv file is made of several headers.\n *                 We call them csv properties.\n *                 E.g. 'First Name', 'Last Name', 'Email 2 Address'\n *\n * \"csv contact\": Each row of a csv file (except for the first one) is made of string values\n *                that correspond to the property in the header. We call the array made of\n *                these values a csv contact.\n *                E.g. ['john', 'doe', 'john.doe@microsoft.com', ...]\n *\n * \"csv contact value\": Each of the string values inside a csv contact\n *\n * \"vCard property\": A format we are using for vCard properties in the file './vcard.js'.\n *                   Namely a vCard property is the JS object:\n *                   { pref, field, group, type, value }\n *                   The key pref stands for preference, and is used when a property is repeated in a vcard\n *                   The key field indicates the field of this property. See the possibilities in './fields'\n *                   The key type indicates the type of this property, which depends on the field. See the possibilities in './types'\n *                   The key group is used for contact groups\n *                   The Key value is the value of the property. An string-valued array for adr and nickname, a string for the rest\n *\n * \"vCard contact\": An array made of vCard properties\n *\n * \"pre-vCard property\": Because different csv properties may correspond to a single vCard property,\n *                       to pass from one to the other we go through an intermediate step.\n *                       A pre-vCard property is the JS object:\n *                       { header, checked, pref, field, type, value, combineInto, combineIndex, custom }\n *                       The key \"header\" equals the csv property.\n *                       The key \"checked\" will mark whether we want to include this property into the vCard\n *                       The key \"combineInto\" will be the same for different csv properties that will\n *                       assemble into a single vCard property. For this assembly we need to order\n *                       the properties, which will be indicated by the key \"combineIndex\".\n *                       The key \"custom\" is a Boolean that indicates whether the header couldn't be matched\n *                       with a standard vCard property.\n *\n * \"pre-vCard contact\": An array made of pre-vCard properties\n *\n * \"pre-vCards property\" An array of pre-vCard properties. These pre-Vcards are to be combined into a single vCard\n * \"pre-vCards contact\": An array made of arrays of pre-Vcard properties\n */\n\n/**\n * Get all csv properties and corresponding contacts values from a csv file.\n * If there are errors when parsing the csv, throw\n * @param {File} file\n * @return {Promise<Object>}         { headers: Array<String>, values: Array<Array<String>> }\n *\n * @dev  contacts[i][j] : value for property headers[j] of contact i\n */\nexport const readCsv = async (file) => {\n    const { headers, contacts, errors } = await new Promise((resolve, reject) => {\n        const onComplete = ({ data = [], errors = [] } = {}) =>\n            resolve({ headers: data[0], contacts: data.slice(1), errors });\n        Papa.parse(file, {\n            header: false,\n            /*\n                If true, the first row of parsed data will be interpreted as field names. An array of field names will be returned in meta,\n                and each row of data will be an object of values keyed by field name instead of a simple array.\n                Rows with a different number of fields from the header row will produce an error.\n            */\n            dynamicTyping: false, // If true, numeric and Boolean data will be converted to their type instead of remaining strings.\n            complete: onComplete,\n            error: reject,\n            skipEmptyLines: true // If true, lines that are completely empty will be skipped. An empty line is defined to be one which evaluates to empty string.\n        });\n    });\n\n    if (errors.length) {\n        throw new Error('Error when reading csv file');\n    }\n\n    // we have to manually correct Papa.parse which can return headers and contacts of different length\n    const headersLength = headers.length;\n    const filteredContacts = contacts\n        .map((contact) => contact.slice(0, headersLength))\n        .filter((contact) => contact.length === headersLength);\n\n    return { headers, contacts: filteredContacts };\n};\n\n/**\n * Transform csv properties and csv contacts into pre-vCard contacts.\n * @param {Object} csvData\n * @param {Array<String>} csvData.headers           Array of csv properties\n * @param {Array<Array<String>>} csvData.contacts   Array of csv contacts\n *\n * @return {Array<Array<Object>>}                   pre-vCard contacts\n *\n * @dev  Some csv property may be assigned to several pre-vCard contacts,\n *       so an array of new headers is returned together with the pre-vCard contacts\n */\nconst parse = ({ headers = [], contacts = [] }) => {\n    if (!contacts.length) {\n        return [];\n    }\n    const { headers: enrichedHeaders, contacts: standardContacts } = standarize({ headers, contacts });\n\n    const translator = enrichedHeaders.map(toPreVcard);\n\n    return standardContacts\n        .map((contact) =>\n            contact\n                .map((value, i) => translator[i](value))\n                // some headers can be mapped to several properties, so we need to flatten\n                .flat()\n        )\n        .map((contact) => contact.filter((preVcard) => !!preVcard));\n};\n\n/**\n * Transform csv properties and csv contacts into pre-vCard contacts,\n * re-arranging them in the process\n * @param {Object} csvData\n * @param {Array<String>} csvData.headers           Array of csv properties\n * @param {Array} csvData.contacts                  Array of csv contacts\n *\n * @return {Array<Object>}                          Array of pre-vCard contacts\n *\n * @dev  headers are arranged as headers = [[group of headers to be combined in a vCard], ...]\n *       preVcardContacts is an array of pre-vCard contacts, each of them containing pre-vCards\n *       arranged in the same way as the headers:\n *       preVcardContacts = [[[group of pre-vCard properties to be combined], ...], ...]\n */\nexport const prepare = ({ headers = [], contacts = [] }) => {\n    const preVcardContacts = parse({ headers, contacts });\n    if (!preVcardContacts.length) {\n        return [];\n    }\n\n    // detect csv properties to be combined in preVcardContacts and split header indices\n    const nonCombined = [];\n    const combined = preVcardContacts[0].reduce((acc, { combineInto, combineIndex: j }, i) => {\n        if (combineInto) {\n            if (!acc[combineInto]) {\n                acc[combineInto] = [];\n            }\n            acc[combineInto][j] = i;\n            // combined will look like e.g.\n            // { 'fn-main': [2, <empty item(s)>, 3, 5, 1], 'fn-yomi': [<empty item(s)>, 6, 7] }\n            return acc;\n        }\n        nonCombined.push(i);\n        return acc;\n    }, {});\n\n    for (const combination of Object.keys(combined)) {\n        // remove empty items from arrays in combined\n        combined[combination] = combined[combination].filter((n) => n !== null);\n    }\n\n    // Arrange pre-vCards respecting the original ordering outside header groups\n    const preparedPreVcardContacts = contacts.map(() => []);\n    for (const [i, indices] of Object.values(combined).entries()) {\n        preparedPreVcardContacts.forEach((contact) => contact.push([]));\n        indices.forEach((index) => {\n            preparedPreVcardContacts.forEach((contact, k) =>\n                contact[i].push({\n                    ...preVcardContacts[k][index]\n                })\n            );\n        });\n    }\n    for (const index of nonCombined) {\n        preparedPreVcardContacts.forEach((contact, k) => contact.push([preVcardContacts[k][index]]));\n    }\n\n    return preparedPreVcardContacts;\n};\n\n/**\n * Combine pre-vCards properties into a single vCard one\n * @param {Array} preVcards     Array of pre-vCards properties\n *\n * @return {Object}             vCard property\n */\nexport const toVcard = (preVcards) => {\n    if (!preVcards.length) {\n        return {};\n    }\n    const { pref, field, type, custom } = preVcards[0];\n    return custom\n        ? { pref, field, type, value: combine['custom'](preVcards), display: display['custom'](preVcards) }\n        : { pref, field, type, value: combine[field](preVcards), display: display[field](preVcards) };\n};\n\n/**\n * Transform pre-vCards contacts into vCard contacts\n * @param {Object} preVcardsContacts    Array of pre-vCards contacts\n *\n * @return {Object}                     Array of vCard contacts\n */\nexport const toVcardContacts = (preVcardsContacts) =>\n    preVcardsContacts\n        .map((preVcardsContact) => preVcardsContact.map(toVcard))\n        .sort((firstEl, secondEl) => {\n            return firstEl.pref <= secondEl.pref;\n        });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from 'react-components';\n\nimport SelectImportField from './SelectImportField';\nimport SelectImportType from './SelectImportType';\n\nimport { toVcard } from '../../helpers/csv';\n\nconst ImportCsvTableRows = ({ preVcards, onToggle, onChangeField, onChangeType }) => {\n    const { field, type, display } = toVcard(preVcards);\n\n    return preVcards.map(({ checked, header }, i) => (\n        <tr key={i.toString()}>\n            <td className=\"aligncenter\">\n                <Checkbox checked={checked} onChange={() => onToggle(i)} />\n            </td>\n            <td>{header}</td>\n            {i === 0 ? (\n                <>\n                    <td rowSpan={preVcards.length}>\n                        <div className=\"flex\">\n                            <SelectImportField value={field} onChangeField={onChangeField} />\n                            {type !== undefined ? (\n                                <SelectImportType field={field} value={type} onChangeType={onChangeType} />\n                            ) : null}\n                        </div>\n                    </td>\n                    <td rowSpan={preVcards.length}>{display}</td>\n                </>\n            ) : null}\n        </tr>\n    ));\n};\n\nImportCsvTableRows.propTypes = {\n    preVcards: PropTypes.array.isRequired,\n    onToggle: PropTypes.func,\n    onChangeField: PropTypes.func,\n    onChangeType: PropTypes.func\n};\n\nexport default ImportCsvTableRows;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableRowBusy } from 'react-components';\n\nimport ImportCsvTableRows from './ImportCsvTableRows';\n\nconst ImportCsvTableBody = ({ loading, contact, onToggle, onChangeField, onChangeType }) => {\n    return (\n        <tbody>\n            {loading ? (\n                <TableRowBusy colSpan={4} />\n            ) : (\n                contact &&\n                contact.map((preVcards, i) => (\n                    <ImportCsvTableRows\n                        key={i.toString()}\n                        preVcards={preVcards}\n                        onToggle={onToggle(i)}\n                        onChangeField={onChangeField(i)}\n                        onChangeType={onChangeType(i)}\n                    />\n                ))\n            )}\n        </tbody>\n    );\n};\n\nImportCsvTableBody.propTypes = {\n    loading: PropTypes.bool,\n    contact: PropTypes.array,\n    onToggle: PropTypes.func,\n    onChangeField: PropTypes.func,\n    onChangeType: PropTypes.func\n};\n\nImportCsvTableBody.defaultPropTypes = {\n    disabledPrevious: true,\n    disabledNext: true\n};\n\nexport default ImportCsvTableBody;\n","import { getTypeValues } from './types';\n\n// See './csv.js' for the definition of pre-vCard and pre-vCards contact\n\n/**\n * Modify the field (and accordingly the type, if needed) of a pre-vCard\n * @param {Object} preVcard         A pre-vCard: { field, type, ... }\n * @param {String} newField         The new field\n *\n * @return {Object}                 pre-vCard with the modified field (and type, if needed)\n */\nconst modifyPreVcardField = (preVcard, newField) => {\n    const types = getTypeValues();\n    const newType = types[newField].includes(preVcard.type)\n        ? preVcard.type\n        : types[newField].length\n        ? types[newField][0]\n        : undefined;\n\n    return { ...preVcard, field: newField, type: newType, custom: false };\n};\n\n/**\n * Modify the field (and accordingly the type) of a pre-vCard inside a pre-vCards contact\n * @param {Object} preVcardsContact     A pre-vCards contact\n * @param {Number} index                Index of the group of pre-vCards for which the field will be modified\n * @param {String} newField             The new field\n *\n * @return {Array<Array<Object>>}       the pre-vCards contact with the modified pre-vCard\n */\nexport const modifyContactField = (preVcardsContact, index, newField) => {\n    return preVcardsContact.map((preVcards, i) =>\n        i !== index ? preVcards : preVcards.map((preVcard) => modifyPreVcardField(preVcard, newField))\n    );\n};\n\n/**\n * Modify the type of a pre-vCard\n * @param {Object} preVcard         A pre-vCard: { type, ... }\n * @param {String} newType          The new type\n *\n * @return {Object}                 pre-vCard with the modified type\n */\nconst modifyPreVcardType = (preVcard, newType) => ({ ...preVcard, type: newType });\n\n/**\n * Modify the type of a pre-vCard inside a pre-vCards contact\n * @param {Object} preVcardsContact     A pre-vCards contact\n * @param {Number} index                Index of the group of pre-vCards for which the type will be modified\n * @param {String} newField             The new type\n *\n * @return {Array<Array<Object>>}       the pre-vCards contact with the modified pre-vCard\n */\nexport const modifyContactType = (preVcardsContact, index, newField) => {\n    return preVcardsContact.map((preVcards, i) =>\n        i !== index ? preVcards : preVcards.map((preVcard) => modifyPreVcardType(preVcard, newField))\n    );\n};\n\n/**\n * Toggle the checked attribute of a pre-vCard inside a pre-vCards contact\n * @param {Object} preVcardsContact     A pre-vCards contact\n * @param {Number} groupIndex           The index of the group of pre-Vcards where the pre-vCard to be modified is\n * @param {Number} index                The index of the pre-vCard within the group of pre-vCards\n *\n * @return {Array<Array<Object>>}       the pre-vCards contact with the modified pre-vCard\n */\nexport const toggleContactChecked = (preVcardsContact, [groupIndex, index]) => {\n    return preVcardsContact.map((preVcards, i) =>\n        i !== groupIndex\n            ? preVcards\n            : preVcards.map((preVcard, j) => (j !== index ? preVcard : { ...preVcard, checked: !preVcard.checked }))\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useNotifications, useLoading, Table, Alert, Block } from 'react-components';\n\nimport ImportCsvTableHeader from './ImportCsvTableHeader';\nimport ImportCsvTableBody from './ImportCsvTableBody';\n\nimport { prepare, toVcardContacts } from '../../helpers/csv';\nimport { modifyContactField, modifyContactType, toggleContactChecked } from '../../helpers/importCsv';\n\nconst ImportCsvModalContent = ({ file, onSetVcardContacts }) => {\n    const { createNotification } = useNotifications();\n\n    const [isParsingFile, withParsing] = useLoading(true);\n    const [contactIndex, setContactIndex] = useState(0);\n    const [preVcardsContacts, setPreVcardsContacts] = useState([]);\n\n    const handleClickPrevious = () => setContactIndex((index) => index - 1);\n    const handleClickNext = () => setContactIndex((index) => index + 1);\n\n    const handleToggle = (groupIndex) => (index) => {\n        if (preVcardsContacts[0][groupIndex][index].combineInto === 'fn-main') {\n            const preVcards = preVcardsContacts[0][groupIndex];\n            const firstNameIndex = preVcards.findIndex(({ header }) => header.toLowerCase() === 'first name');\n            const lastNameIndex = preVcards.findIndex(({ header }) => header.toLowerCase() === 'last name');\n            const isFirstNameChecked = firstNameIndex !== -1 && preVcards[firstNameIndex].checked;\n            const isLastNameChecked = lastNameIndex !== -1 && preVcards[lastNameIndex].checked;\n\n            if ((!isFirstNameChecked && index === lastNameIndex) || (!isLastNameChecked && index === firstNameIndex)) {\n                return createNotification({\n                    type: 'error',\n                    text: c('Error notification').t`First name and last name cannot be unchecked at the same time`\n                });\n            }\n        }\n        setPreVcardsContacts(preVcardsContacts.map((contact) => toggleContactChecked(contact, [groupIndex, index])));\n    };\n\n    const handleChangeField = (groupIndex) => (newField) =>\n        setPreVcardsContacts(preVcardsContacts.map((contact) => modifyContactField(contact, groupIndex, newField)));\n\n    const handleChangeType = (groupIndex) => (newType) =>\n        setPreVcardsContacts(preVcardsContacts.map((contact) => modifyContactType(contact, groupIndex, newType)));\n\n    useEffect(() => {\n        const parseFile = async () => {\n            const preVcardsContacts = prepare(file);\n            setPreVcardsContacts(preVcardsContacts);\n        };\n\n        withParsing(parseFile());\n    }, []);\n\n    useEffect(() => {\n        onSetVcardContacts(toVcardContacts(preVcardsContacts));\n    }, [preVcardsContacts]);\n\n    return (\n        <>\n            <Alert>\n                {c('Description of the purpose of the import CSV modal')\n                    .t`We have detected the following fields in the CSV file you uploaded. Check the ones you want to import.`}\n            </Alert>\n            <Alert>\n                {c('Description of the purpose of the import CSV modal')\n                    .t`Also, we have automatically matched CSV fields with vCard fields. You can review and change this matching manually.`}\n            </Alert>\n            <Table>\n                <ImportCsvTableHeader\n                    disabledPrevious={isParsingFile || contactIndex === 0}\n                    disabledNext={\n                        isParsingFile || preVcardsContacts.length === 0 || contactIndex + 1 === preVcardsContacts.length\n                    }\n                    onNext={handleClickNext}\n                    onPrevious={handleClickPrevious}\n                />\n                <ImportCsvTableBody\n                    loading={isParsingFile}\n                    contact={preVcardsContacts && preVcardsContacts[contactIndex]}\n                    onToggle={handleToggle}\n                    onChangeField={handleChangeField}\n                    onChangeType={handleChangeType}\n                />\n            </Table>\n            {!isParsingFile && !preVcardsContacts.length && (\n                <Block className=\"aligncenter\">{c('Info').t`No contacts to be imported`}</Block>\n            )}\n        </>\n    );\n};\n\nImportCsvModalContent.propTypes = {\n    file: PropTypes.shape({ headers: PropTypes.array, contacts: PropTypes.array }).isRequired,\n    onSetVcardContacts: PropTypes.func\n};\n\nexport default ImportCsvModalContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, Loader } from 'react-components';\n\nconst DynamicProgress = ({\n    id,\n    alt,\n    displayDuring = c('Progress bar description').t`Progress`,\n    displaySuccess = c('Progress bar description').t`Completed`,\n    displayFailed = c('Progress bar description').t`Failed`,\n    value,\n    max = 100,\n    endPostponed = false,\n    failed = false,\n    ...rest\n}) => {\n    const loading = value < max || endPostponed;\n    const icon = loading ? (\n        <Loader />\n    ) : failed ? (\n        <Icon name=\"off\" fill=\"warning\" size={100} alt={`${alt}-finished`} />\n    ) : (\n        <Icon name=\"on\" fill=\"success\" size={100} alt={`${alt}-finished`} />\n    );\n    const displayEnd = failed ? displayFailed : displaySuccess;\n\n    return (\n        <div className=\"aligncenter\">\n            {icon}\n            <progress className=\"progress-contact w100 mt1\" aria-describedby={id} value={value} max={max} {...rest} />\n            <p aria-atomic=\"true\" aria-live=\"polite\" id=\"id\">\n                {loading ? `${displayDuring}: ${value}%` : displayEnd}\n            </p>\n        </div>\n    );\n};\n\nDynamicProgress.propTypes = {\n    id: PropTypes.string,\n    alt: PropTypes.string.isRequired,\n    displayDuring: PropTypes.string,\n    displaySuccess: PropTypes.string,\n    displayFailed: PropTypes.string,\n    value: PropTypes.number.isRequired,\n    max: PropTypes.number,\n    endPostponed: PropTypes.bool,\n    failed: PropTypes.bool\n};\n\nexport default DynamicProgress;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Details, Summary, Bordered } from 'react-components';\n\nconst ErrorDetails = ({ errors = [], loading, summary = c('Info on errors').t`Click for details` }) => {\n    return (\n        !!errors.length &&\n        !loading && (\n            <Details>\n                <Summary>{summary}</Summary>\n                <Bordered>\n                    {errors\n                        .sort(({ index: index1 }, { index: index2 }) => index1 - index2)\n                        .map(({ index, message }) => (\n                            <div key={index}>{message}</div>\n                        ))}\n                </Bordered>\n            </Details>\n        )\n    );\n};\n\nErrorDetails.propTypes = {\n    errors: PropTypes.arrayOf(PropTypes.shape({ index: PropTypes.number, message: PropTypes.string })),\n    loading: PropTypes.bool,\n    summary: PropTypes.string\n};\n\nexport default ErrorDetails;\n","import { normalize } from 'proton-shared/lib/helpers/string';\n\nexport const getEmails = ({ Emails = [] }) => Emails.map((email) => normalize(email)).filter(Boolean);\n\nexport const getName = ({ Name }) => normalize(Name);\n\n/**\n * Generates a contact UID of the form 'proton-web-uuid'\n * @return {String}\n */\nexport const generateUID = () => {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n\n    return `proton-web-${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n};\n","import { encryptMessage, signMessage } from 'pmcrypto';\nimport { CONTACT_CARD_TYPE } from 'proton-shared/lib/constants';\nimport { c } from 'ttag';\n\nimport { generateUID } from './contact';\nimport { CLEAR_FIELDS, SIGNED_FIELDS } from '../constants';\nimport { toICAL } from './vcard';\nimport { sanitizeProperties, addPref, addGroup } from './properties';\n\nconst { CLEAR_TEXT, ENCRYPTED_AND_SIGNED, SIGNED } = CONTACT_CARD_TYPE;\n\n/**\n * Split properties for contact cards\n * @param {Array} properties\n * @returns {Object}\n */\nexport const splitProperties = (properties) => {\n    return properties.reduce(\n        (acc, property) => {\n            const { field } = property;\n\n            if (CLEAR_FIELDS.includes(field)) {\n                acc.toClearText.push(property);\n                return acc;\n            }\n\n            if (SIGNED_FIELDS.includes(field)) {\n                acc.toSign.push(property);\n                return acc;\n            }\n\n            acc.toEncryptAndSign.push(property);\n            return acc;\n        },\n        { toEncryptAndSign: [], toSign: [], toClearText: [] }\n    );\n};\n\n/**\n * Prepare contact cards\n * @param {Array} contacts\n * @param {Array} privateKeys\n * @param {Array} publicKeys\n * @returns {Promise}\n */\nexport const prepareCards = (properties = [], privateKeys, publicKeys) => {\n    const promises = [];\n    const { toEncryptAndSign = [], toSign = [], toClearText = [] } = splitProperties(properties);\n\n    if (toEncryptAndSign.length > 0) {\n        const data = toICAL(toEncryptAndSign).toString();\n\n        promises.push(\n            encryptMessage({ data, publicKeys, privateKeys, armor: true, detached: true }).then(\n                ({ data: Data, signature: Signature }) => ({\n                    Type: ENCRYPTED_AND_SIGNED,\n                    Data,\n                    Signature\n                })\n            )\n        );\n    }\n\n    if (toSign.length > 0) {\n        const hasUID = toSign.some((property) => property.field === 'uid');\n        const hasFN = toSign.some((property) => property.field === 'fn');\n\n        if (!hasUID) {\n            const defaultUID = generateUID();\n            toSign.push({ field: 'uid', value: defaultUID });\n        }\n\n        if (!hasFN) {\n            const defaultFN = c('Default display name vcard').t`Unknown`;\n            toSign.push({ field: 'fn', value: defaultFN });\n        }\n\n        const data = toICAL(toSign).toString();\n\n        promises.push(\n            signMessage({ data, privateKeys, armor: true, detached: true }).then(({ signature: Signature }) => ({\n                Type: SIGNED,\n                Data: data,\n                Signature\n            }))\n        );\n    }\n\n    if (toClearText.length > 0) {\n        const Data = toICAL(toClearText).toString();\n\n        promises.push({\n            Type: CLEAR_TEXT,\n            Data,\n            Signature: null\n        });\n    }\n\n    return Promise.all(promises);\n};\n\n/**\n * Clean properties\n * Parse properties to build vCards\n * @param {Array} properties\n * @param {Object} primaryKey\n * @return {Object}\n *\n * @dev  For encryption, only the primary key is needed\n */\nexport const prepareContact = async (properties, { privateKey, publicKey }) => {\n    const sanitized = sanitizeProperties(properties);\n    const withPref = addPref(sanitized);\n    const withGroup = addGroup(withPref);\n    const Cards = await prepareCards(withGroup, [privateKey], [publicKey]);\n    return { Cards };\n};\n\n/**\n * Prepare contacts data to be saved with the API\n * @param {Array} contacts\n * @param {Object} primaryKey\n * @returns {Promise} data\n */\nexport const prepareContacts = async (contacts = [], { privateKey, publicKey }) => {\n    const promises = contacts.reduce((acc, properties) => {\n        acc.push(prepareContact(properties, { privateKey, publicKey }));\n        return acc;\n    }, []);\n\n    return Promise.all(promises);\n};\n","import { CONTACT_CARD_TYPE } from 'proton-shared/lib/constants';\n\n// See './csv.js' for the definition of pre-vCard and pre-vCards contact\n\nconst { CLEAR_TEXT } = CONTACT_CARD_TYPE;\n\n/**\n * For a vCard contact, check if it contains categories\n * @param {Array<Object>} vcardContact       A vCard contact\n *\n * @return {Boolean}\n */\nexport const hasCategories = (vcardContact) => {\n    return vcardContact.some(({ field, value }) => value && field === 'categories');\n};\n\n/**\n * For a list of vCard contacts, check if any contains categories\n * @param {Array<Array<Object>>} vcardContacts       Array of vCard contacts\n *\n * @return {Boolean}\n */\nexport const haveCategories = (vcardContacts) => {\n    return vcardContacts.some((contact) => hasCategories(contact));\n};\n\n/**\n * Split encrypted contacts depending on having the CATEGORIES property.\n * @param {Array} obj.contacts      List of encrypted contacts. contact = { contact: { Cards }, index }\n *\n * @return {Object}                 { withCategories, withoutCategories }\n */\nexport const splitContacts = (contacts = []) =>\n    contacts.reduce(\n        (acc, contact) => {\n            const {\n                contact: { Cards, error }\n            } = contact;\n            if (error) {\n                return acc;\n            }\n            if (Cards.some(({ Type, Data }) => Type === CLEAR_TEXT && Data.includes('CATEGORIES'))) {\n                acc.withCategories.push(contact);\n            } else {\n                acc.withoutCategories.push(contact);\n            }\n            return acc;\n        },\n        { withCategories: [], withoutCategories: [] }\n    );\n","/**\n * Calculate progress percentage (0 <= integer <= 100) of a certain process\n * that involves carrying out several tasks, that can either fail or be successful\n * @param {Number} successful   Number of tasks completed successfully\n * @param {Number} failed       Number of tasks that failed\n * @param {Number} total        Total number of tasks\n *\n * @return {Number}\n */\nexport const percentageProgress = (successful, failed, total) => {\n    if (+total === 0) {\n        // assume the process has not started\n        return 0;\n    }\n    // in case successful + failed > total, do not allow progress > 100\n    return Math.min(Math.floor(((+successful + failed) / total) * 100), 100);\n};\n\n/**\n * Combine progresses of several processes with predefined allocation percentages\n * @param {Array} processes                 Processes to be combined. Format: { allocated, successful, failed, total}\n * @param {Number} processes.allocated      Allocated percentage for a process. E.g. 0.25\n *\n * @return {Number}                         Combined progrees\n */\nexport const combineProgress = (processes = []) => {\n    const { combinedTotal, combinedAllocations, progresses } = processes.reduce(\n        (acc, { allocated, successful, failed, total }) => {\n            acc.combinedTotal += total;\n            acc.combinedAllocations += allocated;\n            acc.progresses.push(percentageProgress(successful, failed, total));\n            return acc;\n        },\n        { combinedTotal: 0, combinedAllocations: 0, progresses: [] }\n    );\n    if (combinedAllocations !== 1 && !!processes.length) {\n        throw new Error('Allocations must add up to one');\n    }\n    if (!combinedTotal) {\n        return 0;\n    }\n    const combinedProgress = processes.reduce((acc, { allocated, total }, i) => {\n        // set progress to 100 if there are no tasks to be performed for this process,\n        // but there are tasks in other processes\n        const progress = allocated * (!total && !!combinedTotal ? 100 : progresses[i]);\n        return acc + progress;\n    }, 0);\n\n    return Math.round(combinedProgress);\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c, msgid } from 'ttag';\nimport { useApi, useLoading, Alert } from 'react-components';\n\nimport DynamicProgress from '../DynamicProgress';\nimport ErrorDetails from './ErrorDetails';\n\nimport { addContacts } from 'proton-shared/lib/api/contacts';\nimport { chunk } from 'proton-shared/lib/helpers/array';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { extractVcards, parse as parseVcard } from '../../helpers/vcard';\nimport { prepareContact } from '../../helpers/encrypt';\nimport { splitContacts } from '../../helpers/import';\nimport { combineProgress } from '../../helpers/progress';\nimport {\n    OVERWRITE,\n    CATEGORIES,\n    API_SAFE_INTERVAL,\n    ADD_CONTACTS_MAX_SIZE,\n    MAX_SIMULTANEOUS_CONTACTS_ENCRYPT\n} from '../../constants';\nimport { API_CODES } from 'proton-shared/lib/constants';\n\nconst { OVERWRITE_CONTACT } = OVERWRITE;\nconst { IGNORE, INCLUDE } = CATEGORIES;\nconst { SINGLE_SUCCESS } = API_CODES;\nconst ONE_HOUR = 1000 * 60 * 60;\n\nconst createParseErrorMessage = (index, message) =>\n    c('Info on errors importing contacts').t`Contact ${index} from your list could not be parsed. ${message}`;\nconst createEncryptErrorMessage = (index) =>\n    c('Info on errors importing contacts').t`Contact ${index} from your list could not be encrypted.`;\nconst createSubmitErrorMessage = (index, message) =>\n    c('Info on errors importing contacts').t`Contact ${index} from your list could not be imported. ${message}`;\n\nconst ImportingModalContent = ({ isVcf, file = '', vcardContacts, privateKey, onFinish }) => {\n    const api = useApi();\n\n    const [loading, withLoading] = useLoading(true);\n    const [model, setModel] = useState({\n        total: vcardContacts.length,\n        parsed: vcardContacts.map((contact, index) => ({ index, contact })),\n        encrypted: [],\n        submitted: [],\n        failedOnEncrypt: [],\n        failedOnParse: [],\n        failedOnSubmit: []\n    });\n\n    useEffect(() => {\n        // Prepare api for allowing cancellation in the middle of the import\n        const abortController = new AbortController();\n        const apiWithAbort = (config) => api({ ...config, signal: abortController.signal });\n\n        /**\n         * Extract and parse contacts from a vcf file. Return array of succesfully parsed vCard contacts\n         * together with their index in vcardContacts to keep track of original contact order\n         */\n        const parseVcfContacts = ({ signal }) => {\n            const vcards = extractVcards(file);\n            !signal.aborted && setModel({ ...model, total: vcards.length });\n\n            return signal.aborted\n                ? []\n                : vcards.reduce((acc, vcard, index) => {\n                      try {\n                          if (vcard.includes('VERSION:2.1') || vcard.includes('VERSION:3.0')) {\n                              throw new Error('vCard versions < 4.0 not supported');\n                          }\n                          const parsedVcard = parseVcard(vcard);\n                          acc.push({ index, contact: parsedVcard });\n                      } catch ({ message }) {\n                          !signal.aborted &&\n                              setModel((model) => ({\n                                  ...model,\n                                  failedOnParse: [\n                                      ...model.failedOnParse,\n                                      { index, message: createParseErrorMessage(index + 1, message) }\n                                  ]\n                              }));\n                      }\n                      return acc;\n                  }, []);\n        };\n\n        const encryptContact = async ({ contact, index }, publicKey, { signal }) => {\n            try {\n                const contactEncrypted = await prepareContact(contact, { privateKey, publicKey });\n                !signal.aborted &&\n                    setModel((model) => ({ ...model, encrypted: [...model.encrypted, contactEncrypted] }));\n                return { index, contact: contactEncrypted };\n            } catch (error) {\n                !signal.aborted &&\n                    setModel((model) => ({\n                        ...model,\n                        failedOnEncrypt: [\n                            ...model.failedOnEncrypt,\n                            { index, message: createEncryptErrorMessage(index + 1) }\n                        ]\n                    }));\n                return { index, contact: { error: true } }; // must keep for a proper counting when displaying errors\n            }\n        };\n\n        const encryptBatch = async (contacts = [], publicKey, { signal }) => {\n            if (signal.aborted) {\n                return [];\n            }\n            return Promise.all(contacts.map((contact) => encryptContact(contact, publicKey, { signal })));\n        };\n\n        /**\n         * Encrypt vCard contacts. Return succesfully encrypted contacts\n         */\n        const encryptContacts = async (contacts = [], { signal }) => {\n            const publicKey = privateKey.toPublic();\n\n            // encrypt several contacts at a time to speed up the process without burning the user's machine\n            const contactBatches = chunk(contacts, MAX_SIMULTANEOUS_CONTACTS_ENCRYPT);\n\n            const encryptedContacts = [];\n            for (const batch of contactBatches) {\n                if (signal.aborted) {\n                    return [];\n                }\n                const encryptedBatch = await encryptBatch(batch, publicKey, { signal });\n                encryptedContacts.push(...encryptedBatch);\n            }\n\n            return encryptedContacts;\n        };\n\n        /**\n         * Send a batch of contacts to the API\n         */\n        const submitBatch = async ({ contacts = [], labels }, { signal }) => {\n            if (signal.aborted || !contacts.length) {\n                return;\n            }\n\n            const indexMap = contacts.map(({ index }) => index);\n\n            const responses = (await apiWithAbort(\n                addContacts({\n                    Contacts: contacts.map(({ contact }) => contact),\n                    Overwrite: OVERWRITE_CONTACT,\n                    Labels: labels,\n                    // we need to increase the standard timeout limit for this route since it may be slow sometimes\n                    // 1 hour to wait for an API response is essentially infinite time\n                    timeout: ONE_HOUR\n                })\n            )).Responses.map(({ Response }) => Response);\n\n            if (signal.aborted) {\n                return;\n            }\n            const { submittedBatch, failedOnSubmitBatch } = responses.reduce(\n                (acc, { Code, Error, Contact: { ID } = {} }, i) => {\n                    const index = indexMap[i];\n                    if (Code === SINGLE_SUCCESS) {\n                        acc.submittedBatch.push(ID);\n                    } else {\n                        acc.failedOnSubmitBatch.push({ index, message: createSubmitErrorMessage(index + 1, Error) });\n                    }\n                    return acc;\n                },\n                { submittedBatch: [], failedOnSubmitBatch: [] }\n            );\n            setModel((model) => ({\n                ...model,\n                submitted: [...model.submitted, ...submittedBatch],\n                failedOnSubmit: [...model.failedOnSubmit, ...failedOnSubmitBatch]\n            }));\n        };\n\n        /**\n         * Send contacts to the API in batches\n         */\n        const submitContacts = async ({ contacts = [], labels }, { signal }) => {\n            if (signal.aborted) {\n                return;\n            }\n            // divide contacts and indexMap in batches\n            const contactBatches = chunk(contacts, ADD_CONTACTS_MAX_SIZE);\n            const apiCalls = contactBatches.length;\n\n            for (let i = 0; i < apiCalls; i++) {\n                // avoid overloading API in the unlikely case submitBatch is too fast\n                await Promise.all([\n                    submitBatch({ contacts: contactBatches[i], labels }, { signal }),\n                    wait(API_SAFE_INTERVAL)\n                ]);\n            }\n        };\n\n        /**\n         * All steps of the import process\n         */\n        const importContacts = async ({ signal }) => {\n            const parsedContacts = isVcf\n                ? parseVcfContacts({ signal })\n                : vcardContacts.map((contact, index) => ({ index, contact }));\n            if (isVcf) {\n                !signal.aborted && setModel((model) => ({ ...model, parsed: parsedContacts }));\n            }\n            const encryptedContacts = await encryptContacts(parsedContacts, { signal });\n            const { withCategories, withoutCategories } = splitContacts(encryptedContacts);\n            await submitContacts({ contacts: withCategories, labels: INCLUDE }, { signal });\n            await submitContacts({ contacts: withoutCategories, labels: IGNORE }, { signal });\n            !signal.aborted && (await onFinish());\n        };\n\n        withLoading(importContacts(abortController));\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    // Allocate 5% of the progress to parsing, 90% to encrypting, and 5% to sending to API\n    const combinedProgress = combineProgress([\n        {\n            allocated: 0.05,\n            successful: model.parsed.length,\n            failed: model.failedOnParse.length,\n            total: model.total\n        },\n        {\n            allocated: 0.9,\n            successful: model.encrypted.length,\n            failed: model.failedOnEncrypt.length,\n            total: model.total - model.failedOnParse.length\n        },\n        {\n            allocated: 0.05,\n            successful: model.submitted.length,\n            failed: model.failedOnSubmit.length,\n            total: model.total - model.failedOnParse.length - model.failedOnEncrypt.length\n        }\n    ]);\n\n    return (\n        <>\n            <Alert>\n                {c('Description')\n                    .t`Encrypting and importing contacts... This may take a few minutes. When the process is completed, you can close this modal.`}\n            </Alert>\n            <DynamicProgress\n                id=\"progress-import-contacts\"\n                alt=\"contact-loader\"\n                value={combinedProgress}\n                displaySuccess={c('Progress bar description').ngettext(\n                    msgid`${model.submitted.length} out of ${model.total} contact successfully imported.`,\n                    `${model.submitted.length} out of ${model.total} contacts successfully imported.`,\n                    model.submitted.length\n                )}\n                displayFailed={c('Progress bar description').t`No contacts imported`}\n                failed={!model.submitted.length}\n                endPostponed={loading}\n            />\n            <ErrorDetails\n                loading={loading}\n                errors={[...model.failedOnParse, ...model.failedOnEncrypt, ...model.failedOnSubmit]}\n                summary={c('Info on errors importing contacts')\n                    .t`Some contacts could not be imported. Click for details`}\n            />\n        </>\n    );\n};\n\nImportingModalContent.propTypes = {\n    isVcf: PropTypes.bool,\n    file: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({ headers: PropTypes.array, contacts: PropTypes.array })\n    ]).isRequired,\n    vcardContacts: PropTypes.array.isRequired,\n    privateKey: PropTypes.object.isRequired,\n    onFinish: PropTypes.func\n};\n\nexport default ImportingModalContent;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Alert, Block, Row } from 'react-components';\n\nconst ImportGroupsModalContent = () => {\n    return (\n        <>\n            <Alert>\n                {c('Description')\n                    .t`We picked up at least one group/organization from the list of contacts you are importing. Take the time to review how we should import these groups.`}\n            </Alert>\n            <Block>\n                <Row>{/* TODO */}</Row>\n            </Block>\n        </>\n    );\n};\n\n// ImportGroupsModalContent.propTypes = {};\n\nexport default ImportGroupsModalContent;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport {\n    useEventManager,\n    useNotifications,\n    useModals,\n    FormModal,\n    ConfirmModal,\n    Alert,\n    ResetButton,\n    PrimaryButton\n} from 'react-components';\n\nimport AttachingModalContent from './AttachingModalContent';\nimport ImportCsvModalContent from './ImportCsvModalContent';\nimport ImportingModalContent from './ImportingModalContent';\nimport ImportGroupsModalContent from './ImportGroupsModalContent';\n\n// temporarily disabled\n// import { haveCategories } from '../../helpers/import';\nimport { readCsv } from '../../helpers/csv';\nimport { readVcf } from '../../helpers/vcard';\nimport { BASE_SIZE } from 'proton-shared/lib/constants';\nimport { splitExtension } from 'proton-shared/lib/helpers/file';\n\nconst [ATTACHING, ATTACHED, CHECKING_CSV, IMPORTING, IMPORT_GROUPS] = [1, 2, 3, 4, 5];\nconst MAX_SIZE = 10 * BASE_SIZE ** 2; // 10 MB\n\nconst getI18nTitle = () => ({\n    [ATTACHING]: c('Title').t`Import contacts`,\n    [ATTACHED]: c('Title').t`Import contacts`,\n    [CHECKING_CSV]: c('Title').t`Import CSV file`,\n    [IMPORTING]: c('Title').t`Importing contacts`,\n    [IMPORT_GROUPS]: c(`Title`).t`Import groups`\n});\n\nconst ImportModal = ({ userKeysList, ...rest }) => {\n    const title = getI18nTitle();\n\n    const { createModal } = useModals();\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n\n    const [step, setStep] = useState(ATTACHING);\n    const [file, setFile] = useState({});\n    const [vcardContacts, setVcardContacts] = useState([]);\n    const [importFinished, setImportFinished] = useState(false);\n\n    const { content, ...modalProps } = (() => {\n        if (step <= ATTACHED) {\n            const submit = (\n                <PrimaryButton disabled={step === ATTACHING} type=\"submit\">\n                    {c('Action').t`Import`}\n                </PrimaryButton>\n            );\n\n            const handleClear = () => {\n                setFile({});\n                setStep(ATTACHING);\n            };\n\n            const handleAttach = ({ target }) => {\n                const [, extension] = splitExtension(target.files[0].name);\n                const attachedFile = ['csv', 'vcf'].includes(extension.toLowerCase()) ? target.files[0] : null;\n\n                if (target.files.length && !attachedFile) {\n                    return createNotification({\n                        type: 'error',\n                        text: c('Error notification').t`No .csv or .vcf file selected`\n                    });\n                }\n                if (attachedFile.size > MAX_SIZE) {\n                    return createModal(\n                        <ConfirmModal\n                            onConfirm={handleClear}\n                            onClose={handleClear}\n                            confirm={c('Action').t`Go back`}\n                            close={null}\n                            title={c('Title').t`File is too big!`}\n                        >\n                            <Alert type=\"error\">{c('Error info')\n                                .t`We only support importing files smaller than 10 MB. Please split your contacts into several smaller files.`}</Alert>\n                        </ConfirmModal>\n                    );\n                }\n\n                setStep(ATTACHED);\n                setFile({ attached: attachedFile, extension });\n            };\n\n            const handleSubmit = async () => {\n                try {\n                    if (file.extension === 'csv') {\n                        const read = await readCsv(file.attached);\n                        setFile({ ...file, read });\n                        setStep(CHECKING_CSV);\n                    } else {\n                        const read = await readVcf(file.attached);\n                        setFile({ ...file, read });\n                        setStep(IMPORTING);\n                    }\n                } catch {\n                    createNotification({\n                        type: 'error',\n                        text: c('Error notification').t`File selected appears to be corrupted`\n                    });\n                    setStep(ATTACHING);\n                    handleClear();\n                }\n            };\n\n            return {\n                content: (\n                    <AttachingModalContent\n                        attached={step === ATTACHED}\n                        file={file.attached}\n                        onAttach={handleAttach}\n                        onClear={handleClear}\n                    />\n                ),\n                submit,\n                onSubmit: handleSubmit\n            };\n        }\n\n        if (step === CHECKING_CSV) {\n            const submit = (\n                <PrimaryButton disabled={!vcardContacts.length} type=\"submit\">\n                    {c('Action').t`Import`}\n                </PrimaryButton>\n            );\n\n            const handleSubmit = () => setStep(IMPORTING);\n\n            return {\n                content: (\n                    <ImportCsvModalContent\n                        file={file.read}\n                        vcardContacts={vcardContacts}\n                        onSetVcardContacts={setVcardContacts}\n                    />\n                ),\n                submit,\n                onSubmit: handleSubmit\n            };\n        }\n\n        if (step === IMPORTING) {\n            const close = !importFinished && <ResetButton>{c('Action').t`Cancel`}</ResetButton>;\n            const submit = (\n                <PrimaryButton loading={!importFinished} type=\"submit\">\n                    {c('Action').t`Close`}\n                </PrimaryButton>\n            );\n\n            const handleFinish = async () => {\n                // temporarily disabled\n                // if (haveCategories(vcardContacts)) {\n                //     return setStep(IMPORT_GROUPS);\n                // }\n                await call();\n                setImportFinished(true);\n            };\n\n            return {\n                content: (\n                    <ImportingModalContent\n                        isVcf={file.extension === 'vcf'}\n                        file={file.read}\n                        vcardContacts={vcardContacts}\n                        onSetVcardContacts={setVcardContacts}\n                        privateKey={userKeysList[0].privateKey}\n                        onFinish={handleFinish}\n                    />\n                ),\n                close,\n                submit,\n                onSubmit: rest.onClose\n            };\n        }\n\n        if (step === IMPORT_GROUPS) {\n            const handleSubmit = async () => {\n                await call();\n                rest.onClose();\n            };\n            const submit = <PrimaryButton type=\"submit\">{c('Action').t`Create`}</PrimaryButton>;\n\n            return {\n                content: <ImportGroupsModalContent vcardContacts={vcardContacts} />,\n                submit,\n                onSubmit: handleSubmit\n            };\n        }\n    })();\n\n    return (\n        <FormModal title={title[step]} {...modalProps} {...rest}>\n            {content}\n        </FormModal>\n    );\n};\n\nImportModal.propTypes = {\n    userKeysList: PropTypes.array.isRequired\n};\n\nexport default ImportModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Button, img } from 'react-components';\n\nconst ContactImageField = ({ value, onChange }) => {\n    return (\n        <div>{value ? <img src={value} /> : <Button onClick={onChange}>{c('Action').t`Upload picture`}</Button>}</div>\n    );\n};\n\nContactImageField.propTypes = {\n    show: PropTypes.bool,\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default ContactImageField;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'react-components';\nimport { c } from 'ttag';\n\nimport { POST_BOX, EXTENDED, STREET, LOCALITY, REGION, POSTAL_CODE, COUNTRY } from '../constants';\n\nconst initialAddress = (address) => {\n    const addressArray = Array.isArray(address) ? address : address.split(',');\n    return Array.from({ length: 7 }).map((_, i) => addressArray[i] || '');\n};\n\nconst ContactAdrField = ({ value, onChange }) => {\n    const [address, setAddress] = useState(initialAddress(value));\n\n    const handleChange = (index) => ({ target }) => {\n        const newAddress = [...address];\n        newAddress[index] = target.value;\n        setAddress(newAddress);\n        onChange(newAddress);\n    };\n\n    return (\n        <>\n            <div className=\"mb1\">\n                <Input\n                    id=\"street\"\n                    value={address[STREET]}\n                    placeholder={c('Label').t`Street address`}\n                    onChange={handleChange(STREET)}\n                />\n            </div>\n            <div className=\"mb1\">\n                <Input\n                    id=\"locality\"\n                    value={address[LOCALITY]}\n                    placeholder={c('Label').t`City`}\n                    onChange={handleChange(LOCALITY)}\n                />\n            </div>\n            <div className=\"mb1\">\n                <label className=\"small opacity-50\" htmlFor=\"region\"></label>\n                <Input\n                    id=\"region\"\n                    value={address[REGION]}\n                    placeholder={c('Label').t`Region`}\n                    onChange={handleChange(REGION)}\n                />\n            </div>\n            <div className=\"mb1\">\n                <Input\n                    id=\"postalCode\"\n                    value={address[POSTAL_CODE]}\n                    placeholder={c('Label').t`Postal code`}\n                    onChange={handleChange(POSTAL_CODE)}\n                />\n            </div>\n            <div className=\"mb1\">\n                <Input\n                    id=\"country\"\n                    value={address[COUNTRY]}\n                    placeholder={c('Label').t`Country`}\n                    onChange={handleChange(COUNTRY)}\n                />\n            </div>\n            {address[POST_BOX] ? (\n                <div className=\"mb1\">\n                    <Input\n                        id=\"postBox\"\n                        value={address[POST_BOX]}\n                        placeholder={c('Label').t`Post office box`}\n                        onChange={handleChange(POST_BOX)}\n                    />\n                </div>\n            ) : null}\n            {address[EXTENDED] ? (\n                <div className=\"mb1\">\n                    <Input\n                        id=\"extended\"\n                        value={address[EXTENDED]}\n                        placeholder={c('Label').t`Extended address`}\n                        onChange={handleChange(EXTENDED)}\n                    />\n                </div>\n            ) : null}\n        </>\n    );\n};\n\nContactAdrField.propTypes = {\n    value: PropTypes.oneOfType(PropTypes.arrayOf(PropTypes.string), PropTypes.string),\n    onChange: PropTypes.func\n};\n\nexport default ContactAdrField;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { FormModal, Row, Label, Field, FileInput, Input, useNotifications } from 'react-components';\nimport { resizeImage } from 'proton-shared/lib/helpers/image';\nimport { CONTACT_IMG_SIZE } from '../constants';\n\nconst ContactImageModal = ({ url: initialUrl, onSubmit, onClose, ...rest }) => {\n    const [url, setUrl] = useState(initialUrl);\n    const title = c('Title').t`Edit image`;\n    const { createNotification } = useNotifications();\n    const handleChange = ({ target }) => setUrl(target.value);\n\n    const handleSubmit = () => {\n        onSubmit(url);\n        onClose();\n    };\n\n    const handleUpload = ({ target }) => {\n        const file = target.files[0];\n        const reader = new FileReader();\n\n        reader.onloadend = async () => {\n            try {\n                const base64str = await resizeImage({\n                    original: reader.result,\n                    maxWidth: CONTACT_IMG_SIZE,\n                    maxHeight: CONTACT_IMG_SIZE,\n                    finalMimeType: 'image/jpeg',\n                    encoderOptions: 1,\n                    bigResize: true\n                });\n                onSubmit(base64str);\n                onClose();\n            } catch (error) {\n                createNotification({ text: c('Error').t`Image upload failed`, type: 'error' });\n                throw error;\n            }\n        };\n\n        reader.readAsDataURL(file);\n    };\n\n    return (\n        <FormModal title={title} onSubmit={handleSubmit} submit={c('Action').t`Save`} onClose={onClose} {...rest}>\n            <Row>\n                <Label htmlFor=\"contactImageModal-input-url\">{c('Label').t`Add image URL`}</Label>\n                <Field>\n                    <Input\n                        id=\"contactImageModal-input-url\"\n                        value={url}\n                        onChange={handleChange}\n                        placeholder={c('Placeholder').t`Image URL`}\n                    />\n                </Field>\n            </Row>\n            <Row>\n                <Label htmlFor=\"contactImageModal-input-file\">{c('Label').t`Upload picture`}</Label>\n                <Field>\n                    <FileInput id=\"contactImageModal-input-file\" accept=\"image/*\" onChange={handleUpload}>{c('Action')\n                        .t`Upload picture`}</FileInput>\n                </Field>\n            </Row>\n        </FormModal>\n    );\n};\n\nContactImageModal.propTypes = {\n    url: PropTypes.string,\n    onClose: PropTypes.func,\n    onSubmit: PropTypes.func\n};\n\nContactImageModal.defaultProps = {\n    url: ''\n};\n\nexport default ContactImageModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useModals, Input, TextArea, EmailInput, DateInput, TelInput } from 'react-components';\nimport { parseISO, isValid } from 'date-fns';\nimport { getAllFieldLabels } from '../helpers/fields';\n\nimport ContactImageField from './ContactImageField';\nimport ContactAdrField from './ContactAdrField';\nimport ContactImageModal from './ContactImageModal';\n\nconst ContactFieldProperty = ({ field, value, uid, onChange, ...rest }) => {\n    const { createModal } = useModals();\n    const labels = getAllFieldLabels();\n\n    const handleChange = ({ target }) => onChange({ value: target.value, uid });\n\n    if (field === 'email') {\n        return <EmailInput value={value} placeholder={labels.email} onChange={handleChange} {...rest} />;\n    }\n\n    if (field === 'tel') {\n        return <TelInput value={value} placeholder={labels.tel} onChange={handleChange} {...rest} />;\n    }\n\n    if (field === 'adr') {\n        const handleChangeAdr = (adr) => onChange({ value: adr, uid });\n        return <ContactAdrField value={value} onChange={handleChangeAdr} />;\n    }\n\n    if (field === 'note') {\n        return <TextArea value={value} placeholder={labels.note} onChange={handleChange} {...rest} />;\n    }\n\n    if (field === 'bday' || field === 'anniversary') {\n        const date = value === '' ? new Date() : parseISO(value);\n        if (isValid(date)) {\n            const handleSelectDate = (date) => onChange({ value: date.toISOString(), uid });\n            return <DateInput placeholder={labels[field]} value={date} onChange={handleSelectDate} {...rest} />;\n        }\n    }\n\n    if (field === 'photo' || field === 'logo') {\n        const handleChangeImage = () => {\n            const handleSubmit = (value) => onChange({ uid, value });\n            createModal(<ContactImageModal url={value} onSubmit={handleSubmit} />);\n        };\n        return <ContactImageField value={value} onChange={handleChangeImage} {...rest} />;\n    }\n    return <Input value={value} placeholder={labels[field]} onChange={handleChange} {...rest} />;\n};\n\nContactFieldProperty.propTypes = {\n    field: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.object]),\n    onChange: PropTypes.func.isRequired\n};\n\nexport default ContactFieldProperty;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getAllFieldLabels } from '../helpers/fields';\n\nconst ContactLabelProperty = ({ field, type, ...rest }) => {\n    const labels = getAllFieldLabels();\n    const label = labels[type] || type || labels[field];\n\n    return (\n        <label className=\"capitalize\" {...rest}>\n            {label}\n        </label>\n    );\n};\n\nContactLabelProperty.propTypes = {\n    field: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired\n};\n\nexport default ContactLabelProperty;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, Label } from 'react-components';\n\nimport { getOtherInformationFields } from '../helpers/fields';\nimport { getAllTypes } from '../helpers/types';\n\nimport ContactLabelProperty from './ContactLabelProperty';\n\nconst ContactModalLabel = ({ field, uid, type = '', onChange }) => {\n    const types = getAllTypes();\n\n    const otherInformationFields = getOtherInformationFields();\n\n    const handleChangeType = ({ target }) => onChange({ value: target.value, key: 'type', uid });\n    const handleChangeField = ({ target }) => onChange({ value: target.value, key: 'field', uid });\n\n    if (otherInformationFields.map(({ value: f }) => f).includes(field)) {\n        return (\n            <Label className=\"pt0 mr1\">\n                <Select value={field} options={otherInformationFields} onChange={handleChangeField} />\n            </Label>\n        );\n    }\n\n    if (field === 'fn' || !types[field].map(({ value: type }) => type).includes(type)) {\n        return <ContactLabelProperty field={field} type={type} />;\n    }\n\n    return (\n        <Label className=\"pt0 mr1\">\n            <Select value={type} options={types[field]} onChange={handleChangeType} />\n        </Label>\n    );\n};\n\nContactModalLabel.propTypes = {\n    field: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default ContactModalLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { OrderableHandle, Icon, DropdownActions, useModals } from 'react-components';\nimport { c } from 'ttag';\n\nimport { clearType, getType } from '../helpers/property';\nimport ContactFieldProperty from './ContactFieldProperty';\nimport ContactModalLabel from './ContactModalLabel';\nimport ContactImageModal from './ContactImageModal';\n\nconst ContactModalRow = ({ property, onChange, onRemove, isOrderable = false }) => {\n    const { createModal } = useModals();\n    const { field, uid, value } = property;\n    const type = clearType(getType(property.type));\n    const canDelete = !['fn'].includes(field);\n    const canClear = ['photo', 'logo'].includes(field) && property.value;\n    const canEdit = ['photo', 'logo'].includes(field) && !!value;\n\n    const handleChangeImage = () => {\n        const handleSubmit = (value) => onChange({ uid, value });\n        createModal(<ContactImageModal url={property.value} onSubmit={handleSubmit} />);\n    };\n\n    const list = [\n        canEdit && {\n            text: c('Action').t`Edit`,\n            onClick: handleChangeImage\n        },\n        canClear && {\n            text: c('Action').t`Clear`,\n            onClick() {\n                onChange({ uid, value: '' });\n            }\n        },\n        canDelete && {\n            text: c('Action').t`Delete`,\n            onClick() {\n                onRemove(property.uid);\n            }\n        }\n    ].filter(Boolean);\n\n    return (\n        <div className=\"flex flex-nowrap flex-item-noshrink\">\n            {isOrderable ? (\n                <OrderableHandle key=\"icon\">\n                    <div className=\"cursor-row-resize mr0-5 flex flex-item-noshrink mt1r\">\n                        <Icon name=\"text-justify\" />\n                    </div>\n                </OrderableHandle>\n            ) : (\n                <div className=\"mr0-5 flex flex-items-center flex-item-noshrink\">\n                    <Icon name=\"text-justify nonvisible\" />\n                </div>\n            )}\n            <div className=\"flex flex-nowrap flex-items-center onmobile-flex-column w95\">\n                <span className=\"w30 flex flex-nowrap mb1\">\n                    <ContactModalLabel field={field} type={type} uid={property.uid} onChange={onChange} />\n                </span>\n                <span className=\"w50 mb1\">\n                    <div className=\"mr1\">\n                        <ContactFieldProperty\n                            field={field}\n                            value={property.value}\n                            uid={property.uid}\n                            onChange={onChange}\n                        />\n                    </div>\n                </span>\n                <span className=\"w20 mb1\">\n                    {list.length > 0 && (\n                        <div className=\"flex flex-item-noshrink flex-items-start\">\n                            <DropdownActions list={list} />\n                        </div>\n                    )}\n                </span>\n            </div>\n        </div>\n    );\n};\n\nContactModalRow.propTypes = {\n    property: PropTypes.object.isRequired,\n    onChange: PropTypes.func,\n    onAdd: PropTypes.func,\n    onRemove: PropTypes.func,\n    isOrderable: PropTypes.bool\n};\n\nexport default ContactModalRow;\n","import React from 'react';\nimport { Tooltip, Icon } from 'react-components';\nimport { c } from 'ttag';\n\nconst EncryptedIcon = ({ ...rest }) => {\n    return (\n        <Tooltip {...rest} title={c('Tooltip').t`Encrypted data with verified digital signature`}>\n            <Icon name=\"lock\" className=\"flex flex-item-centered\" />\n        </Tooltip>\n    );\n};\n\nexport default EncryptedIcon;\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, PrimaryButton, OrderableContainer, OrderableElement } from 'react-components';\nimport { move } from 'proton-shared/lib/helpers/array';\n\nimport ContactModalRow from './ContactModalRow';\nimport { OTHER_INFORMATION_FIELDS } from '../constants';\nimport EncryptedIcon from './EncryptedIcon';\n\nconst ICONS = {\n    fn: 'contact',\n    email: 'email',\n    tel: 'phone',\n    adr: 'address',\n    other: 'info'\n};\n\nconst ContactModalProperties = ({ properties: allProperties, field, onChange, onOrderChange, onAdd, onRemove }) => {\n    const TITLES = {\n        fn: c('Title').t`Display name`,\n        email: c('Title').t`Email addresses`,\n        tel: c('Title').t`Phone numbers`,\n        adr: c('Title').t`Addresses`,\n        other: c('Title').t`Other information`\n    };\n\n    const title = field ? TITLES[field] : TITLES.other;\n    const iconName = field ? ICONS[field] : ICONS.other;\n    const fields = field ? [field] : OTHER_INFORMATION_FIELDS;\n    const properties = allProperties.filter(({ field }) => fields.includes(field));\n    const canAdd = !fields.includes('fn');\n    const rows = useMemo(\n        () =>\n            properties.map((property) => (\n                <ContactModalRow\n                    key={property.uid}\n                    property={property}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    onAdd={onAdd}\n                    isOrderable={!!onOrderChange}\n                />\n            )),\n        [properties, onChange, onRemove, onAdd, !!onOrderChange]\n    );\n\n    const handleSortEnd = useCallback(\n        ({ newIndex, oldIndex }) => {\n            const orderedProperties = move(properties, oldIndex, newIndex);\n            onOrderChange(field, orderedProperties);\n        },\n        [properties, field]\n    );\n\n    return (\n        <div className=\"border-bottom mb1\">\n            <h3 className=\"mb1 flex flex-nowrap flex-items-center flex-item-noshrink\">\n                <Icon className=\"mr0-5 flex-item-noshrink\" name={iconName} />\n                <span className=\"mr0-5\">{title}</span>\n                {!['fn', 'email'].includes(field) && (\n                    <EncryptedIcon\n                        scrollContainerClass=\"pm-modalContentInner\"\n                        className=\"flex flex-item-centered-vert flex-item-noshrink\"\n                    />\n                )}\n            </h3>\n            {onOrderChange ? (\n                <OrderableContainer helperClass=\"row--orderable\" onSortEnd={handleSortEnd} useDragHandle>\n                    <div>\n                        {rows.map((row, index) => (\n                            <OrderableElement key={row.key} index={index}>\n                                {row}\n                            </OrderableElement>\n                        ))}\n                    </div>\n                </OrderableContainer>\n            ) : (\n                <div>{rows}</div>\n            )}\n            {canAdd && (\n                <div className=\"flex flex-nowrap flex-item-noshrink\">\n                    <div className=\"mr0-5 flex flex-items-center flex-item-noshrink\">\n                        <Icon name=\"text-justify nonvisible\" />\n                    </div>\n                    <div className=\"flex flex-nowrap w95\">\n                        <PrimaryButton className=\"mb1\" onClick={onAdd}>{c('Action').t`Add`}</PrimaryButton>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nContactModalProperties.propTypes = {\n    field: PropTypes.string,\n    properties: PropTypes.array,\n    onChange: PropTypes.func,\n    onOrderChange: PropTypes.func,\n    onAdd: PropTypes.func,\n    onRemove: PropTypes.func\n};\n\nexport default ContactModalProperties;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { PrimaryButton } from 'react-components';\nimport upgradeToPaidPlanSvg from 'design-system/assets/img/pm-images/upgrade.svg';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\n\nconst UpsellFree = () => {\n    const title = c('Title').t`Upgrade to a paid plan`;\n\n    return (\n        <div className=\"rounded bg-global-altgrey color-white p1 mb1 flex\">\n            <div className=\"flex-autogrid onmobile-flex-column w100\">\n                <div className=\"flex-autogrid-item flex flex-column flex-spacebetween\">\n                    <h4>{title}</h4>\n                    <div className=\"mb2\">{c('Info')\n                        .t`Unlock access to encrypted contact details such as phone numbers and addresses with ProtonMail Plus.`}</div>\n                    <div>\n                        <PrimaryButton onClick={() => redirectTo('/settings/subscription')}>\n                            {c('Action').t`Upgrade ProtonMail`}\n                        </PrimaryButton>\n                    </div>\n                </div>\n                <div className=\"flex-autogrid-item flex flex-column flex-items-end\">\n                    <img className=\"h100\" src={upgradeToPaidPlanSvg} alt={title} style={{ maxHeight: '200px' }} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UpsellFree;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    FormModal,\n    Alert,\n    useUser,\n    useApi,\n    useUserKeys,\n    useEventManager,\n    useNotifications,\n    useLoading\n} from 'react-components';\nimport { c } from 'ttag';\nimport { addContacts } from 'proton-shared/lib/api/contacts';\n\nimport ContactModalProperties from './ContactModalProperties';\nimport { randomIntFromInterval } from 'proton-shared/lib/helpers/function';\nimport { generateUID } from 'react-components/helpers/component';\nimport { prepareContacts } from '../helpers/encrypt';\nimport { hasCategories } from '../helpers/import';\nimport { getEditableFields, getOtherInformationFields } from '../helpers/fields';\nimport { OVERWRITE, CATEGORIES } from '../constants';\nimport { API_CODES } from 'proton-shared/lib/constants';\n\nimport UpsellFree from './UpsellFree';\n\nconst DEFAULT_MODEL = [{ field: 'fn', value: '' }, { field: 'email', value: '' }];\nconst { OVERWRITE_CONTACT, THROW_ERROR_IF_CONFLICT } = OVERWRITE;\nconst { INCLUDE, IGNORE } = CATEGORIES;\nconst { SINGLE_SUCCESS } = API_CODES;\n\nconst editableFields = getEditableFields().map(({ value }) => value);\nconst otherInformationFields = getOtherInformationFields().map(({ value }) => value);\nconst UID_PREFIX = 'contact-property';\n\nconst formatModel = (properties = []) => {\n    if (!properties.length) {\n        return DEFAULT_MODEL.map((property) => ({ ...property, uid: generateUID(UID_PREFIX) })); // Add UID to localize the property easily;\n    }\n    return properties\n        .filter(({ field }) => editableFields.includes(field)) // Only includes editable properties that we decided\n        .map((property) => ({ ...property, uid: generateUID(UID_PREFIX) })); // Add UID to localize the property easily\n};\n\nconst ContactModal = ({ contactID, properties: initialProperties = [], onAdd, history, ...rest }) => {\n    const api = useApi();\n    const { createNotification } = useNotifications();\n    const [loading, withLoading] = useLoading();\n    const [user] = useUser();\n    const { call } = useEventManager();\n    const [userKeysList, loadingUserKeys] = useUserKeys(user);\n    const [properties, setProperties] = useState(formatModel(initialProperties));\n    const title = contactID ? c('Title').t`Edit contact details` : c('Title').t`Add new contact`;\n\n    const handleRemove = (propertyUID) => {\n        setProperties(properties.filter(({ uid }) => uid !== propertyUID));\n    };\n\n    const handleAdd = (field) => () => {\n        if (!field) {\n            // Get random field from other info\n            const index = randomIntFromInterval(0, otherInformationFields.length - 1);\n            return setProperties([\n                ...properties,\n                { field: otherInformationFields[index], value: '', uid: generateUID(UID_PREFIX) }\n            ]);\n        }\n        setProperties([...properties, { field, value: '', uid: generateUID(UID_PREFIX) }]);\n    };\n\n    const handleSubmit = async () => {\n        const notEditableProperties = initialProperties.filter(({ field }) => !editableFields.includes(field));\n        const Contacts = await prepareContacts([properties.concat(notEditableProperties)], userKeysList[0]);\n        const labels = hasCategories(notEditableProperties) ? INCLUDE : IGNORE;\n        const {\n            Responses: [{ Response: { Code, Contact: { ID } = {} } = {} }]\n        } = await api(\n            addContacts({\n                Contacts,\n                Overwrite: contactID ? OVERWRITE_CONTACT : THROW_ERROR_IF_CONFLICT,\n                Labels: labels\n            })\n        );\n        if (Code !== SINGLE_SUCCESS) {\n            rest.onClose();\n            return createNotification({ text: c('Error').t`Contact could not be saved`, type: 'error' });\n        }\n        await call();\n        if (!contactID) {\n            onAdd();\n            history.push(`/contacts/${ID}`);\n        }\n        rest.onClose();\n        createNotification({ text: c('Success').t`Contact saved` });\n    };\n\n    const handleChange = ({ uid: propertyUID, value, key = 'value' }) => {\n        const newProperties = properties.map((property) => {\n            if (property.uid === propertyUID) {\n                return {\n                    ...property,\n                    [key]: value\n                };\n            }\n            return property;\n        });\n        setProperties(newProperties);\n    };\n\n    const handleOrderChange = useCallback(\n        (field, orderedProperties) => {\n            const newProperties = properties.filter((property) => property.field !== field);\n            newProperties.unshift(...orderedProperties);\n\n            setProperties(newProperties);\n        },\n        [properties]\n    );\n\n    return (\n        <FormModal\n            loading={loading || loadingUserKeys}\n            onSubmit={() => withLoading(handleSubmit())}\n            title={title}\n            submit={c('Action').t`Save`}\n            {...rest}\n        >\n            <Alert>{c('Info')\n                .t`Email address, phone number and address at the top of their respective list are automatically set as the default information and will be displayed in the contact information's summary section.`}</Alert>\n            <ContactModalProperties\n                properties={properties}\n                field=\"fn\"\n                onChange={handleChange}\n                onRemove={handleRemove}\n            />\n            <ContactModalProperties\n                properties={properties}\n                field=\"email\"\n                onChange={handleChange}\n                onRemove={handleRemove}\n                onOrderChange={handleOrderChange}\n                onAdd={handleAdd('email')}\n            />\n            {user.hasPaidMail ? (\n                <>\n                    <ContactModalProperties\n                        properties={properties}\n                        field=\"tel\"\n                        onChange={handleChange}\n                        onRemove={handleRemove}\n                        onOrderChange={handleOrderChange}\n                        onAdd={handleAdd('tel')}\n                    />\n                    <ContactModalProperties\n                        properties={properties}\n                        field=\"adr\"\n                        onChange={handleChange}\n                        onRemove={handleRemove}\n                        onOrderChange={handleOrderChange}\n                        onAdd={handleAdd('adr')}\n                    />\n                    <ContactModalProperties\n                        properties={properties}\n                        onChange={handleChange}\n                        onRemove={handleRemove}\n                        onAdd={handleAdd()}\n                    />\n                </>\n            ) : (\n                <UpsellFree />\n            )}\n        </FormModal>\n    );\n};\n\nContactModal.propTypes = {\n    contactID: PropTypes.string,\n    properties: PropTypes.array,\n    onAdd: PropTypes.func,\n    history: PropTypes.object\n};\n\nexport default ContactModal;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { randomIntFromInterval } from 'proton-shared/lib/helpers/function';\nimport { diff, orderBy } from 'proton-shared/lib/helpers/array';\nimport { LABEL_COLORS } from 'proton-shared/lib/constants';\nimport { createContactGroup, updateLabel } from 'proton-shared/lib/api/labels';\nimport { labelContactEmails, unLabelContactEmails } from 'proton-shared/lib/api/contacts';\nimport {\n    FormModal,\n    useApi,\n    Row,\n    Label,\n    Field,\n    Input,\n    Select,\n    ColorSelector,\n    SmallButton,\n    PrimaryButton,\n    TableHeader,\n    TableBody,\n    TableRow,\n    Table,\n    useContactGroups,\n    useContactEmails,\n    useNotifications,\n    useEventManager\n} from 'react-components';\n\nconst ContactGroupTable = ({ contactEmails, onDelete }) => {\n    const header = [c('Table header').t`Name`, c('Table header').t`Address`, c('Table header').t`Action`];\n    return (\n        <Table className=\"noborder\">\n            <TableHeader cells={header} />\n            <TableBody>\n                {contactEmails.map(({ ID, Name, Email }) => {\n                    const cells = [\n                        <div className=\"ellipsis mw100\" key={ID} title={Name}>\n                            {Name}\n                        </div>,\n                        <div className=\"ellipsis mw100\" key={ID} title={Email}>\n                            {Email}\n                        </div>,\n                        <SmallButton key={ID} onClick={onDelete(ID)}>{c('Action').t`Delete`}</SmallButton>\n                    ];\n                    return <TableRow key={ID} cells={cells} />;\n                })}\n            </TableBody>\n        </Table>\n    );\n};\n\nContactGroupTable.propTypes = {\n    contactEmails: PropTypes.array,\n    onDelete: PropTypes.func\n};\n\nconst mapIDs = (contactEmails) => contactEmails.map(({ ID }) => ID);\n\nconst ContactGroupModal = ({ contactGroupID, ...rest }) => {\n    const [loading, setLoading] = useState(false);\n    const { call } = useEventManager();\n    const api = useApi();\n    const { createNotification } = useNotifications();\n    const [contactGroups] = useContactGroups();\n    const [contactEmails] = useContactEmails();\n\n    const contactGroup = contactGroupID && contactGroups.find(({ ID }) => ID === contactGroupID);\n    const existingContactEmails =\n        contactGroupID && contactEmails.filter(({ LabelIDs = [] }) => LabelIDs.includes(contactGroupID));\n    const title = contactGroupID ? c('Title').t`Edit contact group` : c('Title').t`Create new group`;\n\n    const [model, setModel] = useState({\n        name: contactGroupID ? contactGroup.Name : '',\n        color: contactGroupID ? contactGroup.Color : LABEL_COLORS[randomIntFromInterval(0, LABEL_COLORS.length - 1)],\n        contactEmails: contactGroupID ? existingContactEmails : []\n    });\n    const contactEmailIDs = model.contactEmails.map(({ ID }) => ID);\n    const options = orderBy(contactEmails, 'Email')\n        .filter(({ ID }) => !contactEmailIDs.includes(ID))\n        .map(({ ID, Email, Name }) => ({ text: Email === Name ? `<${Email}>` : `${Name} <${Email}>`, value: ID }));\n\n    const handleChangeName = ({ target }) => setModel({ ...model, name: target.value });\n    const handleChangeColor = (color) => () => setModel({ ...model, color });\n    const handleChangeEmail = ({ target }) => setModel({ ...model, contactEmailID: target.value });\n\n    const handleAddEmail = () => {\n        const contactEmail = contactEmails.find(({ ID }) => ID === model.contactEmailID);\n        const alreadyExist = model.contactEmails.find(({ ID }) => ID === model.contactEmailID);\n\n        if (contactEmail && !alreadyExist) {\n            const copy = [...model.contactEmails];\n            copy.push(contactEmail);\n            setModel({ ...model, contactEmails: copy });\n        }\n    };\n\n    const handleDeleteEmail = (contactEmailID) => () => {\n        const index = model.contactEmails.findIndex(({ ID }) => ID === contactEmailID);\n\n        if (index > -1) {\n            const copy = [...model.contactEmails];\n            copy.splice(index, 1);\n            setModel({ ...model, contactEmails: copy });\n        }\n    };\n\n    const handleSubmit = async () => {\n        try {\n            setLoading(true);\n            const contactGroupParams = { Name: model.name, Color: model.color };\n            const { Label = {} } = await api(\n                contactGroupID\n                    ? updateLabel(contactGroupID, contactGroupParams)\n                    : createContactGroup(contactGroupParams)\n            );\n            const { ID } = Label;\n            const toLabel = mapIDs(model.contactEmails);\n            const toUnlabel = contactGroupID ? diff(mapIDs(existingContactEmails), toLabel) : [];\n            await Promise.all(\n                [\n                    toLabel.length && api(labelContactEmails({ LabelID: ID, ContactEmailIDs: toLabel })),\n                    toUnlabel.length && api(unLabelContactEmails({ LabelID: ID, ContactEmailIDs: toUnlabel }))\n                ].filter(Boolean)\n            );\n            await call();\n            rest.onClose();\n            createNotification({\n                text: contactGroupID\n                    ? c('Notification').t`Contact group updated`\n                    : c('Notification').t`Contact group created`\n            });\n        } catch (error) {\n            setLoading(false);\n            throw error;\n        }\n    };\n\n    useEffect(() => {\n        if (options.length) {\n            setModel({\n                ...model,\n                contactEmailID: options[0].value\n            });\n        }\n    }, [model.contactEmails.length]);\n\n    return (\n        <FormModal onSubmit={handleSubmit} loading={loading} submit={c('Action').t`Save`} title={title} {...rest}>\n            <Row>\n                <Label htmlFor=\"contactGroupName\">{c('Label for contact group name').t`Name`}</Label>\n                <Field>\n                    <Input\n                        id=\"contactGroupName\"\n                        placeholder={c('Placeholder for contact group name').t`Name`}\n                        value={model.name}\n                        onChange={handleChangeName}\n                    />\n                </Field>\n            </Row>\n            <Row>\n                <Label htmlFor=\"contactGroupColor\">{c('Label for contact group color').t`Color`}</Label>\n                <Field>\n                    <ColorSelector selected={model.color} onChange={handleChangeColor} />\n                </Field>\n            </Row>\n            {options.length ? (\n                <Row>\n                    <Label htmlFor=\"contactGroupEmail\">{c('Label').t`Add email address`}</Label>\n                    <Field>\n                        <Select\n                            id=\"contactGroupEmail\"\n                            value={model.contactEmailID}\n                            options={options}\n                            onChange={handleChangeEmail}\n                        />\n                        {model.contactEmails.length ? null : (\n                            <div className=\"mt1\">{c('Info').t`No contacts added yet`}</div>\n                        )}\n                    </Field>\n                    <div className=\"ml1\">\n                        <PrimaryButton onClick={handleAddEmail}>{c('Action').t`Add`}</PrimaryButton>\n                    </div>\n                </Row>\n            ) : null}\n            {model.contactEmails.length ? (\n                <ContactGroupTable contactEmails={model.contactEmails} onDelete={handleDeleteEmail} />\n            ) : null}\n        </FormModal>\n    );\n};\n\nContactGroupModal.propTypes = {\n    contactGroupID: PropTypes.string\n};\n\nexport default ContactGroupModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nconst ItemCheckbox = ({ children, onClick, ...rest }) => {\n    return (\n        <label onClick={onClick}>\n            <input type=\"checkbox\" className=\"item-checkbox sr-only\" {...rest} />\n            <span className=\"item-icon flex-item-noshrink rounded50 bg-white inline-flex\">\n                <span className=\"mauto item-abbr\">{children}</span>\n                <span className=\"item-icon-fakecheck mauto\">\n                    <Icon name=\"on\" className=\"item-icon-fakecheck-icon\" />\n                </span>\n            </span>\n        </label>\n    );\n};\n\nItemCheckbox.propTypes = {\n    onClick: PropTypes.func,\n    children: PropTypes.node\n};\n\nexport default ItemCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Tooltip } from 'react-components';\n\nconst ContactGroupIcon = ({ name, color, ...rest }) => {\n    return (\n        <Tooltip title={name} {...rest}>\n            <Icon name=\"contacts-groups\" color={color} />\n        </Tooltip>\n    );\n};\n\nContactGroupIcon.propTypes = {\n    name: PropTypes.string,\n    color: PropTypes.string\n};\n\nexport default ContactGroupIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { addPlus, getInitial } from 'proton-shared/lib/helpers/string';\n\nimport ItemCheckbox from './ItemCheckbox';\nimport ContactGroupIcon from './ContactGroupIcon';\n\nconst ContactRow = ({ style, contactID, hasPaidMail, contactGroupsMap, contact, onClick, onCheck }) => {\n    const { ID, Name, LabelIDs = [], emails = [], isChecked } = contact;\n\n    return (\n        <div\n            style={style}\n            key={ID}\n            onClick={() => onClick(ID)}\n            className={classnames([\n                'item-container item-contact cursor-pointer bg-global-white',\n                contactID === ID && 'item-is-selected'\n            ])}\n        >\n            <div className=\"flex flex-nowrap\">\n                <ItemCheckbox\n                    checked={isChecked}\n                    onChange={onCheck}\n                    onClick={(event) => event.stopPropagation()}\n                    data-contact-id={ID}\n                >\n                    {getInitial(Name)}\n                </ItemCheckbox>\n                <div className=\"flex-item-fluid pl1 flex flex-column flex-spacebetween conversation-titlesender\">\n                    <div className=\"flex\">\n                        <div className={classnames(['flex flex-item-fluid w0', LabelIDs.length && 'pr1'])}>\n                            <span className=\"bold inbl mw100 ellipsis\">{Name}</span>\n                        </div>\n                        {hasPaidMail && LabelIDs.length ? (\n                            <div>\n                                {LabelIDs.map((labelID) => {\n                                    if (!contactGroupsMap[labelID]) {\n                                        return null;\n                                    }\n                                    const { Color, Name } = contactGroupsMap[labelID];\n                                    return (\n                                        <ContactGroupIcon\n                                            scrollContainerClass=\"contacts-list\"\n                                            key={labelID}\n                                            name={Name}\n                                            color={Color}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                    <div className=\"mw100 ellipsis\" title={emails.join(', ')}>\n                        {addPlus(emails)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nContactRow.propTypes = {\n    onClick: PropTypes.func,\n    onCheck: PropTypes.func,\n    style: PropTypes.object,\n    contactID: PropTypes.string,\n    hasPaidMail: PropTypes.bool,\n    contactGroupsMap: PropTypes.object,\n    contact: PropTypes.shape({\n        ID: PropTypes.string,\n        Name: PropTypes.string,\n        LabelIDs: PropTypes.array,\n        emails: PropTypes.array,\n        isChecked: PropTypes.bool\n    })\n};\n\nexport default ContactRow;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useModals, IllustrationPlaceholder, LinkButton } from 'react-components';\nimport { withRouter } from 'react-router';\nimport List from 'react-virtualized/dist/commonjs/List';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\n\nimport noContactsImg from 'design-system/assets/img/shared/empty-address-book.svg';\nimport noResultsImg from 'design-system/assets/img/shared/no-results-found.svg';\n\nimport ImportModal from './import/ImportModal';\nimport ContactModal from './ContactModal';\nimport ContactGroupModal from './ContactGroupModal';\nimport ContactRow from './ContactRow';\n\nconst ContactsList = ({\n    totalContacts,\n    totalContactsInGroup,\n    contacts,\n    contactGroupsMap,\n    onCheck,\n    onClearSearch,\n    onClearSelection,\n    user,\n    userKeysList,\n    loadingUserKeys,\n    history,\n    contactID,\n    contactGroupID,\n    location,\n    isDesktop = true\n}) => {\n    const listRef = useRef(null);\n    const containerRef = useRef(null);\n    const [lastChecked, setLastChecked] = useState(); // Store ID of the last contact ID checked\n    const { createModal } = useModals();\n\n    const handleImport = () => {\n        createModal(<ImportModal userKeysList={userKeysList} />);\n    };\n    const handleAddContact = () => {\n        createModal(<ContactModal history={history} onAdd={onClearSearch} />);\n    };\n    const handleEditGroup = (contactGroupID) => {\n        createModal(<ContactGroupModal contactGroupID={contactGroupID} />);\n    };\n\n    const handleCheck = (event) => {\n        const { target } = event;\n        const shiftKey = event.nativeEvent.shiftKey;\n\n        const contactID = target.getAttribute('data-contact-id');\n        const contactIDs = [contactID];\n\n        if (lastChecked && shiftKey) {\n            const start = contacts.findIndex(({ ID }) => ID === contactID);\n            const end = contacts.findIndex(({ ID }) => ID === lastChecked);\n            contactIDs.push(...contacts.slice(Math.min(start, end), Math.max(start, end) + 1).map(({ ID }) => ID));\n        }\n\n        setLastChecked(contactID);\n        onCheck(contactIDs, target.checked);\n    };\n\n    const handleClick = (ID) => {\n        onClearSelection();\n        history.push({ ...location, pathname: `/contacts/${ID}` });\n    };\n\n    useEffect(() => {\n        const timeoutID = setTimeout(() => {\n            if (contactID && totalContacts) {\n                const index = contacts.findIndex(({ ID }) => contactID === ID);\n                listRef.current.scrollToRow(index);\n            }\n        }, 200);\n\n        return () => {\n            clearTimeout(timeoutID);\n        };\n    }, [contactID]);\n\n    if (!totalContacts) {\n        const addContact = (\n            <button key=\"add\" type=\"button\" className=\"color-primary ml0-5 mr0-5 underline\" onClick={handleAddContact}>\n                {c('Action').t`Add a contact`}\n            </button>\n        );\n        const importContact = (\n            <button\n                key=\"import\"\n                type=\"button\"\n                className=\"color-primary ml0-5 mr0-5 underline\"\n                onClick={handleImport}\n                disabled={loadingUserKeys}\n            >\n                {c('Action').t`Import contact`}\n            </button>\n        );\n\n        return (\n            <div className=\"p2 flex w100\">\n                <IllustrationPlaceholder\n                    title={c('Info message').t`Your address book is empty`}\n                    url={noContactsImg}\n                    className=\"mtauto mbauto\"\n                >\n                    <div className=\"flex flex-items-center\">\n                        {c('Actions message').jt`You can either ${addContact} or ${importContact} from a file.`}\n                    </div>\n                </IllustrationPlaceholder>\n            </div>\n        );\n    }\n\n    if (!contacts.length) {\n        if (contactGroupID && !totalContactsInGroup) {\n            const editGroup = (\n                <button\n                    key=\"add\"\n                    type=\"button\"\n                    className=\"color-primary ml0-5 mr0-5 underline\"\n                    onClick={() => handleEditGroup(contactGroupID)}\n                >\n                    {c('Action').t`Edit your group`}\n                </button>\n            );\n\n            return (\n                <div className=\"p2 aligncenter w100\">\n                    <IllustrationPlaceholder\n                        title={c('Info message').t`Your contact group is empty`}\n                        url={noContactsImg}\n                    >\n                        <div className=\"flex flex-items-center\">\n                            {c('Actions message').jt`You can ${editGroup} to add a contact.`}\n                        </div>\n                    </IllustrationPlaceholder>\n                </div>\n            );\n        }\n\n        const clearSearch = (\n            <LinkButton key=\"add\" onClick={onClearSearch} className=\"ml0-25 bold\">\n                {c('Action').t`Clear it`}\n            </LinkButton>\n        );\n\n        return (\n            <div className=\"p2 aligncenter w100\">\n                <IllustrationPlaceholder title={c('Info message').t`No results found`} url={noResultsImg}>\n                    <div className=\"flex flex-items-center\">\n                        {c('Actions message').jt`You can either update your search query or ${clearSearch}.`}\n                    </div>\n                </IllustrationPlaceholder>\n            </div>\n        );\n    }\n\n    return (\n        <div ref={containerRef} className={`items-column-list${isDesktop ? '' : '--mobile'}`}>\n            <AutoSizer>\n                {({ height, width }) => (\n                    <List\n                        className=\"contacts-list no-outline\"\n                        ref={listRef}\n                        rowRenderer={({ index, style, key }) => (\n                            <ContactRow\n                                style={style}\n                                key={key}\n                                contactID={contactID}\n                                hasPaidMail={!!user.hasPaidMail}\n                                contactGroupsMap={contactGroupsMap}\n                                contact={contacts[index]}\n                                onClick={handleClick}\n                                onCheck={handleCheck}\n                            />\n                        )}\n                        rowCount={contacts.length}\n                        height={height}\n                        width={width}\n                        rowHeight={70}\n                    />\n                )}\n            </AutoSizer>\n        </div>\n    );\n};\n\nContactsList.propTypes = {\n    totalContacts: PropTypes.number,\n    contacts: PropTypes.array,\n    contactGroupsMap: PropTypes.object,\n    onCheck: PropTypes.func,\n    onClearSearch: PropTypes.func,\n    onClearSelection: PropTypes.func,\n    user: PropTypes.object,\n    userKeysList: PropTypes.array,\n    loadingUserKeys: PropTypes.bool.isRequired,\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    contactID: PropTypes.string,\n    contactGroupID: PropTypes.string,\n    isDesktop: PropTypes.bool\n};\n\nexport default withRouter(ContactsList);\n","import { useContext, useCallback } from 'react';\nimport { getContact } from 'proton-shared/lib/api/contacts';\nimport { useCachedModelResult, useApi } from 'react-components';\n\nimport ContactProviderContext from '../containers/ContactProviderContext';\n\nconst useContact = (contactID) => {\n    const cache = useContext(ContactProviderContext);\n    const api = useApi();\n\n    const miss = useCallback(() => {\n        return api(getContact(contactID)).then(({ Contact }) => Contact);\n    }, []);\n\n    return useCachedModelResult(cache, contactID, miss);\n};\n\nexport default useContact;\n","import { getMessage, decryptMessage, getSignature, verifyMessage, createCleartextMessage } from 'pmcrypto';\nimport { merge, parse } from './vcard';\nimport { sanitizeProperties } from './properties';\n\nimport { CONTACT_CARD_TYPE } from 'proton-shared/lib/constants';\nimport { SIGNATURE_NOT_VERIFIED, FAIL_TO_READ, FAIL_TO_DECRYPT } from '../constants';\n\nconst { CLEAR_TEXT, ENCRYPTED_AND_SIGNED, ENCRYPTED, SIGNED } = CONTACT_CARD_TYPE;\n\nconst decrypt = async ({ Data }, { privateKeys }) => {\n    let message;\n    try {\n        message = await getMessage(Data);\n    } catch (error) {\n        return { error: FAIL_TO_READ };\n    }\n\n    try {\n        const data = await decryptMessage({ message, privateKeys, armor: true });\n        return { data };\n    } catch (error) {\n        return { error: FAIL_TO_DECRYPT };\n    }\n};\n\nconst signed = async ({ Data, Signature }, { publicKeys }) => {\n    try {\n        const signature = await getSignature(Signature);\n        const { verified } = await verifyMessage({\n            message: createCleartextMessage(Data),\n            publicKeys,\n            signature\n        });\n\n        if (verified !== 1) {\n            return { data: Data, error: SIGNATURE_NOT_VERIFIED };\n        }\n        return { data: Data };\n    } catch (error) {\n        return { error: FAIL_TO_READ };\n    }\n};\n\nconst decryptSigned = async ({ Data, Signature }, { publicKeys, privateKeys }) => {\n    try {\n        const [message, signature] = await Promise.all([getMessage(Data), getSignature(Signature)]);\n        const { data, verified } = await decryptMessage({\n            message,\n            privateKeys,\n            publicKeys,\n            armor: true,\n            signature\n        });\n\n        if (verified !== 1) {\n            return { data, error: SIGNATURE_NOT_VERIFIED };\n        }\n\n        return { data };\n    } catch (error) {\n        return { error: FAIL_TO_READ };\n    }\n};\n\nconst clearText = ({ Data }) => ({ data: Data });\n\nconst ACTIONS = {\n    [ENCRYPTED_AND_SIGNED]: decryptSigned,\n    [SIGNED]: signed,\n    [ENCRYPTED]: decrypt,\n    [CLEAR_TEXT]: clearText\n};\n\nexport const prepareContact = async (contact, { publicKeys, privateKeys }) => {\n    const { Cards } = contact;\n\n    const decryptedCards = await Promise.all(\n        Cards.map(async (card) => {\n            if (!ACTIONS[card.Type]) {\n                return { error: FAIL_TO_READ };\n            }\n            return ACTIONS[card.Type](card, { publicKeys, privateKeys });\n        })\n    );\n    // remove UIDs put by mistake in encrypted cards\n    const sanitizedCards = decryptedCards.map((card, i) => {\n        if (![ENCRYPTED_AND_SIGNED, ENCRYPTED].includes(Cards[i].Type) || !card.data) {\n            return card;\n        }\n        return { ...card, data: card.data.replace(/\\nUID:.*\\n/i, '\\n') };\n    });\n\n    const { vcards, errors } = sanitizedCards.reduce(\n        (acc, { data, error }) => {\n            if (error) {\n                acc.errors.push(error);\n            }\n            if (data) {\n                acc.vcards.push(data);\n            }\n            return acc;\n        },\n        { vcards: [], errors: [] }\n    );\n\n    return { properties: sanitizeProperties(merge(vcards.map(parse))), errors };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, Href } from 'react-components';\nimport { SIGNATURE_NOT_VERIFIED, FAIL_TO_READ, FAIL_TO_DECRYPT } from '../constants';\n\nconst ContactViewErrors = ({ errors }) => {\n    if (errors.includes(SIGNATURE_NOT_VERIFIED)) {\n        return (\n            <div className=\"bg-global-attention p1\">\n                <Icon name=\"attention\" className=\"mr1\" />\n                <span className=\"mr1\">{c('Warning')\n                    .t`Warning: the verification of this contact's signature failed.`}</span>\n                <Href url=\"https://protonmail.com/support/knowledge-base/encrypted-contacts/\">{c('Link')\n                    .t`Learn more`}</Href>\n            </div>\n        );\n    }\n\n    if (errors.includes(FAIL_TO_READ)) {\n        return (\n            <div className=\"bg-global-warning p1\">\n                <Icon name=\"attention\" className=\"mr1\" />\n                <span className=\"mr1\">{c('Warning')\n                    .t`Error: the encrypted content failed decryption and cannot be read.`}</span>\n                <Href url=\"https://protonmail.com/support/knowledge-base/encrypted-contacts/\">{c('Link')\n                    .t`Learn more`}</Href>\n            </div>\n        );\n    }\n\n    if (errors.includes(FAIL_TO_DECRYPT)) {\n        return (\n            <div className=\"bg-global-warning p1\">\n                <Icon name=\"attention\" className=\"mr1\" />\n                <span className=\"mr1\">{c('Warning')\n                    .t`Error: the encrypted content failed decryption and cannot be read.`}</span>\n                <Href url=\"https://protonmail.com/support/knowledge-base/encrypted-contacts/\">{c('Link')\n                    .t`Learn more`}</Href>\n            </div>\n        );\n    }\n\n    return null;\n};\n\nContactViewErrors.propTypes = {\n    errors: PropTypes.array\n};\n\nContactViewErrors.defaultProps = {\n    errors: []\n};\n\nexport default ContactViewErrors;\n","import React, { useState, useEffect } from 'react';\nimport { c } from 'ttag';\nimport PropTypes from 'prop-types';\nimport { useMailSettings, useLoading, Loader, Button } from 'react-components';\nimport { getInitial } from 'proton-shared/lib/helpers/string';\nimport { isURL } from 'proton-shared/lib/helpers/validators';\nimport { resizeImage, toImage } from 'proton-shared/lib/helpers/image';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { SHOW_IMAGES } from 'proton-shared/lib/constants';\nimport { CONTACT_IMG_SIZE } from '../constants';\n\nconst ContactImageSummary = ({ photo, name }) => {\n    const [showAnyways, setShowAnyways] = useState(!isURL(photo));\n    const [image, setImage] = useState({ src: photo });\n    const [{ ShowImages }, loadingMailSettings] = useMailSettings();\n    const [loadingResize, withLoadingResize] = useLoading(true);\n    const loading = loadingMailSettings || loadingResize;\n    const showPhoto = ShowImages & SHOW_IMAGES.REMOTE || showAnyways;\n\n    useEffect(() => {\n        if (!photo || !showPhoto) {\n            return;\n        }\n        const resize = async () => {\n            const { src, width, height } = await toImage(photo);\n\n            if (width <= CONTACT_IMG_SIZE && height <= CONTACT_IMG_SIZE) {\n                return setImage({ src, width, height, isSmall: true });\n            }\n            const resized = await resizeImage({\n                original: photo,\n                maxWidth: CONTACT_IMG_SIZE,\n                maxHeight: CONTACT_IMG_SIZE,\n                bigResize: true\n            });\n            setImage({ src: resized });\n        };\n        withLoadingResize(resize().catch(noop));\n    }, [photo, showPhoto]);\n\n    if (!photo) {\n        return (\n            <div className=\"rounded50 bordered bg-white ratio-container-square mb0\">\n                <span className=\"inner-ratio-container flex\">\n                    <span className=\"mauto color-global-border h1\">{getInitial(name)}</span>\n                </span>\n            </div>\n        );\n    }\n\n    const handleClick = () => setShowAnyways(true);\n\n    if (showPhoto) {\n        if (loading) {\n            return <Loader />;\n        }\n\n        const style = {\n            backgroundImage: `url(${image.src})`,\n            backgroundPosition: 'center',\n            backgroundRepeat: 'no-repeat'\n        };\n\n        if (!image.isSmall) {\n            return (\n                <div className=\"rounded50 ratio-container-square\" style={style}>\n                    <span className=\"inner-ratio-container\" />\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"rounded50 ratio-container-square mb0\">\n                <span className=\"inner-ratio-container flex\">\n                    <div className=\"mbauto mtauto center\" style={{ width: `${image.width}px` }}>\n                        <div className=\"rounded50 ratio-container-square\" style={style}>\n                            <span className=\"inner-ratio-container\" />\n                        </div>\n                    </div>\n                </span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"rounded50 bordered bg-white ratio-container-square mb0\">\n            <span className=\"inner-ratio-container flex\">\n                <span className=\"mauto color-global-border\">\n                    <Button onClick={handleClick}>{c('Action').t`Load photo`}</Button>\n                </span>\n            </span>\n        </div>\n    );\n};\nContactImageSummary.propTypes = {\n    photo: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default ContactImageSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, useUser, classnames } from 'react-components';\n\nimport { getFirstValue } from '../helpers/properties';\nimport { formatAdr } from '../helpers/property';\n\nimport ContactImageSummary from './ContactImageSummary';\nimport './ContactSummary.scss';\n\nconst ContactSummary = ({ properties, leftBlockWidth = 'w30' }) => {\n    const [user] = useUser();\n    const { hasPaidMail } = user;\n    const photo = getFirstValue(properties, 'photo');\n    const name = getFirstValue(properties, 'fn');\n    const email = getFirstValue(properties, 'email');\n    const tel = getFirstValue(properties, 'tel');\n    const adr = getFirstValue(properties, 'adr');\n    const org = getFirstValue(properties, 'org');\n\n    const summary = [\n        email && {\n            icon: 'email',\n            component: (\n                <a href={`mailto:${email}`} title={email}>\n                    {email}\n                </a>\n            )\n        },\n        hasPaidMail && tel && { icon: 'phone', component: <a href={`tel:${tel}`}>{tel}</a> },\n        hasPaidMail && adr && { icon: 'address', component: formatAdr(adr) },\n        hasPaidMail && org && { icon: 'organization', component: org }\n    ].filter(Boolean);\n\n    return (\n        <div className=\"contactsummary-container flex flex-nowrap p1 mb1 border-bottom\">\n            <div className={classnames(['aligncenter contactsummary-photo-container', leftBlockWidth])}>\n                <ContactImageSummary photo={photo} name={name} />\n            </div>\n            <div className=\"pl1\">\n                <h2 className=\"mb0-5 ellipsis\">{name}</h2>\n                <ul className=\"unstyled m0\">\n                    {summary.map(({ icon, component }) => {\n                        return (\n                            <li key={icon} className=\"flex flex-nowrap flex-items-center mb0-5\">\n                                <Icon name={icon} className=\"mr0-5\" />\n                                <span className=\"ellipsis\">{component}</span>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nContactSummary.propTypes = {\n    properties: PropTypes.array.isRequired,\n    leftBlockWidth: PropTypes.string\n};\n\nexport default ContactSummary;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormModal, Alert, Row, Label, Field, Checkbox, useContactEmails } from 'react-components';\nimport { c } from 'ttag';\n\n/**\n * Modal to select contact emails and add them to a contact group\n * @param {Array} props.contacts contacts selected\n * @param {Function} props.onSubmit only submit checked contactEmails (Array<Object>)\n * @param {Function} props.onClose\n */\nconst SelectEmailsModal = ({ contacts, onSubmit, ...rest }) => {\n    const [contactEmails] = useContactEmails();\n    const [model, setModel] = useState(\n        contacts.map((contact) => {\n            return {\n                ...contact,\n                contactEmails: contactEmails\n                    .filter(({ ContactID }) => ContactID === contact.ID)\n                    .map((contactEmail) => ({ ...contactEmail, isChecked: true }))\n            };\n        })\n    );\n\n    const handleSubmit = () => {\n        const toSubmit = model.reduce((acc, contact) => {\n            contact.contactEmails.forEach(({ isChecked, ...contactEmail }) => {\n                if (isChecked) {\n                    acc.push(contactEmail);\n                }\n            });\n            return acc;\n        }, []);\n        onSubmit(toSubmit);\n        rest.onClose();\n    };\n\n    const handleCheck = (contactID, contactEmailID) => ({ target }) => {\n        const copy = [...model];\n        const contactIndex = model.findIndex(({ ID }) => ID === contactID);\n        const contactEmailIndex = model[contactIndex].contactEmails.findIndex(({ ID }) => ID === contactEmailID);\n        copy[contactIndex].contactEmails[contactEmailIndex].isChecked = target.checked;\n        setModel(copy);\n    };\n\n    return (\n        <FormModal submit={c('Action').t`Apply`} title={c('Title').t`Add to group`} onSubmit={handleSubmit} {...rest}>\n            <Alert>{c('Info').t`Please select which email address or addresses to add to this group.`}</Alert>\n            {model\n                .filter(({ contactEmails = [] }) => contactEmails.length > 1) // Only display contact with multiple emails\n                .map(({ ID: contactID, Name, contactEmails = [] }) => {\n                    return (\n                        <Row key={contactID} className=\"border-bottom\">\n                            <Label className=\"bold pt0\">{Name}</Label>\n                            <Field className=\"flex flex-column w100\">\n                                {contactEmails.map(({ ID: contactEmailID, Email, isChecked }) => {\n                                    return (\n                                        <label key={contactEmailID} className=\"mb1\" htmlFor={contactEmailID}>\n                                            <Checkbox\n                                                id={contactEmailID}\n                                                checked={isChecked}\n                                                className=\"mr0-5\"\n                                                onChange={handleCheck(contactID, contactEmailID)}\n                                            />\n                                            <span>{Email}</span>\n                                        </label>\n                                    );\n                                })}\n                            </Field>\n                        </Row>\n                    );\n                })}\n        </FormModal>\n    );\n};\n\nSelectEmailsModal.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onSubmit: PropTypes.func\n};\n\nexport default SelectEmailsModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownCaret, classnames } from 'react-components';\n\nconst ContactGroupDropdownButton = ({ buttonRef, caretClassName = '', children, isOpen, ...rest }) => {\n    return (\n        <button type=\"button\" role=\"button\" ref={buttonRef} {...rest}>\n            {children}\n            <DropdownCaret\n                isOpen={isOpen}\n                className={classnames(['ml0-25 expand-caret mtauto mbauto', caretClassName])}\n            />\n        </button>\n    );\n};\n\nContactGroupDropdownButton.propTypes = {\n    buttonRef: PropTypes.object,\n    children: PropTypes.node,\n    isOpen: PropTypes.bool,\n    caretClassName: PropTypes.string\n};\n\nexport default ContactGroupDropdownButton;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Dropdown,\n    SmallButton,\n    Icon,\n    SearchInput,\n    Checkbox,\n    useContactGroups,\n    useModals,\n    useApi,\n    Tooltip,\n    useNotifications,\n    useEventManager,\n    useContacts,\n    usePopperAnchor,\n    generateUID,\n    useLoading\n} from 'react-components';\nimport { c, msgid } from 'ttag';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { labelContactEmails, unLabelContactEmails } from 'proton-shared/lib/api/contacts';\n\nimport ContactGroupModal from './ContactGroupModal';\nimport SelectEmailsModal from './SelectEmailsModal';\nimport ContactGroupDropdownButton from './ContactGroupDropdownButton';\n\nconst UNCHECKED = 0;\nconst CHECKED = 1;\nconst INDETERMINATE = 2;\n\n/**\n * Build initial dropdown model\n * @param {Array} contactGroups\n * @param {Array} contactEmails\n * @returns {Object}\n */\nconst getModel = (contactGroups = [], contactEmails = []) => {\n    if (!contactEmails.length || !contactGroups.length) {\n        return Object.create(null);\n    }\n\n    return contactGroups.reduce((acc, { ID }) => {\n        const inGroup = contactEmails.filter(({ LabelIDs = [] }) => {\n            return LabelIDs.includes(ID);\n        });\n        acc[ID] = inGroup.length ? (contactEmails.length === inGroup.length ? CHECKED : INDETERMINATE) : UNCHECKED;\n        return acc;\n    }, Object.create(null));\n};\n\n/**\n * Collect contacts having multiple emails\n * Used for <SelectEmailsModal />\n * @param {Array} contactEmails\n * @returns {Array} result.contacts\n */\nconst collectContacts = (contactEmails = [], contacts) => {\n    return contactEmails.reduce(\n        (acc, { ContactID }) => {\n            acc.duplicate[ContactID] = (acc.duplicate[ContactID] || 0) + 1;\n\n            if (acc.duplicate[ContactID] === 2) {\n                const contact = contacts.find(({ ID }) => ID === ContactID);\n                acc.contacts.push(contact);\n            }\n\n            return acc;\n        },\n        {\n            contacts: [],\n            duplicate: Object.create(null)\n        }\n    );\n};\n\nconst ContactGroupDropdown = ({ children, className, contactEmails, disabled, forToolbar = false }) => {\n    const [keyword, setKeyword] = useState('');\n    const [loading, withLoading] = useLoading();\n    const { anchorRef, isOpen, toggle, close } = usePopperAnchor();\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const api = useApi();\n    const { createModal } = useModals();\n    const [contacts] = useContacts();\n    const [contactGroups] = useContactGroups();\n    const [model, setModel] = useState(Object.create(null));\n    const [uid] = useState(generateUID('contactGroupDropdown'));\n\n    const handleAdd = () => {\n        createModal(<ContactGroupModal />);\n        close();\n    };\n    const handleCheck = (contactGroupID) => ({ target }) => setModel({ ...model, [contactGroupID]: +target.checked });\n\n    const handleApply = async () => {\n        let selectedContactEmails = [...contactEmails];\n        const { contacts: collectedContacts } = collectContacts(contactEmails, contacts);\n\n        if (collectedContacts.length) {\n            selectedContactEmails = await new Promise((resolve, reject) => {\n                createModal(<SelectEmailsModal contacts={collectedContacts} onSubmit={resolve} onClose={reject} />);\n            });\n        }\n        const groupEntries = Object.entries(model);\n        await Promise.all(\n            groupEntries.map(([contactGroupID, isChecked]) => {\n                if (isChecked === INDETERMINATE) {\n                    return Promise.resolve();\n                }\n\n                if (isChecked === CHECKED) {\n                    const toLabel = selectedContactEmails\n                        .filter(({ LabelIDs = [] }) => !LabelIDs.includes(contactGroupID))\n                        .map(({ ID }) => ID);\n                    if (!toLabel.length) {\n                        return Promise.resolve();\n                    }\n                    return api(labelContactEmails({ LabelID: contactGroupID, ContactEmailIDs: toLabel }));\n                }\n\n                const toUnlabel = selectedContactEmails\n                    .filter(({ LabelIDs = [] }) => LabelIDs.includes(contactGroupID))\n                    .map(({ ID }) => ID);\n\n                if (!toUnlabel.length) {\n                    return Promise.resolve();\n                }\n                return api(unLabelContactEmails({ LabelID: contactGroupID, ContactEmailIDs: toUnlabel }));\n            })\n        );\n        await call();\n        createNotification({\n            text: c('Info').ngettext(msgid`Contact group apply`, `Contact groups apply`, groupEntries.length)\n        });\n        close();\n    };\n\n    useEffect(() => {\n        isOpen && setModel(getModel(contactGroups, contactEmails));\n    }, [contactGroups, contactEmails, isOpen]);\n\n    const filteredContactGroups = useMemo(() => {\n        if (!Array.isArray(contactGroups)) {\n            return [];\n        }\n        const normalizedKeyword = normalize(keyword);\n        if (!normalizedKeyword.length) {\n            return contactGroups;\n        }\n        return contactGroups.filter(({ Name }) => normalize(Name).includes(normalizedKeyword));\n    }, [keyword, contactGroups]);\n\n    return (\n        <>\n            <ContactGroupDropdownButton\n                caretClassName={forToolbar ? 'toolbar-icon' : ''}\n                className={className}\n                disabled={disabled}\n                buttonRef={anchorRef}\n                isOpen={isOpen}\n                onClick={toggle}\n            >\n                {children}\n            </ContactGroupDropdownButton>\n            <Dropdown\n                id=\"contact-group-dropdown\"\n                isOpen={isOpen}\n                anchorRef={anchorRef}\n                onClose={close}\n                autoClose={false}\n            >\n                <div className=\"flex flex-spacebetween pt1 pl1 pr1 mb1\">\n                    <strong>{c('Label').t`Add to group`}</strong>\n                    <Tooltip title={c('Info').t`Create a new contact group`}>\n                        <SmallButton className=\"pm-button--primary pm-button--for-icon\" onClick={handleAdd}>\n                            <Icon name=\"contacts-groups\" fill=\"light\" />+\n                        </SmallButton>\n                    </Tooltip>\n                </div>\n                <div className=\"pl1 pr1 mb1\">\n                    <SearchInput\n                        value={keyword}\n                        onChange={setKeyword}\n                        autoFocus={true}\n                        placeholder={c('Placeholder').t`Filter groups`}\n                    />\n                </div>\n                <div className=\"mb1 dropDown-content dropDown-content--narrow\">\n                    <ul className=\"unstyled m0 pl1 pr1 dropDown-contentInner\">\n                        {filteredContactGroups.map(({ ID, Name, Color }) => {\n                            const checkboxId = `${uid}${ID}`;\n                            return (\n                                <li\n                                    key={ID}\n                                    className=\"flex flex-nowrap border-bottom border-bottom--dashed pt0-5 pb0-5\"\n                                >\n                                    <label htmlFor={checkboxId} className=\"flex flex-item-fluid flex-nowrap\">\n                                        <Icon\n                                            name=\"contacts-groups\"\n                                            className=\"mr0-5 mtauto mbauto flex-item-noshrink\"\n                                            color={Color}\n                                        />\n                                        <span className=\"ellipsis flex-item-fluid\" title={Name}>\n                                            {Name}\n                                        </span>\n                                    </label>\n                                    <Checkbox\n                                        className=\"flex flex-item-noshrink mtauto mbauto\"\n                                        id={checkboxId}\n                                        checked={model[ID] === CHECKED}\n                                        indeterminate={model[ID] === INDETERMINATE}\n                                        onChange={handleCheck(ID)}\n                                    />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n                <div className=\"aligncenter mb1\">\n                    <SmallButton\n                        loading={loading}\n                        className=\"pm-button--primary\"\n                        onClick={() => withLoading(handleApply())}\n                    >{c('Action').t`Apply`}</SmallButton>\n                </div>\n            </Dropdown>\n        </>\n    );\n};\n\nContactGroupDropdown.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    contactEmails: PropTypes.arrayOf(PropTypes.object),\n    forToolbar: PropTypes.bool\n};\n\nexport default ContactGroupDropdown;\n","import { RECIPIENT_TYPE, KEY_FLAGS } from 'proton-shared/lib/constants';\nimport { serverTime } from 'pmcrypto/lib/serverTime';\nimport { toBitMap } from 'proton-shared/lib/helpers/object';\n\nconst { TYPE_INTERNAL } = RECIPIENT_TYPE;\nconst { ENABLE_ENCRYPTION } = KEY_FLAGS;\n\n/**\n * Check if it's an internal contact\n * @param {Integer} config.RecipientType from API\n * @returns {Boolean}\n */\nexport const isInternalUser = ({ RecipientType }) => RecipientType === TYPE_INTERNAL;\n\n/**\n * Test if no key is enabled\n * @param {Object} config from API\n * @returns {Boolean}\n */\nexport const isDisabledUser = (config) =>\n    isInternalUser(config) && !config.Keys.some(({ Flags }) => Flags & ENABLE_ENCRYPTION);\n\n/**\n * Check if current email mismatch with email define in key data\n * @param {Array} key.users\n * @param {String} currentEmail\n * @returns {Boolean|Array<String>} emails\n */\nexport const emailMismatch = ({ users = [] }, currentEmail) => {\n    const keyEmails = users.reduce((acc, { userId = {} } = {}) => {\n        if (!userId || !userId.userid) {\n            // userId can be set to null\n            return acc;\n        }\n        // we don't normalize anything here because enigmail / pgp also doesn't normalize it.\n        const [, email = userId.userid] = /<([^>]*)>/.exec(userId.userid) || [];\n        acc.push(email);\n        return acc;\n    }, []);\n\n    if (keyEmails.includes(currentEmail)) {\n        return false;\n    }\n\n    return keyEmails;\n};\n\n/**\n * Sort list of keys retrieved from the API. Trusted keys take preference.\n * For two keys such that both are either trusted or not, non-verify-only keys take preference\n * @param {Array} keys\n * @param {Set} trustedFingerprints\n * @param {Set} verifyOnlyFingerprints\n * @returns {Array}\n */\nexport const sortApiKeys = (keys = [], trustedFingerprints, verifyOnlyFingerprints) =>\n    keys\n        .reduce(\n            (acc, key) => {\n                const fingerprint = key.getFingerprint();\n                // calculate order through a bitmap\n                const index = toBitMap({\n                    isVerificationOnly: verifyOnlyFingerprints.has(fingerprint),\n                    isNotTrusted: !trustedFingerprints.has(fingerprint)\n                });\n                acc[index].push(key);\n                return acc;\n            },\n            Array.from({ length: 4 }).map(() => [])\n        )\n        .flat();\n\n/**\n * Sort list of pinned keys retrieved from the API. Keys that can be used for sending take preference\n * @param {Array} keys\n * @param {Set} expiredFingerprints\n * @param {Set} revokedFingerprints\n * @returns {Array}\n */\nexport const sortPinnedKeys = (keys = [], expiredFingerprints, revokedFingerprints) =>\n    keys\n        .reduce(\n            (acc, key) => {\n                const fingerprint = key.getFingerprint();\n                // calculate order through a bitmap\n                const index = toBitMap({\n                    cannotSend: expiredFingerprints.has(fingerprint) || revokedFingerprints.has(fingerprint)\n                });\n                acc[index].push(key);\n                return acc;\n            },\n            Array.from({ length: 2 }).map(() => [])\n        )\n        .flat();\n\n/**\n * Given a key, return its expiration and revoke status\n * @param publicKey\n * @returns {Promise<{ isExpired: boolean, isRevoked: boolean}>}\n */\nexport const getKeyEncryptStatus = async (publicKey) => {\n    const date = +serverTime();\n    const creationTime = publicKey.getCreationTime();\n    // notice there are different expiration times depending on the use of the key.\n    const expirationTime = await publicKey.getExpirationTime('encrypt');\n    const isExpired = !(creationTime <= date && date <= expirationTime);\n    const isRevoked = await publicKey.isRevoked();\n    return { isExpired, isRevoked };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'react-components';\nimport { c } from 'ttag';\nimport { MIME_TYPES } from 'proton-shared/lib/constants';\n\nconst ContactMIMETypeSelect = ({ value, onChange, disabled }) => {\n    const options = [\n        { text: c('MIME type').t`Automatic`, value: '' },\n        { text: c('MIME type').t`Plain text`, value: MIME_TYPES.PLAINTEXT }\n    ];\n    const handleChange = ({ target }) => onChange(target.value);\n    return <Select value={value} options={options} disabled={disabled} onChange={handleChange} />;\n};\n\nContactMIMETypeSelect.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool\n};\n\nexport default ContactMIMETypeSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { PACKAGE_TYPE } from 'proton-shared/lib/constants';\nimport { Select, useMailSettings } from 'react-components';\nimport { PGP_INLINE, PGP_MIME, PGP_INLINE_TEXT, PGP_MIME_TEXT } from '../constants';\n\nconst ContactSchemeSelect = ({ value, onChange }) => {\n    const [{ PGPScheme }, loading] = useMailSettings();\n    const defaultValue = PGPScheme === PACKAGE_TYPE.SEND_PGP_INLINE ? PGP_INLINE_TEXT : PGP_MIME_TEXT;\n\n    const options = [\n        { value: '', text: c('Default encryption scheme').t`Use global default (${defaultValue})` },\n        { value: PGP_MIME, text: PGP_MIME_TEXT },\n        { value: PGP_INLINE, text: PGP_INLINE_TEXT }\n    ];\n\n    const handleChange = ({ target }) => onChange(target.value);\n\n    return <Select options={options} disabled={loading} value={value} onChange={handleChange} />;\n};\n\nContactSchemeSelect.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default ContactSchemeSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, Tooltip } from 'react-components';\n\nimport { emailMismatch } from '../helpers/pgp';\n\nconst KeyWarningIcon = ({ publicKey, email, ...rest }) => {\n    const icon = <Icon name=\"attention\" fill=\"attention\" {...rest} />;\n    const assignedEmails = emailMismatch(publicKey, email); // Returns Boolean|Array<String>\n\n    if (assignedEmails) {\n        const emails = assignedEmails.join(', ');\n        return <Tooltip title={c('PGP key warning').t`This key is assigned to ${emails}`}>{icon}</Tooltip>;\n    }\n\n    return null;\n};\n\nKeyWarningIcon.propTypes = {\n    publicKey: PropTypes.object.isRequired,\n    email: PropTypes.string.isRequired\n};\n\nexport default KeyWarningIcon;\n","import React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableRow, Badge, DropdownActions, useActiveBreakpoint, classnames } from 'react-components';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { isValid, format } from 'date-fns';\n\nimport { move, uniqueBy } from 'proton-shared/lib/helpers/array';\nimport { dateLocale } from 'proton-shared/lib/i18n';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { describe } from 'proton-shared/lib/keys/keysAlgorithm';\n\nimport KeyWarningIcon from './KeyWarningIcon';\n\nconst ContactKeysTable = ({ model, setModel }) => {\n    const [keys, setKeys] = useState([]);\n    const { isNarrow, isTinyMobile } = useActiveBreakpoint();\n\n    const totalApiKeys = model.keys.api.length;\n\n    /**\n     * Extract keys info from model.keys to define table body\n     */\n    const parse = async () => {\n        const allKeys = model.isPGPInternal ? [...model.keys.api] : [...model.keys.api, ...model.keys.pinned];\n        const uniqueKeys = uniqueBy(allKeys, (publicKey) => publicKey.getFingerprint());\n        const parsedKeys = await Promise.all(\n            uniqueKeys.map(async (publicKey, index) => {\n                try {\n                    const fingerprint = publicKey.getFingerprint();\n                    const creationTime = publicKey.getCreationTime();\n                    const expirationTime = await publicKey.getExpirationTime('encrypt');\n                    const algoInfo = publicKey.getAlgorithmInfo();\n                    const algo = describe(algoInfo);\n                    const isTrusted = model.trustedFingerprints.has(fingerprint);\n                    const isExpired = model.expiredFingerprints.has(fingerprint);\n                    const isRevoked = model.revokedFingerprints.has(fingerprint);\n                    const isVerificationOnly = model.verifyOnlyFingerprints.has(fingerprint);\n                    const isActive =\n                        !index &&\n                        !isExpired &&\n                        !isRevoked &&\n                        !isVerificationOnly &&\n                        (totalApiKeys ? true : model.encrypt);\n                    const isWKD = model.isPGPExternal && index < totalApiKeys;\n                    const isUploaded = index >= totalApiKeys;\n                    const canBeActive =\n                        !!index &&\n                        !isExpired &&\n                        !isRevoked &&\n                        !isVerificationOnly &&\n                        (index < totalApiKeys ? isTrusted : !totalApiKeys && model.encrypt);\n                    const canBeTrusted = !isTrusted && !isUploaded;\n                    const canBeUntrusted = isTrusted && !isUploaded;\n                    return {\n                        publicKey,\n                        fingerprint,\n                        algo,\n                        creationTime,\n                        expirationTime,\n                        isActive,\n                        isWKD,\n                        isExpired,\n                        isRevoked,\n                        isTrusted,\n                        isVerificationOnly,\n                        isUploaded,\n                        canBeActive,\n                        canBeTrusted,\n                        canBeUntrusted\n                    };\n                } catch (error) {\n                    return false;\n                }\n            })\n        );\n        setKeys(parsedKeys.filter(Boolean));\n    };\n\n    useEffect(() => {\n        parse();\n    }, [model.keys, model.trustedFingerprints, model.encrypt]);\n\n    return (\n        <Table className=\"pm-simple-table--has-actions\">\n            <thead>\n                <tr>\n                    <th scope=\"col\" className=\"ellipsis\">{c('Table header').t`Fingerprint`}</th>\n                    {!isNarrow && <th scope=\"col\" className=\"ellipsis\">{c('Table header').t`Created`}</th>}\n                    {!isTinyMobile && <th scope=\"col\" className=\"ellipsis\">{c('Table header').t`Expires`}</th>}\n                    {!isNarrow && <th scope=\"col\" className=\"ellipsis\">{c('Table header').t`Type`}</th>}\n                    <th scope=\"col\" className=\"ellipsis\">{c('Table header').t`Status`}</th>\n                    <th scope=\"col\" className={classnames(['ellipsis', isNarrow && 'w40'])}>{c('Table header')\n                        .t`Actions`}</th>\n                </tr>\n            </thead>\n            <TableBody>\n                {keys.map(\n                    ({\n                        fingerprint,\n                        algo,\n                        creationTime,\n                        expirationTime,\n                        isActive,\n                        isWKD,\n                        publicKey,\n                        isExpired,\n                        isRevoked,\n                        isTrusted,\n                        isVerificationOnly,\n                        isUploaded,\n                        canBeActive,\n                        canBeTrusted,\n                        canBeUntrusted\n                    }) => {\n                        const creation = new Date(creationTime);\n                        const expiration = new Date(expirationTime);\n                        const list = [\n                            {\n                                text: c('Action').t`Download`,\n                                async onClick() {\n                                    const blob = new Blob([publicKey.armor()], {\n                                        type: 'data:text/plain;charset=utf-8;'\n                                    });\n                                    const filename = `publickey - ${model.email} - 0x${fingerprint\n                                        .slice(0, 8)\n                                        .toUpperCase()}.asc`;\n\n                                    downloadFile(blob, filename);\n                                }\n                            },\n                            canBeActive && {\n                                text: c('Action').t`Use for sending`,\n                                onClick() {\n                                    const apiIndex = model.keys.api.findIndex(\n                                        (key) => key.getFingerprint() === fingerprint\n                                    );\n                                    const pinnedIndex = model.keys.pinned.findIndex(\n                                        (key) => key.getFingerprint() === fingerprint\n                                    );\n                                    const reOrderedApiKeys =\n                                        apiIndex !== -1 ? move(model.keys.api, apiIndex, 0) : model.keys.api;\n                                    const reOrderedPinnedKeys =\n                                        pinnedIndex !== -1\n                                            ? move(model.keys.pinned, pinnedIndex, 0)\n                                            : model.keys.pinned;\n                                    setModel({\n                                        ...model,\n                                        keys: { api: reOrderedApiKeys, pinned: reOrderedPinnedKeys }\n                                    });\n                                }\n                            },\n                            canBeTrusted && {\n                                text: c('Action').t`Trust`,\n                                onClick() {\n                                    const trustedFingerprints = new Set(model.trustedFingerprints);\n                                    trustedFingerprints.add(fingerprint);\n                                    setModel({ ...model, trustedFingerprints });\n                                }\n                            },\n                            canBeUntrusted && {\n                                text: c('Action').t`Untrust`,\n                                onClick() {\n                                    const trustedFingerprints = new Set(model.trustedFingerprints);\n                                    trustedFingerprints.delete(fingerprint);\n                                    setModel({ ...model, trustedFingerprints });\n                                }\n                            },\n                            isUploaded && {\n                                text: c('Action').t`Remove`,\n                                onClick() {\n                                    const trustedFingerprints = new Set(model.trustedFingerprints);\n                                    const expiredFingerprints = new Set(model.expiredFingerprints);\n                                    const revokedFingerprints = new Set(model.revokedFingerprints);\n                                    trustedFingerprints.delete(fingerprint);\n                                    expiredFingerprints.delete(fingerprint);\n                                    revokedFingerprints.delete(fingerprint);\n                                    setModel({\n                                        ...model,\n                                        trustedFingerprints,\n                                        expiredFingerprints,\n                                        revokedFingerprints,\n                                        keys: {\n                                            ...model.keys,\n                                            pinned: model.keys.pinned.filter(\n                                                (publicKey) => publicKey.getFingerprint() !== fingerprint\n                                            )\n                                        }\n                                    });\n                                }\n                            }\n                        ].filter(Boolean);\n                        const cells = [\n                            <div key={fingerprint} title={fingerprint} className=\"flex flex-nowrap\">\n                                <KeyWarningIcon\n                                    className=\"mr0-5 flex-item-noshrink\"\n                                    publicKey={publicKey}\n                                    email={model.email}\n                                />\n                                <span className=\"flex-item-fluid ellipsis\">{fingerprint}</span>\n                            </div>,\n                            !isNarrow && (isValid(creation) ? format(creation, 'PP', { locale: dateLocale }) : '-'),\n                            !isTinyMobile &&\n                                (isValid(expiration) ? format(expiration, 'PP', { locale: dateLocale }) : '-'),\n                            !isNarrow && algo,\n                            <React.Fragment key={fingerprint}>\n                                {isActive ? <Badge>{c('Key badge').t`Active`}</Badge> : null}\n                                {isVerificationOnly ? (\n                                    <Badge type=\"warning\">{c('Key badge').t`Verification only`}</Badge>\n                                ) : null}\n                                {isWKD ? <Badge>{c('Key badge').t`WKD`}</Badge> : null}\n                                {isTrusted ? <Badge>{c('Key badge').t`Trusted`}</Badge> : null}\n                                {isRevoked ? <Badge type=\"error\">{c('Key badge').t`Revoked`}</Badge> : null}\n                                {isExpired ? <Badge type=\"error\">{c('Key badge').t`Expired`}</Badge> : null}\n                            </React.Fragment>,\n                            <DropdownActions key={fingerprint} className=\"pm-button--small\" list={list} />\n                        ].filter(Boolean);\n                        return <TableRow key={fingerprint} cells={cells} />;\n                    }\n                )}\n            </TableBody>\n        </Table>\n    );\n};\n\nContactKeysTable.propTypes = {\n    model: PropTypes.object,\n    setModel: PropTypes.func\n};\n\nexport default ContactKeysTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Alert, Row, Label, Field, Info, Toggle, SelectKeyFiles, useNotifications } from 'react-components';\nimport { getKeyEncryptStatus } from '../helpers/pgp';\n\nimport ContactSchemeSelect from './ContactSchemeSelect';\nimport ContactKeysTable from './ContactKeysTable';\n\nconst ContactPgpSettings = ({ model, setModel }) => {\n    const { createNotification } = useNotifications();\n    const trustedApiKeys = model.keys.api.filter((key) => model.trustedFingerprints.has(key.getFingerprint()));\n    const hasApiKeys = !!model.keys.api.length;\n    const hasPinnedKeys = !!model.keys.pinned.length;\n    const hasTrustedApiKeys = !!trustedApiKeys.length;\n\n    const noPinnedKeyCanSend =\n        hasPinnedKeys &&\n        !model.keys.pinned.some((publicKey) => {\n            const fingerprint = publicKey.getFingerprint();\n            const canSend = !model.expiredFingerprints.has(fingerprint) && !model.revokedFingerprints.has(fingerprint);\n            return canSend;\n        });\n    const noTrustedApiKeyCanSend =\n        hasTrustedApiKeys && !trustedApiKeys.some((key) => !model.verifyOnlyFingerprints.has(key.getFingerprint()));\n\n    /**\n     * Add / update keys to model\n     * @param {Array<PublicKey>} files\n     */\n    const handleUploadKeys = async (files) => {\n        if (!files.length) {\n            return createNotification({\n                type: 'error',\n                text: c('Error').t`Invalid public key file`\n            });\n        }\n        const pinned = [...model.keys.pinned];\n        const trustedFingerprints = new Set(model.trustedFingerprints);\n        const revokedFingerprints = new Set(model.revokedFingerprints);\n        const expiredFingerprints = new Set(model.expiredFingerprints);\n\n        await Promise.all(\n            files.map(async (publicKey) => {\n                const fingerprint = publicKey.getFingerprint();\n                const { isExpired, isRevoked } = await getKeyEncryptStatus(publicKey);\n                isExpired && expiredFingerprints.add(fingerprint);\n                isRevoked && revokedFingerprints.add(fingerprint);\n                if (!trustedFingerprints.has(fingerprint)) {\n                    trustedFingerprints.add(fingerprint);\n                    return pinned.push(publicKey);\n                }\n                const indexFound = pinned.findIndex((publicKey) => publicKey.getFingerprint() === fingerprint);\n                return pinned.splice(indexFound, 1, publicKey);\n            })\n        );\n\n        setModel({\n            ...model,\n            keys: { ...model.keys, pinned },\n            trustedFingerprints,\n            expiredFingerprints,\n            revokedFingerprints\n        });\n    };\n\n    return (\n        <>\n            {!hasApiKeys && (\n                <Alert learnMore=\"https://protonmail.com/support/knowledge-base/how-to-use-pgp/\">\n                    {c('Info')\n                        .t`Setting up PGP allows you to send end-to-end encrypted emails with a non-Protonmail user that uses a PGP compatible service.`}\n                </Alert>\n            )}\n            {!!model.keys.pinned.length && noTrustedApiKeyCanSend && (\n                <Alert type=\"warning\">{c('Info')\n                    .t`Address Verification with Trusted Keys is enabled for this address. To be able to send to this address, first trust public keys that can be used for sending.`}</Alert>\n            )}\n            {model.pgpAddressDisabled && (\n                <Alert type=\"warning\">{c('Info')\n                    .t`This address is disabled. To be able to send to this address, the owner must first enable the address.`}</Alert>\n            )}\n            {hasApiKeys && (\n                <Alert learnMore=\"https://protonmail.com/support/knowledge-base/address-verification/\">{c('Info')\n                    .t`To use Address Verification, you must trust one or more available public keys, including the one you want to use for sending. This prevents the encrypted keys from being faked.`}</Alert>\n            )}\n            {!hasApiKeys && !model.sign && (\n                <Alert learnMore=\"https://protonmail.com/support/knowledge-base/how-to-use-pgp/\">{c('Info')\n                    .t`Only change these settings if you are using PGP with non-ProtonMail recipients.`}</Alert>\n            )}\n            {model.isPGPExternalWithoutWKDKeys && noPinnedKeyCanSend && (\n                <Alert type=\"error\" learnMore=\"https://protonmail.com/support/knowledge-base/how-to-use-pgp/\">{c('Info')\n                    .t`All uploaded keys are expired or revoked! Encryption is automatically disabled.`}</Alert>\n            )}\n            {!hasApiKeys && (\n                <Row>\n                    <Label htmlFor=\"encrypt-toggle\">\n                        {c('Label').t`Encrypt emails`}\n                        <Info\n                            className=\"ml0-5\"\n                            title={c('Tooltip')\n                                .t`Email encryption forces email signature to help authenticate your sent messages`}\n                        />\n                    </Label>\n                    <Field>\n                        <Toggle\n                            id=\"encrypt-toggle\"\n                            checked={model.encrypt}\n                            disabled={!model.keys.pinned.length || noPinnedKeyCanSend}\n                            onChange={({ target }) =>\n                                setModel({\n                                    ...model,\n                                    encrypt: target.checked,\n                                    sign: target.checked ? true : model.sign\n                                })\n                            }\n                        />\n                    </Field>\n                </Row>\n            )}\n            {!hasApiKeys && (\n                <Row>\n                    <Label htmlFor=\"sign-toggle\">\n                        {c('Label').t`Sign emails`}\n                        <Info\n                            className=\"ml0-5\"\n                            title={c('Tooltip')\n                                .t`Digitally signing emails helps authenticating that messages are sent by you`}\n                        />\n                    </Label>\n                    <Field>\n                        <Toggle\n                            id=\"sign-toggle\"\n                            checked={model.sign}\n                            disabled={model.encrypt}\n                            onChange={({ target }) =>\n                                setModel({\n                                    ...model,\n                                    sign: target.checked,\n                                    mimeType: ''\n                                })\n                            }\n                        />\n                    </Field>\n                </Row>\n            )}\n            <Row>\n                <Label>\n                    {c('Label').t`Public keys`}\n                    <Info\n                        className=\"ml0-5\"\n                        title={c('Tooltip')\n                            .t`Upload a public key to enable sending end-to-end encrypted emails to this email`}\n                    />\n                </Label>\n                <Field className=\"onmobile-mt0-5\">\n                    {model.isPGPExternalWithoutWKDKeys && <SelectKeyFiles onFiles={handleUploadKeys} multiple={true} />}\n                </Field>\n            </Row>\n            {(hasApiKeys || hasPinnedKeys) && <ContactKeysTable model={model} setModel={setModel} />}\n            {!hasApiKeys && (\n                <Row>\n                    <Label>\n                        {c('Label').t`Cryptographic scheme`}\n                        <Info\n                            className=\"ml0-5\"\n                            title={c('Tooltip')\n                                .t`Select the PGP scheme to be used when signing or encrypting to a user. Note that PGP/Inline forces plain text messages`}\n                        />\n                    </Label>\n                    <Field>\n                        <ContactSchemeSelect\n                            value={model.scheme}\n                            onChange={(scheme) => setModel({ ...model, scheme })}\n                        />\n                    </Field>\n                </Row>\n            )}\n        </>\n    );\n};\n\nContactPgpSettings.propTypes = {\n    model: PropTypes.object,\n    setModel: PropTypes.func\n};\n\nexport default ContactPgpSettings;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useApi,\n    useMailSettings,\n    useEventManager,\n    useNotifications,\n    useLoading,\n    Alert,\n    Row,\n    Label,\n    Field,\n    Info,\n    LinkButton,\n    ContentModal,\n    InnerModal,\n    DialogModal,\n    ResetButton,\n    FooterModal,\n    PrimaryButton,\n    Icon\n} from 'react-components';\nimport { c } from 'ttag';\n\nimport { prepareContacts } from '../helpers/encrypt';\nimport { hasCategories } from '../helpers/import';\nimport { reOrderByPref } from '../helpers/properties';\nimport { getKeysFromProperties, toKeyProperty } from '../helpers/property';\nimport { isInternalUser, isDisabledUser, getKeyEncryptStatus, sortPinnedKeys, sortApiKeys } from '../helpers/pgp';\nimport { addContacts } from 'proton-shared/lib/api/contacts';\nimport { getPublicKeysEmailHelper } from 'proton-shared/lib/api/helpers/publicKeys';\nimport { uniqueBy } from 'proton-shared/lib/helpers/array';\n\nimport { VCARD_KEY_FIELDS, PGP_INLINE, PGP_MIME, CATEGORIES } from '../constants';\nimport { PACKAGE_TYPE, MIME_TYPES, KEY_FLAGS } from 'proton-shared/lib/constants';\n\nimport ContactMIMETypeSelect from './ContactMIMETypeSelect';\nimport ContactPgpSettings from './ContactPgpSettings';\n\nconst { SEND_PGP_INLINE, SEND_PGP_MIME } = PACKAGE_TYPE;\nconst { INCLUDE, IGNORE } = CATEGORIES;\n\nconst PGP_MAP = {\n    [SEND_PGP_INLINE]: PGP_INLINE,\n    [SEND_PGP_MIME]: PGP_MIME\n};\n\nconst ContactEmailSettingsModal = ({ userKeysList, contactID, properties, emailProperty, ...rest }) => {\n    const api = useApi();\n    const { call } = useEventManager();\n    const [model, setModel] = useState({ keys: { api: [], pinned: [] } });\n    const [showPgpSettings, setShowPgpSettings] = useState(false);\n    const [loading, withLoading] = useLoading();\n    const { createNotification } = useNotifications();\n    const [{ PGPScheme, Sign }, loadingMailSettings] = useMailSettings();\n\n    const isLoading = loading || loadingMailSettings;\n    const { value: Email, group: emailGroup } = emailProperty;\n    const isMimeTypeFixed = model.isPGPExternal && model.sign;\n    const hasPGPInline = (model.scheme || PGP_MAP[PGPScheme]) === PGP_INLINE;\n\n    /**\n     * Initialize the model for the modal\n     * @returns {Promise}\n     */\n    const prepare = async (api) => {\n        // prepare keys stored in the vCard\n        const { pinnedKeys, mimeType, encrypt, scheme, sign } = await getKeysFromProperties(\n            properties,\n            emailGroup,\n            Sign\n        );\n        const trustedFingerprints = new Set();\n        const expiredFingerprints = new Set();\n        const revokedFingerprints = new Set();\n        await Promise.all(\n            pinnedKeys.map(async (publicKey) => {\n                const fingerprint = publicKey.getFingerprint();\n                const { isExpired, isRevoked } = await getKeyEncryptStatus(publicKey);\n                trustedFingerprints.add(fingerprint);\n                isExpired && expiredFingerprints.add(fingerprint);\n                isRevoked && revokedFingerprints.add(fingerprint);\n            })\n        );\n\n        // prepare keys retrieved from the API\n        const apiKeysConfig = await getPublicKeysEmailHelper(api, Email);\n        const internalUser = isInternalUser(apiKeysConfig);\n        const externalUser = !internalUser;\n        const verifyOnlyFingerprints = new Set();\n        const { apiKeys } = apiKeysConfig.Keys.reduce(\n            (acc, { Flags }, index) => {\n                const publicKey = apiKeysConfig.publicKeys[index];\n                if (publicKey) {\n                    acc.apiKeys.push(publicKey);\n                    const isVerificationOnly = !(Flags & KEY_FLAGS.ENABLE_ENCRYPTION);\n                    isVerificationOnly && verifyOnlyFingerprints.add(publicKey.getFingerprint());\n                }\n                return acc;\n            },\n            { apiKeys: [] }\n        );\n        const orderedApiKeys = sortApiKeys(apiKeys, trustedFingerprints, verifyOnlyFingerprints);\n\n        setModel({\n            mimeType,\n            encrypt,\n            scheme,\n            sign,\n            email: Email,\n            keys: { api: orderedApiKeys, pinned: pinnedKeys },\n            trustedFingerprints,\n            expiredFingerprints,\n            revokedFingerprints,\n            verifyOnlyFingerprints,\n            isPGPExternal: externalUser,\n            isPGPInternal: internalUser,\n            isPGPExternalWithWKDKeys: externalUser && !!apiKeys.length,\n            isPGPExternalWithoutWKDKeys: externalUser && !apiKeys.length,\n            pgpAddressDisabled: isDisabledUser(apiKeysConfig)\n        });\n    };\n\n    /**\n     * Collect keys from the model to save\n     * @param {String} group attached to the current email address\n     * @returns {Array} key properties to save in the vCard\n     */\n    const getKeysProperties = (group) => {\n        const allKeys = model.isPGPInternal ? [...model.keys.api] : [...model.keys.api, ...model.keys.pinned];\n        const trustedKeys = allKeys.filter((publicKey) => model.trustedFingerprints.has(publicKey.getFingerprint()));\n        const uniqueTrustedKeys = uniqueBy(trustedKeys, (publicKey) => publicKey.getFingerprint());\n        return uniqueTrustedKeys.map((publicKey, index) => toKeyProperty({ publicKey, group, index }));\n    };\n\n    /**\n     * Save relevant key properties in the vCard\n     * @returns {Promise}\n     */\n    const handleSubmit = async () => {\n        const otherProperties = properties.filter(({ field, group }) => {\n            return !['email', ...VCARD_KEY_FIELDS].includes(field) || (group && group !== emailGroup);\n        });\n        const emailProperties = [\n            emailProperty,\n            model.mimeType && { field: 'x-pm-mimetype', value: model.mimeType, group: emailGroup },\n            model.isPGPExternalWithoutWKDKeys &&\n                model.encrypt && { field: 'x-pm-encrypt', value: 'true', group: emailGroup },\n            model.isPGPExternalWithoutWKDKeys && model.sign && { field: 'x-pm-sign', value: 'true', group: emailGroup },\n            model.isPGPExternalWithoutWKDKeys &&\n                model.scheme && { field: 'x-pm-scheme', value: model.scheme, group: emailGroup },\n            ...getKeysProperties(emailGroup) // [{ field: 'key' }, ]\n        ].filter(Boolean);\n        const allProperties = reOrderByPref(otherProperties.concat(emailProperties));\n        const Contacts = await prepareContacts([allProperties], userKeysList[0]);\n        const labels = hasCategories(allProperties) ? INCLUDE : IGNORE;\n        await api(addContacts({ Contacts, Overwrite: +!!contactID, Labels: labels }));\n        await call();\n        rest.onClose();\n        createNotification({ text: c('Success').t`Preferences saved` });\n    };\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const apiWithAbort = (config) => api({ ...config, signal: abortController.signal });\n        // prepare the model once mail settings have been loaded\n        if (!loadingMailSettings) {\n            withLoading(prepare(apiWithAbort));\n        }\n        return () => {\n            abortController.abort();\n        };\n    }, [loadingMailSettings]);\n\n    useEffect(() => {\n        /**\n         * When the list of trusted, expired or revoked keys change,\n         * * update the encrypt toggle (off if all keys are expired or no keys are pinned)\n         * * re-check if the new keys can send\n         * * re-order api keys (trusted take preference)\n         * * move expired keys to the bottom of the list\n         */\n        const noPinnedKeyCanSend =\n            !!model.keys.pinned.length &&\n            !model.keys.pinned.some((publicKey) => {\n                const fingerprint = publicKey.getFingerprint();\n                const canSend =\n                    !model.expiredFingerprints.has(fingerprint) && !model.revokedFingerprints.has(fingerprint);\n                return canSend;\n            });\n        setModel((model) => ({\n            ...model,\n            encrypt: !noPinnedKeyCanSend && !!model.keys.pinned.length && model.encrypt,\n            keys: {\n                api: sortApiKeys(model.keys.api, model.trustedFingerprints, model.verifyOnlyFingerprints),\n                pinned: sortPinnedKeys(model.keys.pinned, model.expiredFingerprints, model.revokedFingerprints)\n            }\n        }));\n    }, [model.trustedFingerprints, model.expiredFingerprints, model.revokedFingerprints, model.verifyOnlyFingerprints]);\n\n    useEffect(() => {\n        // take into account rules relating email format and cryptographic scheme\n        if (!isMimeTypeFixed) {\n            return;\n        }\n        // PGP/Inline should force the email format to plaintext\n        if (hasPGPInline) {\n            return setModel((model) => ({ ...model, mimeType: MIME_TYPES.PLAINTEXT }));\n        }\n        // If PGP/Inline is not selected, go back to automatic\n        setModel((model) => ({ ...model, mimeType: '' }));\n    }, [isMimeTypeFixed, hasPGPInline]);\n\n    return (\n        // we cannot use the FormModal component because we need to introduce the class ellipsis inside the header\n        <DialogModal modalTitleID=\"modalTitle\" {...rest}>\n            <header className=\"pm-modalHeader\">\n                <button\n                    type=\"button\"\n                    className=\"pm-modalClose\"\n                    title={c('Action').t`Close modal`}\n                    onClick={rest.onClose}\n                >\n                    <Icon className=\"pm-modalClose-icon\" name=\"close\" />\n                    <span className=\"sr-only\">{c('Action').t`Close modal`}</span>\n                </button>\n                <h1 id=\"modalTitle\" className=\"pm-modalTitle ellipsis\">\n                    {c('Title').t`Email settings (${Email})`}\n                </h1>\n            </header>\n            <ContentModal onSubmit={() => withLoading(handleSubmit())} onReset={rest.onClose} noValidate={false}>\n                <InnerModal>\n                    {!isMimeTypeFixed ? (\n                        <Alert>\n                            {c('Info')\n                                .t`Select the email format you want to be used by default when sending an email to this email address.`}\n                        </Alert>\n                    ) : hasPGPInline ? (\n                        <Alert>\n                            {c('Info')\n                                .t`PGP/Inline is only compatible with Plain Text format. Please note that ProtonMail always signs PGP/Inline messages.`}\n                        </Alert>\n                    ) : (\n                        <Alert>\n                            {c('Info')\n                                .t`PGP/MIME automatically sends the message using the current composer mode. Please note that ProtonMail always signs PGP/MIME messages.`}\n                        </Alert>\n                    )}\n                    <Row>\n                        <Label>\n                            {c('Label').t`Email format`}\n                            <Info\n                                className=\"ml0-5\"\n                                title={c('Tooltip')\n                                    .t`Automatic indicates that the format in the composer is used to send to this user. Plain text indicates that the message will always be converted to plain text on send.`}\n                            />\n                        </Label>\n                        <Field>\n                            <ContactMIMETypeSelect\n                                disabled={isMimeTypeFixed}\n                                value={model.mimeType}\n                                onChange={(mimeType) => setModel({ ...model, mimeType })}\n                            />\n                        </Field>\n                    </Row>\n                    <div className=\"mb1\">\n                        <LinkButton\n                            onClick={() => setShowPgpSettings(!showPgpSettings)}\n                            disabled={loading || loadingMailSettings}\n                        >\n                            {showPgpSettings\n                                ? c('Action').t`Hide advanced PGP settings`\n                                : c('Action').t`Show advanced PGP settings`}\n                        </LinkButton>\n                    </div>\n                    {showPgpSettings ? <ContactPgpSettings model={model} setModel={setModel} /> : null}\n                </InnerModal>\n                <FooterModal>\n                    <ResetButton>{c('Action').t`Cancel`}</ResetButton>\n                    <PrimaryButton loading={isLoading} disabled={!showPgpSettings} type=\"submit\">\n                        {c('Action').t`Save`}\n                    </PrimaryButton>\n                </FooterModal>\n            </ContentModal>\n        </DialogModal>\n    );\n};\n\nContactEmailSettingsModal.propTypes = {\n    userKeysList: PropTypes.array,\n    contactID: PropTypes.string,\n    properties: PropTypes.array,\n    emailProperty: PropTypes.object.isRequired\n};\n\nexport default ContactEmailSettingsModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Row,\n    Group,\n    ButtonGroup,\n    Icon,\n    Copy,\n    useModals,\n    useUser,\n    classnames,\n    Tooltip,\n    RemoteImage\n} from 'react-components';\nimport { c } from 'ttag';\nimport { parseISO, isValid, format } from 'date-fns';\n\nimport { dateLocale } from 'proton-shared/lib/i18n';\nimport { clearType, getType, formatAdr } from '../helpers/property';\nimport { getTypeLabels } from '../helpers/types';\n\nimport ContactGroupIcon from './ContactGroupIcon';\nimport ContactGroupDropdown from './ContactGroupDropdown';\nimport ContactLabelProperty from './ContactLabelProperty';\nimport ContactEmailSettingsModal from './ContactEmailSettingsModal';\n\nconst ContactViewProperty = ({\n    property,\n    properties,\n    contactID,\n    contactEmail,\n    contactGroups = [],\n    userKeysList,\n    leftBlockWidth = 'w30',\n    rightBlockWidth = 'w70'\n}) => {\n    const [{ hasPaidMail }] = useUser();\n    const { createModal } = useModals();\n    const types = getTypeLabels();\n\n    const { field, first } = property;\n    const cleanType = clearType(getType(property.type));\n    const type = types[cleanType] || cleanType;\n    const value = property.value;\n\n    const getContent = () => {\n        if (field === 'email') {\n            return (\n                <>\n                    <a className=\"mr0-5\" href={`mailto:${value}`} title={value}>\n                        {value}\n                    </a>\n                    {contactGroups.map(({ ID, Name, Color }) => (\n                        <ContactGroupIcon key={ID} name={Name} color={Color} />\n                    ))}\n                </>\n            );\n        }\n        if (field === 'url') {\n            return (\n                <a href={value} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {value}\n                </a>\n            );\n        }\n        if (field === 'tel') {\n            return <a href={`tel:${value}`}>{value}</a>;\n        }\n        if (['bday', 'anniversary'].includes(field)) {\n            const [date] = [parseISO(value), new Date(value)].filter(isValid);\n            if (date) {\n                return format(date, 'PP', { locale: dateLocale });\n            }\n            return value;\n        }\n        if (field === 'logo') {\n            return <RemoteImage src={value} />;\n        }\n        if (field === 'adr') {\n            return formatAdr(value);\n        }\n        return value;\n    };\n\n    const getActions = () => {\n        switch (field) {\n            case 'email': {\n                if (!contactEmail) {\n                    return null;\n                }\n\n                const handleSettings = () => {\n                    createModal(\n                        <ContactEmailSettingsModal\n                            userKeysList={userKeysList}\n                            contactID={contactID}\n                            emailProperty={property}\n                            properties={properties}\n                        />\n                    );\n                };\n\n                return (\n                    <Group>\n                        {hasPaidMail ? (\n                            <ContactGroupDropdown\n                                className=\"pm-button pm-button--for-icon pm-group-button\"\n                                contactEmails={[contactEmail]}\n                            >\n                                <Tooltip title={c('Title').t`Contact group`}>\n                                    <Icon name=\"contacts-groups\" />\n                                </Tooltip>\n                            </ContactGroupDropdown>\n                        ) : null}\n                        <ButtonGroup onClick={handleSettings} className=\"pm-button--for-icon\">\n                            <Tooltip title={c('Title').t`Email settings`}>\n                                <Icon name=\"settings-singular\" />\n                            </Tooltip>\n                        </ButtonGroup>\n                        <Copy className=\"pm-button--for-icon pm-group-button\" value={value} />\n                    </Group>\n                );\n            }\n            case 'tel':\n                return <Copy className=\"pm-button--for-icon\" value={value} />;\n            case 'adr':\n                return <Copy className=\"pm-button--for-icon\" value={formatAdr(value)} />;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <Row>\n            <div className={classnames(['flex flex-items-center', leftBlockWidth])}>\n                <ContactLabelProperty field={field} type={type} first={first} />\n            </div>\n            <div className={classnames(['flex flex-nowrap flex-items-center pl1', rightBlockWidth])}>\n                <span className={classnames(['mr0-5 flex-item-fluid', !['note'].includes(field) && 'ellipsis'])}>\n                    {getContent()}\n                </span>\n                <span className=\"flex-item-noshrink\">{getActions()}</span>\n            </div>\n        </Row>\n    );\n};\n\nContactViewProperty.propTypes = {\n    property: PropTypes.object.isRequired,\n    properties: PropTypes.array,\n    contactID: PropTypes.string.isRequired,\n    contactEmail: PropTypes.object,\n    contactGroups: PropTypes.arrayOf(PropTypes.object),\n    userKeysList: PropTypes.array,\n    leftBlockWidth: PropTypes.string,\n    rightBlockWidth: PropTypes.string\n};\n\nexport default ContactViewProperty;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon } from 'react-components';\n\nimport ContactViewProperty from './ContactViewProperty';\nimport { OTHER_INFORMATION_FIELDS } from '../constants';\nimport EncryptedIcon from './EncryptedIcon';\n\nconst ICONS = {\n    email: 'email',\n    tel: 'phone',\n    adr: 'address',\n    other: 'info'\n};\n\nconst ContactViewProperties = ({\n    properties: allProperties,\n    contactID,\n    contactEmails,\n    contactGroupsMap = {},\n    field,\n    userKeysList,\n    leftBlockWidth = 'w30',\n    rightBlockWidth = 'w70'\n}) => {\n    const TITLES = {\n        email: c('Title').t`Email addresses`,\n        tel: c('Title').t`Phone numbers`,\n        adr: c('Title').t`Addresses`,\n        other: c('Title').t`Other information`\n    };\n    const title = field ? TITLES[field] : TITLES.other;\n    const iconName = field ? ICONS[field] : ICONS.other;\n    const toExclude = ['photo', 'org'];\n    const fields = field ? [field] : OTHER_INFORMATION_FIELDS.filter((field) => !toExclude.includes(field));\n\n    const properties = allProperties.filter(({ field }) => fields.includes(field));\n\n    if (!properties.length) {\n        return null;\n    }\n\n    return (\n        <div className=\"border-bottom mb1\">\n            <h3 className=\"mb1 flex flex-nowrap flex-items-center\">\n                <Icon name={iconName} className=\"mr0-5\" />\n                <span className=\"mr0-5\">{title}</span>\n                {field === 'email' ? null : <EncryptedIcon className=\"flex\" />}\n            </h3>\n            {properties.map((property, index) => {\n                const contactEmail = contactEmails && contactEmails[index];\n                const contactGroups =\n                    contactEmail && contactEmail.LabelIDs.map((ID) => contactGroupsMap[ID]).filter(Boolean);\n\n                return (\n                    // here we are hiddenly using the fact that the emails in\n                    // `properties` appear in the same order as in `contactEmails`\n                    <ContactViewProperty\n                        key={index.toString()}\n                        contactID={contactID}\n                        contactEmail={contactEmail}\n                        contactGroups={contactGroups}\n                        property={property}\n                        properties={allProperties}\n                        userKeysList={userKeysList}\n                        leftBlockWidth={leftBlockWidth}\n                        rightBlockWidth={rightBlockWidth}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nContactViewProperties.propTypes = {\n    properties: PropTypes.array,\n    contactID: PropTypes.string.isRequired,\n    contactEmails: PropTypes.arrayOf(PropTypes.object),\n    contactGroupsMap: PropTypes.object,\n    field: PropTypes.string,\n    userKeysList: PropTypes.array,\n    leftBlockWidth: PropTypes.string,\n    rightBlockWidth: PropTypes.string\n};\n\nexport default ContactViewProperties;\n","import React from 'react';\nimport { c } from 'ttag';\nimport PropTypes from 'prop-types';\nimport { useModals, PrimaryButton, Button, useUser } from 'react-components';\n\nimport ContactModal from './ContactModal';\nimport ContactViewErrors from './ContactViewErrors';\nimport { singleExport } from '../helpers/export';\nimport ContactSummary from './ContactSummary';\nimport ContactViewProperties from './ContactViewProperties';\nimport UpsellFree from './UpsellFree';\n\nconst ContactView = ({ properties = [], contactID, contactEmails, contactGroupsMap, userKeysList, errors }) => {\n    const { createModal } = useModals();\n    const [user] = useUser();\n\n    const openContactModal = () => {\n        createModal(<ContactModal properties={properties} contactID={contactID} />);\n    };\n\n    const handleExport = () => singleExport(properties);\n\n    return (\n        <div className=\"view-column-detail flex-item-fluid scroll-if-needed\">\n            <div className=\"flex flex-spacebetween flex-items-center border-bottom\">\n                <div className=\"p1\">\n                    <h2 className=\"m0\">{c('Title').t`Contact details`}</h2>\n                </div>\n                <div className=\"p1\">\n                    <PrimaryButton onClick={openContactModal} className=\"mr1\">{c('Action').t`Edit`}</PrimaryButton>\n                    <Button onClick={handleExport}>{c('Action').t`Export`}</Button>\n                </div>\n            </div>\n            <ContactViewErrors errors={errors} />\n            <ContactSummary properties={properties} />\n            <div className=\"pl1 pr1\">\n                <ContactViewProperties\n                    userKeysList={userKeysList}\n                    contactID={contactID}\n                    contactEmails={contactEmails}\n                    contactGroupsMap={contactGroupsMap}\n                    properties={properties}\n                    field=\"email\"\n                />\n                {user.hasPaidMail ? (\n                    <>\n                        <ContactViewProperties contactID={contactID} properties={properties} field=\"tel\" />\n                        <ContactViewProperties contactID={contactID} properties={properties} field=\"adr\" />\n                        <ContactViewProperties contactID={contactID} properties={properties} />\n                    </>\n                ) : (\n                    <UpsellFree />\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst ContactPropertyPropTypes = PropTypes.shape({\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    type: PropTypes.string,\n    group: PropTypes.string,\n    field: PropTypes.string\n});\n\nContactView.propTypes = {\n    contactID: PropTypes.string.isRequired,\n    contactEmails: PropTypes.arrayOf(PropTypes.object),\n    contactGroupsMap: PropTypes.object,\n    properties: PropTypes.arrayOf(ContactPropertyPropTypes),\n    userKeysList: PropTypes.array,\n    errors: PropTypes.array\n};\n\nexport default ContactView;\n","import { toICAL } from './vcard';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\n\n/**\n * Export a single contact, given as an array of properties\n * @param {Array} properties\n */\nexport const singleExport = (properties) => {\n    const filename = properties\n        .filter(({ field }) => ['fn', 'email'].includes(field))\n        .map(({ value }) => (Array.isArray(value) ? value[0] : value))[0];\n    const vcard = toICAL(properties);\n    const blob = new Blob([vcard.toString()], { type: 'data:text/plain;charset=utf-8;' });\n\n    downloadFile(blob, `${filename}.vcf`);\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport useContact from '../hooks/useContact';\nimport { prepareContact } from '../helpers/decrypt';\nimport ContactView from './ContactView';\n\nconst Contact = ({ contactID, contactEmails, contactGroupsMap, userKeysList = [] }) => {\n    const [model, setModel] = useState({ ID: contactID });\n    const ref = useRef(contactID);\n    const [contact, contactLoading] = useContact(contactID);\n\n    useEffect(() => {\n        if (contact && userKeysList.length) {\n            ref.current = contact.ID;\n            const { publicKeys, privateKeys } = splitKeys(userKeysList);\n\n            prepareContact(contact, { publicKeys, privateKeys }).then(({ properties, error }) => {\n                if (ref.current !== contact.ID) {\n                    return;\n                }\n                setModel({ ID: contact.ID, properties, error });\n            });\n        }\n    }, [contact, userKeysList]);\n\n    const { properties, errors, ID } = model;\n\n    if (contactLoading || !properties || ID !== contactID) {\n        return <Loader />;\n    }\n\n    return (\n        <ContactView\n            properties={properties}\n            contactID={contactID}\n            contactEmails={contactEmails}\n            contactGroupsMap={contactGroupsMap}\n            userKeysList={userKeysList}\n            errors={errors}\n        />\n    );\n};\n\nContact.propTypes = {\n    contactID: PropTypes.string.isRequired,\n    contactEmails: PropTypes.arrayOf(PropTypes.object),\n    contactGroupsMap: PropTypes.object,\n    userKeysList: PropTypes.array\n};\n\nexport default Contact;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { format } from 'date-fns';\nimport { useContacts, useApi, FormModal, ResetButton, PrimaryButton, Alert } from 'react-components';\nimport { queryContactExport } from 'proton-shared/lib/api/contacts';\nimport downloadFile from 'proton-shared/lib/helpers/downloadFile';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { noop } from 'proton-shared/lib/helpers/function';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\n\nimport { prepareContact } from '../helpers/decrypt';\nimport { toICAL } from '../helpers/vcard';\nimport { percentageProgress } from './../helpers/progress';\nimport DynamicProgress from './DynamicProgress';\nimport { QUERY_EXPORT_MAX_PAGESIZE, API_SAFE_INTERVAL } from '../constants';\n\nconst DOWNLOAD_FILENAME = 'protonContacts';\n\nconst ExportFooter = ({ loading }) => {\n    return (\n        <>\n            <ResetButton>{c('Action').t`Cancel`}</ResetButton>\n            <PrimaryButton loading={loading} type=\"submit\">\n                {c('Action').t`Save`}\n            </PrimaryButton>\n        </>\n    );\n};\n\nExportFooter.propTypes = {\n    loading: PropTypes.bool\n};\n\nconst ExportModal = ({ contactGroupID: LabelID, userKeysList, onSave = noop, ...rest }) => {\n    const api = useApi();\n    const [contacts, loadingContacts] = useContacts();\n\n    const [contactsExported, addSuccess] = useState([]);\n    const [contactsNotExported, addError] = useState([]);\n\n    const countContacts = LabelID\n        ? contacts.filter(({ LabelIDs = [] }) => LabelIDs.includes(LabelID)).length\n        : contacts.length;\n    const apiCalls = Math.ceil(countContacts / QUERY_EXPORT_MAX_PAGESIZE);\n\n    const handleSave = (vcards) => {\n        const allVcards = vcards.join('\\n');\n        const blob = new Blob([allVcards], { type: 'data:text/plain;charset=utf-8;' });\n        downloadFile(blob, `${DOWNLOAD_FILENAME}-${format(Date.now(), 'yyyy-MM-dd')}.vcf`);\n        onSave();\n        rest.onClose();\n    };\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const apiWithAbort = (config) => api({ ...config, signal: abortController.signal });\n\n        const { publicKeys, privateKeys } = splitKeys(userKeysList);\n\n        const exportBatch = async (i, { signal }) => {\n            const { Contacts: contacts } = await apiWithAbort(\n                queryContactExport({ LabelID, Page: i, PageSize: QUERY_EXPORT_MAX_PAGESIZE })\n            );\n            for (const { Cards, ID } of contacts) {\n                if (signal.aborted) {\n                    return;\n                }\n                try {\n                    const { properties: contactDecrypted = [], errors = [] } = await prepareContact(\n                        { Cards },\n                        { publicKeys, privateKeys }\n                    );\n\n                    if (errors.length) {\n                        throw new Error('Error decrypting contact');\n                    }\n\n                    const contactExported = toICAL(contactDecrypted).toString();\n                    // need to check again for signal.aborted because the abort\n                    // may have taken place during await prepareContact\n                    !signal.aborted && addSuccess((contactsExported) => [...contactsExported, contactExported]);\n                } catch (error) {\n                    // need to check again for signal.aborted because the abort\n                    // may have taken place during await prepareContact\n                    !signal.aborted && addError((contactsNotExported) => [...contactsNotExported, ID]);\n                }\n            }\n        };\n\n        const exportContacts = async (abortController) => {\n            for (let i = 0; i < apiCalls; i++) {\n                // avoid overloading API in the unlikely case exportBatch is too fast\n                await Promise.all([exportBatch(i, abortController), wait(API_SAFE_INTERVAL)]);\n            }\n        };\n\n        exportContacts(abortController).catch((error) => {\n            if (error.name !== 'AbortError') {\n                rest.onClose(); // close the modal; otherwise it is left hanging in there\n                throw error;\n            }\n        });\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    return (\n        <FormModal\n            title={c('Title').t`Exporting contacts`}\n            onSubmit={() => handleSave(contactsExported)}\n            footer={ExportFooter({ loading: contactsExported.length + contactsNotExported.length !== countContacts })}\n            loading={loadingContacts}\n            {...rest}\n        >\n            <Alert>\n                {c('Description')\n                    .t`Decrypting contacts... This may take a few minutes. When the process is completed, you will be able to download the file with all your contacts exported.`}\n            </Alert>\n            <DynamicProgress\n                id=\"progress-export-contacts\"\n                alt=\"contact-loader\"\n                value={percentageProgress(contactsExported.length, contactsNotExported.length, countContacts)}\n                failed={!contactsExported.length}\n                displaySuccess={c('Progress bar description')\n                    .t`${contactsExported.length} out of ${countContacts} contacts successfully exported.`}\n                displayFailed={c('Progress bar description').t`No contacts exported.`}\n            />\n        </FormModal>\n    );\n};\n\nExportModal.propTypes = {\n    onSave: PropTypes.func,\n    contactGroupID: PropTypes.string,\n    userKeysList: PropTypes.array\n};\n\nexport default ExportModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Icon, Button } from 'react-components';\n\nconst MergeRow = ({ loadingUserKeys, style, onMerge, ...rest }) => {\n    const boldText = <b key=\"boldface\">{c('Info').t`Two or more contacts appear to be identical.`}</b>;\n\n    return (\n        <div style={style} className=\"p1 flex flex-nowrap flex-items-center bg-primary color-white\" {...rest}>\n            <div className=\"mr1 flex-item-noshrink\">\n                <Icon name=\"merge\" color=\"white\" />\n            </div>\n            <div className=\"alignleft\">\n                <span className=\"mr0-5\">{c('Info').jt`${boldText} Do you want to merge these contacts now?`}</span>\n                <Button\n                    className=\"pm-button--small pm-button--primary pm-button--whiteborder alignbaseline\"\n                    disabled={loadingUserKeys}\n                    onClick={onMerge}\n                >\n                    {c('Action').t`Merge`}\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nMergeRow.propTypes = {\n    style: PropTypes.object,\n    onMerge: PropTypes.func,\n    loadingUserKeys: PropTypes.bool\n};\n\nexport default MergeRow;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { c, msgid } from 'ttag';\nimport { useModals, PrimaryButton, Button, Icon } from 'react-components';\n\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\nimport importSvg from 'design-system/assets/img/pm-images/contact-import.svg';\nimport exportSvg from 'design-system/assets/img/pm-images/contact-export.svg';\nimport contactGroupsSvg from 'design-system/assets/img/pm-images/contact-groups.svg';\nimport upgradeSvg from 'design-system/assets/img/pm-images/contact-unlock-features.svg';\n\nimport contactGroupCard from 'design-system/assets/img/pm-images/contact-group-card.svg';\n\nimport ContactGroupModal from './ContactGroupModal';\nimport ExportModal from './ExportModal';\nimport MergeRow from './MergeRow';\n\nconst PaidCards = ({ loadingUserKeys, onImport, onExport, onGroups }) => {\n    return (\n        <div className=\"flex flex-nowrap onmobile-flex-column\">\n            <div className=\"bordered-container flex-item-fluid mr1 onmobile-mr0 onmobile-mb1 p1 aligncenter flex flex-column\">\n                <div className=\"flex-item-fluid\">\n                    <img src={importSvg} alt=\"contact-import\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Import contacts`}</div>\n                    <p>{c('Info')\n                        .t`Add contacts to your ProtonMail account by importing them from a CSV or vCard file.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={onImport} disabled={loadingUserKeys}>{c('Action')\n                        .t`Import`}</PrimaryButton>\n                </div>\n            </div>\n            <div className=\"bordered-container flex-item-fluid mr1 onmobile-mr0 onmobile-mb1 p1 aligncenter flex flex-column\">\n                <div className=\"flex-item-fluid\">\n                    <img src={exportSvg} alt=\"contact-export\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Export contacts`}</div>\n                    <p>{c('Info').t`Create a backup of your ProtonMail contacts by exporting them to a vCard file.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={onExport} disabled={loadingUserKeys}>{c('Action')\n                        .t`Export`}</PrimaryButton>\n                </div>\n            </div>\n            <div className=\"bordered-container flex-item-fluid onmobile-mr0 onmobile-mb1 p1 aligncenter\">\n                <div className=\"flex-item-fluid\">\n                    <img src={contactGroupsSvg} alt=\"contact-groups\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Manage groups`}</div>\n                    <p>{c('Info')\n                        .t`Use groups to send email to a list of addresses you regularly communicate with.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={onGroups}>{c('Action').t`Groups`}</PrimaryButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nPaidCards.propTypes = {\n    loadingUserKeys: PropTypes.bool,\n    onImport: PropTypes.func,\n    onExport: PropTypes.func,\n    onGroups: PropTypes.func\n};\n\nconst FreeCards = ({ loadingUserKeys, onImport, onExport }) => {\n    const handleUpgrade = () => redirectTo('/settings/subscription');\n\n    return (\n        <div className=\"flex flex-nowrap onmobile-flex-column\">\n            <div className=\"bordered-container flex-item-fluid mr1 onmobile-mr0 onmobile-mb1 p1 aligncenter flex flex-column\">\n                <div className=\"flex-item-fluid\">\n                    <img src={importSvg} alt=\"contact-import\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Import contacts`}</div>\n                    <p>{c('Info')\n                        .t`Add contacts to your ProtonMail account by importing them from a CSV or vCard file.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={onImport} disabled={loadingUserKeys}>{c('Action')\n                        .t`Import`}</PrimaryButton>\n                </div>\n            </div>\n            <div className=\"bordered-container flex-item-fluid mr1 onmobile-mr0 onmobile-mb1 p1 aligncenter flex flex-column\">\n                <div className=\"flex-item-fluid\">\n                    <img src={exportSvg} alt=\"contact-export\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Export contacts`}</div>\n                    <p>{c('Info').t`Create a backup of your ProtonMail contacts by exporting them to a vCard file.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={onExport} disabled={loadingUserKeys}>{c('Action')\n                        .t`Export`}</PrimaryButton>\n                </div>\n            </div>\n            <div className=\"bordered-container flex-item-fluid onmobile-mr0 onmobile-mb1 p1 aligncenter\">\n                <div className=\"flex-item-fluid\">\n                    <img src={upgradeSvg} alt=\"contact-unlock-features\" className=\"mb1\" />\n                    <div className=\"bold\">{c('Title').t`Unlock features`}</div>\n                    <p>{c('Info')\n                        .t`Upgrade to a paid plan to enable encrypted contact details and manage contact groups.`}</p>\n                </div>\n                <div className=\"flex-item-noshrink p1\">\n                    <PrimaryButton className=\"bold\" onClick={handleUpgrade}>\n                        {c('Action').t`Upgrade`}\n                    </PrimaryButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nFreeCards.propTypes = {\n    loadingUserKeys: PropTypes.bool,\n    onImport: PropTypes.func,\n    onExport: PropTypes.func\n};\n\nconst ContactPlaceholder = ({\n    totalContacts = 0,\n    selectedContacts = 0,\n    totalContactsInGroup = 0,\n    contactGroupID,\n    contactGroupName,\n    user,\n    userKeysList,\n    loadingUserKeys,\n    onUncheck,\n    canMerge,\n    onMerge,\n    onImport,\n    onExport,\n    onGroups\n}) => {\n    const { hasPaidMail } = user;\n    const { createModal } = useModals();\n\n    if (selectedContacts) {\n        const totalContactsText = (\n            <b key=\"total-contacts\">\n                {c('Info').ngettext(msgid`1 contact`, `${selectedContacts} contacts`, selectedContacts)}\n            </b>\n        );\n\n        return (\n            <div className=\"p2 view-column-detail flex flex-item-fluid scroll-if-needed\">\n                <div className=\"aligncenter center mbauto mtauto\">\n                    <div className=\"mb2\">{c('Info').jt`You selected ${totalContactsText} from your address book.`}</div>\n                    <div className=\"aligncenter mb2\">\n                        <img src={contactGroupCard} alt=\"contact-group-card\" />\n                    </div>\n                    <div className=\"mb2\">\n                        <Button className=\"mr1\" onClick={onUncheck}>\n                            {c('Action').ngettext(msgid`Deselect`, `Deselect all`, selectedContacts)}\n                        </Button>\n                        {/* <Button disabled={loadingUserKeys}>{c('Action').t`Export`}</Button> */}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    if (contactGroupID) {\n        const totalContactsText = (\n            <b key=\"total-contacts\">\n                {totalContactsInGroup === 1 ? c('Info').t`1 contact` : c('Info').t`${totalContactsInGroup} contacts`}\n            </b>\n        );\n\n        const handleEdit = () => createModal(<ContactGroupModal contactGroupID={contactGroupID} />);\n        const handleExport = () =>\n            createModal(<ExportModal contactGroupID={contactGroupID} userKeysList={userKeysList} />);\n\n        return (\n            <div className=\"p2 view-column-detail flex flex-item-fluid scroll-if-needed\">\n                <div className=\"aligncenter center mbauto mtauto\">\n                    <h1 className=\"ellipsis lh-standard\">{contactGroupName}</h1>\n                    <div className=\"mb2\">{c('Info').jt`You have ${totalContactsText} in this group.`}</div>\n                    <div className=\"aligncenter mb2\">\n                        <img src={contactGroupCard} alt=\"contact-group-card\" />\n                    </div>\n                    <div className=\"mb2\">\n                        <Button className=\"mr1\" onClick={handleEdit}>{c('Action').t`Edit`}</Button>\n                        {!!totalContactsInGroup && (\n                            <Button onClick={handleExport} disabled={loadingUserKeys}>\n                                {c('Action').t`Export`}\n                            </Button>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    const boldTotalContacts =\n        totalContacts === 1 ? (\n            <b key=\"boldface\">{c('Info').t`one contact`}</b>\n        ) : (\n            <b key=\"boldface\">{c('Info').t`${totalContacts} contacts`}</b>\n        );\n    const navigateTo = <b key=\"boldface-2\">{c('Info').t`Settings > General > Contacts`}</b>;\n\n    return (\n        <div className=\"p2 view-column-detail flex-item-fluid scroll-if-needed\">\n            <div className=\"aligncenter mt2\">\n                <h1>{c('Title').t`Contacts`}</h1>\n                <div className=\"mb2\">{c('Info').jt`You have ${boldTotalContacts} in your address book`}</div>\n                <div className=\"mb1\">\n                    {c('Info')\n                        .jt`You can decide whether or not contacts are automatically added to your address book by navigating to ${navigateTo}`}\n                </div>\n                <div className=\"mb1\">\n                    <Link to=\"/contacts/settings\" className=\"inline-flex flex-nowrap nodecoration\">\n                        <Icon className=\"mr0-5 flex-item-centered-vert fill-primary\" name=\"settings-master\" />\n                        <span>{c('Title').t`Settings`}</span>\n                    </Link>\n                </div>\n\n                {canMerge && (\n                    <div className=\"mb2\">\n                        <MergeRow loadingUserKeys={loadingUserKeys} onMerge={onMerge} />\n                    </div>\n                )}\n            </div>\n            {hasPaidMail ? (\n                <PaidCards\n                    userKeysList={userKeysList}\n                    loadingUserKeys={loadingUserKeys}\n                    onImport={onImport}\n                    onExport={() => onExport()}\n                    onGroups={onGroups}\n                />\n            ) : (\n                <FreeCards loadingUserKeys={loadingUserKeys} onImport={onImport} onExport={() => onExport()} />\n            )}\n        </div>\n    );\n};\n\nContactPlaceholder.propTypes = {\n    totalContacts: PropTypes.number,\n    totalContactsInGroup: PropTypes.number,\n    selectedContacts: PropTypes.number,\n    contactGroupID: PropTypes.string,\n    contactGroupName: PropTypes.string,\n    user: PropTypes.object.isRequired,\n    userKeysList: PropTypes.array,\n    loadingUserKeys: PropTypes.bool,\n    onUncheck: PropTypes.func,\n    canMerge: PropTypes.bool,\n    onMerge: PropTypes.func,\n    onImport: PropTypes.func,\n    onExport: PropTypes.func,\n    onGroups: PropTypes.func\n};\n\nexport default ContactPlaceholder;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Checkbox, ToolbarSeparator } from 'react-components';\nimport { Link } from 'react-router-dom';\nimport { c } from 'ttag';\nimport ContactGroupDropdown from './ContactGroupDropdown';\n\nconst ContactToolbar = ({\n    user,\n    onCheck,\n    onDelete,\n    checked = false,\n    activeIDs = [],\n    contactEmailsMap = {},\n    simplified = false\n}) => {\n    const handleCheck = ({ target }) => onCheck(target.checked);\n\n    const contactEmailsSelected = useMemo(() => {\n        return activeIDs.reduce((acc, ID) => {\n            if (!contactEmailsMap[ID]) {\n                return acc;\n            }\n            return acc.concat(contactEmailsMap[ID]);\n        }, []);\n    }, [activeIDs, contactEmailsMap]);\n\n    if (simplified) {\n        return (\n            <div className=\"toolbar flex noprint\">\n                <Link to=\"/contacts\" className=\"toolbar-button\">\n                    <Icon name=\"arrow-left\" className=\"toolbar-icon mauto\" />\n                </Link>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"toolbar flex noprint\">\n            <Checkbox className=\"flex pm-select-all ml0-75 pl1 pr1\" checked={checked} onChange={handleCheck} />\n            <ToolbarSeparator />\n            <button\n                type=\"button\"\n                title={c('Tooltip').t`Delete`}\n                className=\"toolbar-button\"\n                onClick={onDelete}\n                disabled={!activeIDs.length}\n            >\n                <Icon name=\"delete\" className=\"toolbar-icon mauto\" />\n            </button>\n            {user.hasPaidMail ? (\n                <ContactGroupDropdown\n                    className=\"toolbar-button toolbar-button--dropdown\"\n                    disabled={!contactEmailsSelected.length}\n                    contactEmails={contactEmailsSelected}\n                    forToolbar={true}\n                >\n                    <Icon name=\"contacts-groups\" className=\"toolbar-icon mauto\" />\n                </ContactGroupDropdown>\n            ) : null}\n        </div>\n    );\n};\n\nContactToolbar.propTypes = {\n    checked: PropTypes.bool,\n    user: PropTypes.object,\n    onCheck: PropTypes.func,\n    onDelete: PropTypes.func,\n    activeIDs: PropTypes.array,\n    contactEmailsMap: PropTypes.object,\n    simplified: PropTypes.bool\n};\n\nexport default ContactToolbar;\n","import React from 'react';\nimport { c } from 'ttag';\nimport PropTypes from 'prop-types';\nimport {\n    Hamburger,\n    MainLogo,\n    Searchbox,\n    UpgradeButton,\n    useUser,\n    SearchDropdown,\n    TopNavbar,\n    TopNavbarLink,\n    Icon,\n    FloatingButton,\n    useModals\n} from 'react-components';\n\nimport ContactModal from '../components/ContactModal';\n\nconst PrivateHeader = ({\n    title,\n    search,\n    onSearch,\n    onClearSearch,\n    expanded,\n    onToggleExpand,\n    inSettings = false,\n    isNarrow = false,\n    history\n}) => {\n    const [{ hasPaidMail }] = useUser();\n    const { createModal } = useModals();\n\n    return (\n        <header className=\"header flex flex-items-center flex-nowrap reset4print\">\n            <MainLogo url=\"/contacts\" className=\"nomobile\" />\n            <Hamburger expanded={expanded} onToggle={onToggleExpand} />\n            {title && isNarrow ? <span className=\"h3 mb0 ellipsis lh-standard\">{title}</span> : null}\n            {inSettings || isNarrow ? null : (\n                <Searchbox placeholder={c('Placeholder').t`Search`} value={search} onChange={onSearch} />\n            )}\n            <TopNavbar>\n                {hasPaidMail || isNarrow ? null : <UpgradeButton external={true} />}\n                {isNarrow && !inSettings ? null : (\n                    <TopNavbarLink\n                        className=\"nomobile\"\n                        to=\"/contacts\"\n                        icon=\"contacts\"\n                        text={c('Title').t`Contacts`}\n                        aria-current={!inSettings}\n                    />\n                )}\n                {!inSettings && isNarrow ? (\n                    <SearchDropdown\n                        content={\n                            <Icon\n                                name=\"search\"\n                                size={25}\n                                className=\"topnav-icon mr0-5 flex-item-centered-vert fill-white\"\n                            />\n                        }\n                        placeholder={c('Placeholder').t`Search contacts`}\n                        search={search}\n                        onSearch={onSearch}\n                        hasCaret={false}\n                    />\n                ) : null}\n                {isNarrow && inSettings ? null : (\n                    <TopNavbarLink\n                        to=\"/contacts/settings/general\"\n                        icon=\"settings-master\"\n                        text={c('Title').t`Settings`}\n                        aria-current={inSettings}\n                    />\n                )}\n            </TopNavbar>\n            {isNarrow && !inSettings ? (\n                <FloatingButton\n                    onClick={() => createModal(<ContactModal history={history} onAdd={onClearSearch} />)}\n                    icon=\"plus\"\n                />\n            ) : null}\n        </header>\n    );\n};\n\nPrivateHeader.propTypes = {\n    title: PropTypes.string,\n    search: PropTypes.string,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func,\n    onSearch: PropTypes.func,\n    onClearSeach: PropTypes.func,\n    inSettings: PropTypes.bool,\n    isNarrow: PropTypes.bool,\n    history: PropTypes.object\n};\n\nexport default PrivateHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { ConfirmModal, Alert } from 'react-components';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\n\nconst UpgradeModal = ({ onConfirm, onClose, ...rest }) => {\n    return (\n        <ConfirmModal\n            title={c('Title').t`Upgrade required`}\n            onConfirm={() => {\n                redirectTo('/settings/subscription');\n                onConfirm && onConfirm();\n            }}\n            onClose={onClose}\n            confirm={c('Action').t`Upgrade`}\n            {...rest}\n        >\n            <Alert type=\"warning\">{c('Warning').t`This feature requires a paid Proton account`}</Alert>\n        </ConfirmModal>\n    );\n};\n\nUpgradeModal.propTypes = {\n    onConfirm: PropTypes.func,\n    onClose: PropTypes.func\n};\n\nexport default UpgradeModal;\n","import React from 'react';\nimport { useModals, PrimaryButton, Sidebar } from 'react-components';\nimport { c } from 'ttag';\nimport PropTypes from 'prop-types';\n\nimport ContactModal from '../components/ContactModal';\nimport ImportModal from '../components/import/ImportModal';\nimport ExportModal from '../components/ExportModal';\nimport UpgradeModal from '../components/UpgradeModal';\n\nconst PrivateSidebar = ({\n    url,\n    user,\n    userKeysList = [],\n    loadingUserKeys,\n    totalContacts,\n    contactGroups = [],\n    expanded,\n    onToggleExpand,\n    onClearSearch,\n    history\n}) => {\n    const { hasPaidMail } = user;\n    const { createModal } = useModals();\n\n    const list = [\n        {\n            icon: 'contacts',\n            isActive(match, location) {\n                if (!match) {\n                    return false;\n                }\n                const params = new URLSearchParams(location.search);\n                const contactGroupID = params.get('contactGroupID');\n                return !contactGroupID;\n            },\n            text: c('Link').t`Contacts`,\n            link: '/contacts'\n        },\n        !loadingUserKeys && {\n            type: 'button',\n            className: 'alignleft',\n            icon: 'import',\n            text: c('Link').t`Import`,\n            onClick() {\n                createModal(<ImportModal userKeysList={userKeysList} />);\n            }\n        },\n        totalContacts &&\n            !loadingUserKeys && {\n                type: 'button',\n                className: 'alignleft',\n                icon: 'export',\n                text: c('Link').t`Export all`,\n                onClick() {\n                    createModal(<ExportModal userKeysList={userKeysList} />);\n                }\n            },\n        {\n            type: 'button',\n            className: 'alignleft',\n            icon: 'settings-singular',\n            text: c('Link').t`Groups`,\n            onClick() {\n                if (!hasPaidMail) {\n                    return createModal(<UpgradeModal />);\n                }\n                history.push('/contacts/settings/groups');\n            }\n        }\n    ];\n\n    if (hasPaidMail) {\n        list.push(\n            ...contactGroups.map(({ Name: text, Color: color, ID: contactGroupID }) => ({\n                icon: 'contacts-groups',\n                isActive(_match, location) {\n                    const params = new URLSearchParams(location.search);\n                    return params.get('contactGroupID') === contactGroupID;\n                },\n                color,\n                text,\n                link: `/contacts?contactGroupID=${contactGroupID}`\n            }))\n        );\n    }\n\n    const mobileLinks = [\n        { to: '/inbox', icon: 'protonmail', external: true, current: false },\n        { to: '/contacts', icon: 'protoncontacts', external: false, current: true }\n    ];\n\n    return (\n        <Sidebar\n            expanded={expanded}\n            onToggleExpand={onToggleExpand}\n            url={url}\n            list={list.filter(Boolean)}\n            mobileLinks={mobileLinks}\n        >\n            <div className=\"pl1 pr1 nomobile\">\n                <PrimaryButton\n                    className=\"pm-button--large bold mt0-25 w100\"\n                    onClick={() => createModal(<ContactModal history={history} onAdd={onClearSearch} />)}\n                >{c('Action').t`Add contact`}</PrimaryButton>\n            </div>\n        </Sidebar>\n    );\n};\n\nPrivateSidebar.propTypes = {\n    url: PropTypes.string,\n    user: PropTypes.object,\n    totalContacts: PropTypes.number,\n    contactGroups: PropTypes.array,\n    expanded: PropTypes.bool,\n    onToggleExpand: PropTypes.func,\n    onClearSearch: PropTypes.func,\n    userKeysList: PropTypes.array,\n    loadingUserKeys: PropTypes.bool,\n    history: PropTypes.object.isRequired\n};\n\nexport default PrivateSidebar;\n","import { move } from 'proton-shared/lib/helpers/array';\n\n/**\n * Re-order elements in an array inside a group of arrays\n * @param {Array<Array>} collection\n * @param {Number} groupIndex\n * @param {Object<Number>} indices     { oldIndex, newIndex }\n *\n * @return {Array<Array>}\n */\nexport const moveInGroup = (collection, groupIndex, { oldIndex, newIndex }) => {\n    return collection.map((group, i) => {\n        if (i === groupIndex) {\n            return move(group, oldIndex, newIndex);\n        }\n        return group;\n    });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Block, Icon, classnames } from 'react-components';\n\nimport { formatAdr } from '../../helpers/property';\nimport { getFirstValue, getAllValues } from '../../helpers/properties';\nimport UpsellFree from '../../components/UpsellFree';\n\nconst MergedContactSummary = ({ properties = [], hasPaidMail }) => {\n    const name = getFirstValue(properties, 'fn');\n    const emails = getAllValues(properties, 'email');\n    const tels = getAllValues(properties, 'tel');\n    const adrs = getAllValues(properties, 'adr');\n    const orgs = getAllValues(properties, 'org');\n    const notes = getAllValues(properties, 'note');\n\n    const summary = [\n        [{ prop: 'Name', icon: 'contact', component: name }],\n        emails.length &&\n            emails.map((email) => ({\n                prop: 'Email',\n                icon: 'email',\n                component: <a href={`mailto:${email}`}>{email}</a>\n            })),\n        hasPaidMail &&\n            tels.length &&\n            tels.map((tel) => ({ prop: 'Phone', icon: 'phone', component: <a href={`tel:${tel}`}>{tel}</a> })),\n        hasPaidMail &&\n            adrs.length &&\n            adrs.map((adr) => ({ prop: 'Address', icon: 'address', component: formatAdr(adr) })),\n        hasPaidMail &&\n            orgs.length &&\n            orgs.map((org) => ({ prop: 'Organization', icon: 'organization', component: org })),\n        hasPaidMail && notes.length && notes.map((note) => ({ prop: 'Note', icon: 'note', component: note }))\n    ].filter(Boolean);\n\n    return (\n        <>\n            <Block className=\"flex flex-nowrap\">\n                <div className=\"flex flex-column flex-nowrap mr2\">\n                    {summary.map((items) => (\n                        <div key={items[0].prop} className=\"mb1\">\n                            {items.map(({ prop, icon }, index) => (\n                                <div key={`icon-${index}`} className=\"flex flex-items-center flex-nowrap\">\n                                    <Icon\n                                        name={icon}\n                                        className={classnames(['mr0-5 flex-item-noshrink', index && 'nonvisible'])}\n                                    />\n                                    <span>{prop}</span>\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"flex flex-column\">\n                    {summary.map((items) => (\n                        <div key={items[0].prop} className=\"mb1\">\n                            {items.map(({ component }, index) => (\n                                <div key={`icon-${index}`} className=\"flex flex-items-center mw100 ellipsis\">\n                                    {component}\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </Block>\n            {!hasPaidMail && !![...tels, ...adrs, ...orgs, ...notes].length && (\n                <Block>\n                    <UpsellFree />\n                </Block>\n            )}\n        </>\n    );\n};\n\nMergedContactSummary.propTypes = {\n    properties: PropTypes.array,\n    hasPaidMail: PropTypes.bool\n};\n\nexport default MergedContactSummary;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useApi, useLoading, Loader, FormModal, PrimaryButton } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { getContact } from 'proton-shared/lib/api/contacts';\n\nimport { FAIL_TO_LOAD } from '../../constants';\nimport { prepareContact } from '../../helpers/decrypt';\n\nimport ContactViewErrors from '../ContactViewErrors';\nimport MergedContactSummary from './MergedContactSummary';\n\nconst ContactDetails = ({ contactID, userKeysList, hasPaidMail, ...rest }) => {\n    const api = useApi();\n    const [loading, withLoading] = useLoading(true);\n    const [model, setModel] = useState({ properties: [], errors: [] });\n\n    useEffect(() => {\n        const request = async () => {\n            const { Contact } = await api(getContact(contactID));\n            const { properties, errors } = await prepareContact(Contact, splitKeys(userKeysList));\n            setModel({ properties, errors });\n        };\n\n        try {\n            withLoading(request());\n        } catch (error) {\n            setModel({ ...model, errors: [FAIL_TO_LOAD] });\n        }\n    }, []);\n\n    return (\n        <FormModal\n            small\n            title={c('Title').t`Contact Details`}\n            onSubmit={rest.onClose}\n            footer={<PrimaryButton type=\"submit\">{c('Action').t`Close`}</PrimaryButton>}\n            {...rest}\n        >\n            {loading ? (\n                <Loader />\n            ) : (\n                <>\n                    <ContactViewErrors errors={model.errors} />\n                    <MergedContactSummary properties={model.properties} hasPaidMail={hasPaidMail} />\n                </>\n            )}\n        </FormModal>\n    );\n};\n\nContactDetails.propTypes = {\n    contactID: PropTypes.string,\n    userKeysList: PropTypes.array,\n    hasPaidMail: PropTypes.bool\n};\n\nexport default ContactDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from 'react-components';\n\nconst MergeErrorContent = ({ error }) => {\n    return (\n        <div className=\"bg-global-attention p1\">\n            <Icon name=\"attention\" className=\"mr1\" />\n            <span className=\"mr1\">{error}</span>\n        </div>\n    );\n};\n\nMergeErrorContent.propTypes = {\n    error: PropTypes.string\n};\n\nexport default MergeErrorContent;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useApi, useLoading, Alert } from 'react-components';\n\nimport { getContact, addContacts, deleteContacts } from 'proton-shared/lib/api/contacts';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { wait } from 'proton-shared/lib/helpers/promise';\nimport { chunk } from 'proton-shared/lib/helpers/array';\nimport { prepareContact as decrypt } from '../../helpers/decrypt';\nimport { prepareContact as encrypt } from '../../helpers/encrypt';\nimport { merge } from '../../helpers/merge';\nimport { splitContacts } from '../../helpers/import';\nimport { combineProgress } from '../../helpers/progress';\nimport { OVERWRITE, CATEGORIES, API_SAFE_INTERVAL, ADD_CONTACTS_MAX_SIZE } from '../../constants';\nimport { API_CODES } from 'proton-shared/lib/constants';\n\nimport DynamicProgress from '../DynamicProgress';\n\nconst { OVERWRITE_CONTACT } = OVERWRITE;\nconst { INCLUDE, IGNORE } = CATEGORIES;\nconst { SINGLE_SUCCESS } = API_CODES;\n\nconst MergingModalContent = ({\n    contactID,\n    userKeysList,\n    alreadyMerged,\n    beMergedModel = {},\n    beDeletedModel = {},\n    totalBeMerged = 0,\n    onFinish,\n    history,\n    location\n}) => {\n    const api = useApi();\n    const { privateKeys, publicKeys } = useMemo(() => splitKeys(userKeysList), []);\n\n    const [loading, withLoading] = useLoading(true);\n    const [model, setModel] = useState({\n        mergedAndEncrypted: [],\n        failedOnMergeAndEncrypt: [],\n        submitted: [],\n        failedOnSubmit: []\n    });\n\n    useEffect(() => {\n        // Prepare api for allowing cancellation in the middle of the merge\n        const abortController = new AbortController();\n        const apiWithAbort = (config) => api({ ...config, signal: abortController.signal });\n\n        /**\n         * Get a contact from its ID and decrypt it. Return contact as a list of properties\n         */\n        const getDecryptedContact = async (ID, { signal }) => {\n            if (signal.aborted) {\n                return [];\n            }\n            const { Contact } = await apiWithAbort(getContact(ID));\n            const { properties, errors: contactErrors } = await decrypt(Contact, {\n                privateKeys,\n                publicKeys\n            });\n            if (contactErrors.length) {\n                throw new Error(`Error decrypting contact ${ID}`);\n            }\n            return properties;\n        };\n\n        /**\n         * Get and decrypt a group of contacts to be merged. Return array of decrypted contacts\n         */\n        const getDecryptedGroup = async (groupIDs = [], { signal }) => {\n            const decryptedGroup = [];\n            for (const ID of groupIDs) {\n                // avoid overloading API in case getDecryptedContact is too fast\n                const [decryptedContact] = await Promise.all([\n                    getDecryptedContact(ID, { signal }),\n                    wait(API_SAFE_INTERVAL)\n                ]);\n                decryptedGroup.push(decryptedContact);\n            }\n            return decryptedGroup;\n        };\n\n        /**\n         * Encrypt a contact already merged. Useful for the case of `preview merge`\n         */\n        const encryptAlreadyMerged = async ({ signal }) => {\n            if (signal.aborted) {\n                return {};\n            }\n            // beMergedModel only contains one entry in this case\n            const [groupIDs] = Object.values(beMergedModel);\n            const beSubmittedContacts = [];\n            try {\n                const encryptedMergedContact = await encrypt(alreadyMerged, {\n                    privateKey: privateKeys[0],\n                    publicKey: publicKeys[0]\n                });\n                beSubmittedContacts.push({ contact: encryptedMergedContact });\n\n                !signal.aborted &&\n                    setModel((model) => ({ ...model, mergedAndEncrypted: [...model.mergedAndEncrypted, ...groupIDs] }));\n            } catch {\n                !signal.aborted &&\n                    setModel((model) => ({\n                        ...model,\n                        failedOnMergeAndEncrypt: [...model.failedOnMergeAndEncrypt, ...groupIDs]\n                    }));\n            }\n            return beSubmittedContacts;\n        };\n\n        /**\n         * Merge groups of contacts characterized by their ID. Return the encrypted merged contacts\n         * to be submitted plus the IDs of the contacts to be deleted after the merge\n         */\n        const mergeAndEncrypt = async ({ signal }) => {\n            const beSubmittedContacts = [];\n            for (const groupIDs of Object.values(beMergedModel)) {\n                if (signal.aborted) {\n                    return {};\n                }\n                try {\n                    const decryptedGroup = await getDecryptedGroup(groupIDs, { signal });\n                    const encryptedMergedContact = await encrypt(merge(decryptedGroup), {\n                        privateKey: privateKeys[0],\n                        publicKey: publicKeys[0]\n                    });\n                    beSubmittedContacts.push({ contact: encryptedMergedContact });\n                    !signal.aborted &&\n                        setModel((model) => ({\n                            ...model,\n                            mergedAndEncrypted: [...model.mergedAndEncrypted, ...groupIDs]\n                        }));\n                } catch {\n                    !signal.aborted &&\n                        setModel((model) => ({\n                            ...model,\n                            failedOnMergeAndEncrypt: [...model.failedOnMergeAndEncrypt, ...groupIDs]\n                        }));\n                }\n            }\n            return beSubmittedContacts;\n        };\n\n        /**\n         * Submit a batch of merged contacts to the API\n         */\n        const submitBatch = async ({ contacts = [], labels }, { signal }) => {\n            if (signal.aborted || !contacts.length) {\n                return;\n            }\n            const beDeletedBatchIDs = [];\n            const responses = (await apiWithAbort(\n                addContacts({\n                    Contacts: contacts.map(({ contact }) => contact),\n                    Overwrite: OVERWRITE_CONTACT,\n                    Labels: labels\n                })\n            )).Responses.map(({ Response }) => Response);\n\n            if (signal.aborted) {\n                return;\n            }\n\n            for (const {\n                Code,\n                Contact: { ID }\n            } of responses) {\n                const groupIDs = beMergedModel[ID];\n                const beDeletedAfterMergeIDs = groupIDs.slice(1);\n                if (Code === SINGLE_SUCCESS) {\n                    !signal.aborted &&\n                        setModel((model) => ({ ...model, submitted: [...model.submitted, ...groupIDs] }));\n                    beDeletedBatchIDs.push(...beDeletedAfterMergeIDs);\n                    if (!signal.aborted && beDeletedAfterMergeIDs.includes(contactID)) {\n                        // if the current contact is merged, update URL\n                        history.replace({ ...location, state: { ignoreClose: true }, pathname: `/contacts/${ID}` });\n                    }\n                } else {\n                    !signal.aborted &&\n                        setModel((model) => ({ ...model, failedOnSubmit: [...model.failedOnSubmit, ...groupIDs] }));\n                }\n            }\n            !signal.aborted && !!beDeletedBatchIDs.length && (await apiWithAbort(deleteContacts(beDeletedBatchIDs)));\n        };\n\n        /**\n         * Submit all merged contacts to the API\n         */\n        const submitContacts = async ({ contacts = [], labels }, { signal }) => {\n            if (signal.aborted) {\n                return;\n            }\n            // divide contacts and indexMap in batches\n            const contactBatches = chunk(contacts, ADD_CONTACTS_MAX_SIZE);\n            const apiCalls = contactBatches.length;\n\n            for (let i = 0; i < apiCalls; i++) {\n                // avoid overloading API in the unlikely case submitBatch is too fast\n                await Promise.all([\n                    submitBatch({ contacts: contactBatches[i], labels }, { signal }),\n                    wait(API_SAFE_INTERVAL)\n                ]);\n            }\n        };\n\n        /**\n         * Delete contacts marked for deletion\n         */\n        const deleteMarkedForDeletion = async ({ signal }) => {\n            const beDeletedIDs = Object.keys(beDeletedModel);\n            if (!signal.aborted && !!beDeletedIDs.length) {\n                await apiWithAbort(deleteContacts(beDeletedIDs));\n            }\n            if (!signal.aborted && beDeletedIDs.includes(contactID)) {\n                history.replace({\n                    ...location,\n                    state: { ignoreClose: true },\n                    pathname: `/contacts/${beDeletedModel[contactID]}`\n                });\n            }\n        };\n\n        /**\n         * All steps of the merge process\n         */\n        const mergeContacts = async ({ signal }) => {\n            const beSubmittedContacts = !alreadyMerged\n                ? await mergeAndEncrypt({ signal })\n                : await encryptAlreadyMerged({ signal });\n            const { withCategories, withoutCategories } = splitContacts(beSubmittedContacts);\n            await submitContacts({ contacts: withCategories, labels: INCLUDE }, { signal });\n            await submitContacts({ contacts: withoutCategories, labels: IGNORE }, { signal });\n            await deleteMarkedForDeletion({ signal });\n            !signal.aborted && (await onFinish());\n        };\n\n        withLoading(mergeContacts(abortController));\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    // Allocate 90% of the progress to merging and encrypting, 10% to sending to API\n    const combinedProgress = combineProgress([\n        {\n            allocated: 0.9,\n            successful: model.mergedAndEncrypted.length,\n            failed: model.failedOnMergeAndEncrypt.length,\n            total: totalBeMerged\n        },\n        {\n            allocated: 0.1,\n            successful: model.submitted.length,\n            failed: model.failedOnSubmit.length,\n            total: totalBeMerged - model.failedOnMergeAndEncrypt.length\n        }\n    ]);\n\n    return (\n        <>\n            <Alert>\n                {c('Description')\n                    .t`Merging contacts... This may take a few minutes. When the process is completed, you can close this modal.`}\n            </Alert>\n            <DynamicProgress\n                id=\"progress-merge-contacts\"\n                alt=\"contact-loader\"\n                value={combinedProgress}\n                failed={!model.submitted.length}\n                displaySuccess={c('Progress bar description')\n                    .t`${model.submitted.length} out of ${totalBeMerged} contacts successfully merged.`}\n                displayFailed={c('Progress bar description').t`No contacts merged.`}\n                endPostponed={loading}\n            />\n        </>\n    );\n};\n\nMergingModalContent.propTypes = {\n    contactID: PropTypes.string,\n    userKeysList: PropTypes.array.isRequired,\n    alreadyMerged: PropTypes.arrayOf(PropTypes.object),\n    beMergedModel: PropTypes.shape({ ID: PropTypes.arrayOf(PropTypes.string) }),\n    beDeletedModel: PropTypes.shape({ ID: PropTypes.string }),\n    totalBeMerged: PropTypes.number,\n    onFinish: PropTypes.func,\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nexport default withRouter(MergingModalContent);\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useApi, useLoading, useEventManager, Loader, FormModal, PrimaryButton, ResetButton } from 'react-components';\nimport { splitKeys } from 'proton-shared/lib/keys/keys';\nimport { getContact } from 'proton-shared/lib/api/contacts';\n\nimport { prepareContact } from '../../helpers/decrypt';\nimport { merge } from '../../helpers/merge';\n\nimport MergeErrorContent from './MergeErrorContent';\nimport MergedContactSummary from './MergedContactSummary';\nimport MergingModalContent from './MergingModalContent';\n\nconst MergeContactPreview = ({\n    contactID,\n    userKeysList,\n    hasPaidMail,\n    beMergedModel,\n    beDeletedModel,\n    updateModel,\n    ...rest\n}) => {\n    const { call } = useEventManager();\n    const api = useApi();\n    const { privateKeys, publicKeys } = useMemo(() => splitKeys(userKeysList), []);\n\n    const [loading, withLoading] = useLoading(true);\n    const [isMerging, setIsMerging] = useState(false);\n    const [mergeFinished, setMergeFinished] = useState(false);\n    const [model, setModel] = useState({});\n\n    const [beMergedIDs] = Object.values(beMergedModel);\n    const beDeletedIDs = Object.keys(beDeletedModel);\n\n    const handleRemoveMerged = () => {\n        const beRemovedIDs = beMergedIDs.slice(1).concat(beDeletedIDs);\n        updateModel((model) => ({\n            ...model,\n            orderedContacts: model.orderedContacts\n                .map((group) => group.filter(({ ID }) => !beRemovedIDs.includes(ID)))\n                .filter((group) => group.length > 1)\n        }));\n    };\n\n    useEffect(() => {\n        const mergeContacts = async () => {\n            try {\n                const beMergedContacts = [];\n                for (const ID of beMergedIDs) {\n                    const { Contact } = await api(getContact(ID));\n                    const { properties, errors } = await prepareContact(Contact, { privateKeys, publicKeys });\n                    if (errors.length) {\n                        setModel({ ...model, errorOnLoad: true });\n                        throw new Error('Error decrypting contact');\n                    }\n                    beMergedContacts.push(properties);\n                }\n                setModel({ ...model, mergedContact: merge(beMergedContacts) });\n            } catch {\n                setModel({ ...model, errorOnMerge: true });\n            }\n        };\n\n        withLoading(mergeContacts());\n    }, []);\n\n    const { content, ...modalProps } = (() => {\n        // Display preview\n        if (!isMerging) {\n            const submit = (\n                <PrimaryButton type=\"submit\" disabled={!model.mergedContact}>\n                    {c('Action').t`Merge`}\n                </PrimaryButton>\n            );\n            const content = (() => {\n                if (loading) {\n                    return <Loader />;\n                }\n                if (model.errorOnLoad || model.errorOnMerge) {\n                    const error = model.errorOnLoad\n                        ? c('Warning')\n                              .t`Some of the contacts to be merged display errors. Please review them individually`\n                        : c('Warning').t`Contacts could not be merged`;\n\n                    return <MergeErrorContent error={error} />;\n                }\n\n                return <MergedContactSummary properties={model.mergedContact} hasPaidMail={hasPaidMail} />;\n            })();\n\n            const handleSubmit = () => setIsMerging(true);\n\n            return {\n                content,\n                title: c('Title').t`Contact Details`,\n                submit,\n                onSubmit: handleSubmit,\n                ...rest\n            };\n        }\n\n        // Display progress bar while merging contacts\n        const close = !mergeFinished && <ResetButton>{c('Action').t`Cancel`}</ResetButton>;\n        const submit = (\n            <PrimaryButton type=\"submit\" loading={!mergeFinished}>\n                {c('Action').t`Close`}\n            </PrimaryButton>\n        );\n\n        const handleFinish = async () => {\n            handleRemoveMerged();\n            await call();\n            setMergeFinished(true);\n        };\n\n        return {\n            title: c('Title').t`Merging contacts`,\n            hasClose: false,\n            content: (\n                <MergingModalContent\n                    contactID={contactID}\n                    userKeysList={userKeysList}\n                    alreadyMerged={model.mergedContact}\n                    beMergedModel={beMergedModel}\n                    beDeletedModel={beDeletedModel}\n                    totalBeMerged={beMergedIDs.length}\n                    onFinish={handleFinish}\n                />\n            ),\n            close,\n            submit,\n            onSubmit: rest.onClose,\n            ...rest\n        };\n    })();\n\n    return <FormModal {...modalProps}>{content}</FormModal>;\n};\n\nMergeContactPreview.propTypes = {\n    contactID: PropTypes.string,\n    userKeysList: PropTypes.array.isRequired,\n    hasPaidMail: PropTypes.bool,\n    beMergedModel: PropTypes.shape({ ID: PropTypes.arrayOf(PropTypes.string) }),\n    beDeletedModel: PropTypes.shape({ ID: PropTypes.string }),\n    updateModel: PropTypes.func\n};\n\nexport default MergeContactPreview;\n","export const opaqueClassName = (greyedOut) => (greyedOut ? 'opacity-50' : '');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, classnames } from 'react-components';\n\nimport { opaqueClassName } from '../../helpers/css';\n\nconst NameTableCell = ({ name, contactID, highlightedID, checked, deleted, greyedOut, onToggle }) => {\n    const handleToggle = () => onToggle(contactID);\n\n    return (\n        <div className=\"flex flex-nowrap flex-items-center\">\n            <Checkbox\n                checked={checked}\n                onChange={handleToggle}\n                className={`flex flex-items-center flex-item-noshrink mr0-5 ${deleted ? 'nonvisible' : ''}`}\n            />\n            <span\n                className={classnames([\n                    'mw100',\n                    'inbl',\n                    'ellipsis',\n                    opaqueClassName(greyedOut),\n                    contactID === highlightedID && 'bold'\n                ])}\n            >\n                {name}\n            </span>\n        </div>\n    );\n};\n\nNameTableCell.propTypes = {\n    contactID: PropTypes.string.isRequired,\n    highlightedID: PropTypes.string,\n    checked: PropTypes.bool,\n    deleted: PropTypes.bool,\n    greyedOut: PropTypes.bool,\n    name: PropTypes.string,\n    onToggle: PropTypes.func\n};\n\nexport default NameTableCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { classnames } from 'react-components';\n\nimport { opaqueClassName } from '../../helpers/css';\n\nconst EmailsTableCell = ({ contactID, emails = [], highlightedID, greyedOut }) => {\n    return (\n        <div\n            className={classnames([\n                'flex',\n                'flex-items-center',\n                'mw100',\n                opaqueClassName(greyedOut),\n                contactID === highlightedID && 'bold'\n            ])}\n        >\n            <span className=\"inbl ellipsis\">{emails.map((email) => `<${email}>`).join(', ')}</span>\n        </div>\n    );\n};\n\nEmailsTableCell.propTypes = {\n    emails: PropTypes.arrayOf(PropTypes.string),\n    contactID: PropTypes.string.isRequired,\n    highlightedID: PropTypes.string,\n    greyedOut: PropTypes.bool\n};\n\nexport default EmailsTableCell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { OrderableTableBody, OrderableTableRow, TableRow, DropdownActions } from 'react-components';\n\nimport NameTableCell from './NameTableCell';\nimport EmailsTableCell from './EmailsTableCell';\n\nconst MergeTableBody = ({\n    contacts,\n    highlightedID,\n    isChecked,\n    beDeleted,\n    onClickCheckbox,\n    onClickDetails,\n    onToggleDelete,\n    ...rest\n}) => {\n    return (\n        <OrderableTableBody colSpan={4} {...rest}>\n            {contacts.map(({ ID, Name, emails }, j) => {\n                const deleted = beDeleted[ID];\n                const options = [\n                    !deleted && {\n                        text: c('Action').t`Contact details`,\n                        onClick() {\n                            onClickDetails(ID);\n                        }\n                    },\n                    {\n                        text: deleted ? c('Action').t`Unmark for deletion` : c('Action').t`Mark for deletion`,\n                        onClick() {\n                            onToggleDelete(ID);\n                        }\n                    }\n                ].filter(Boolean);\n                const cells = [\n                    <NameTableCell\n                        key=\"name\"\n                        name={Name}\n                        contactID={ID}\n                        highlightedID={highlightedID}\n                        checked={isChecked[ID]}\n                        deleted={deleted}\n                        greyedOut={deleted}\n                        onToggle={onClickCheckbox}\n                    />,\n                    <EmailsTableCell\n                        key=\"email\"\n                        contactID={ID}\n                        highlightedID={highlightedID}\n                        emails={emails}\n                        greyedOut={deleted}\n                    />,\n                    <DropdownActions key=\"options\" className=\"pm-button--small\" list={options} />\n                ];\n\n                return deleted ? (\n                    <TableRow key={`${ID}`} index={j} cells={[null, ...cells]} />\n                ) : (\n                    <OrderableTableRow key={`${ID}`} index={j} cells={cells} />\n                );\n            })}\n        </OrderableTableBody>\n    );\n};\n\nMergeTableBody.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    highlightedID: PropTypes.string,\n    isChecked: PropTypes.object,\n    beDeleted: PropTypes.object,\n    onClickCheckbox: PropTypes.func,\n    onClickDetails: PropTypes.func,\n    onToggleDelete: PropTypes.func,\n    onClickPreview: PropTypes.func\n};\n\nexport default MergeTableBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { Block, OrderableTable, TableCell, Button } from 'react-components';\n\nimport MergeTableBody from './MergeTableBody';\n\nconst MergeTableHeader = () => {\n    return (\n        <thead className=\"orderableTableHeader\">\n            <tr>\n                <TableCell type=\"header\" />\n                <TableCell type=\"header\">{c('TableHeader').t`NAME`}</TableCell>\n                <TableCell type=\"header\">{c('TableHeader').t`ADDRESS`}</TableCell>\n                <TableCell type=\"header\">{c('TableHeader').t`ACTIONS`}</TableCell>\n            </tr>\n        </thead>\n    );\n};\n\nconst MergeTable = ({\n    contacts = [],\n    isChecked = {},\n    beDeleted = {},\n    onClickCheckbox,\n    onClickDetails,\n    onToggleDelete,\n    onClickPreview,\n    onSortEnd\n}) => {\n    return (\n        <>\n            {contacts.map((group, i) => {\n                const activeIDs = group.map(({ ID }) => isChecked[ID] && !beDeleted[ID] && ID).filter(Boolean);\n                const beDeletedIDs = group.map(({ ID }) => beDeleted[ID] && ID).filter(Boolean);\n                const beMergedIDs = activeIDs.length > 1 ? activeIDs : [];\n\n                return (\n                    <Block key={`${group && group[0].Name}`} className=\"mb2 flex flex-column flex-items-center\">\n                        <OrderableTable onSortEnd={onSortEnd(i)} className=\"mb1\">\n                            <MergeTableHeader />\n                            <MergeTableBody\n                                contacts={group}\n                                highlightedID={beMergedIDs[0]}\n                                isChecked={isChecked}\n                                beDeleted={beDeleted}\n                                onClickCheckbox={onClickCheckbox}\n                                onClickDetails={onClickDetails}\n                                onToggleDelete={onToggleDelete}\n                            />\n                        </OrderableTable>\n                        <Button\n                            className=\"aligcenter\"\n                            disabled={!beMergedIDs.length}\n                            type=\"button\"\n                            onClick={() => onClickPreview(beMergedIDs[0], beDeletedIDs)}\n                        >\n                            {c('Action').t`Preview contact`}\n                        </Button>\n                    </Block>\n                );\n            })}\n        </>\n    );\n};\n\nMergeTable.propTypes = {\n    contacts: PropTypes.array,\n    isChecked: PropTypes.object,\n    beDeleted: PropTypes.object,\n    onClickCheckbox: PropTypes.func,\n    onClickDetails: PropTypes.func,\n    onToggleDelete: PropTypes.func,\n    onClickPreview: PropTypes.func,\n    onSortEnd: PropTypes.func\n};\n\nexport default MergeTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useModals, Alert } from 'react-components';\n\nimport { moveInGroup } from '../../helpers/array';\n\nimport ContactDetails from './ContactDetails';\nimport MergeContactPreview from './MergeContactPreview';\nimport MergeTable from './MergeTable';\n\nconst MergeModalContent = ({\n    contactID,\n    userKeysList,\n    hasPaidMail,\n    model,\n    updateModel,\n    beMergedModel,\n    beDeletedModel\n}) => {\n    const { createModal } = useModals();\n\n    const { orderedContacts, isChecked, beDeleted } = model;\n\n    const handleToggleCheck = (ID) => {\n        updateModel((model) => ({\n            ...model,\n            isChecked: { ...isChecked, [ID]: !isChecked[ID] }\n        }));\n    };\n    const handleToggleDelete = (ID) => {\n        updateModel((model) => ({\n            ...model,\n            beDeleted: { ...beDeleted, [ID]: !beDeleted[ID] }\n        }));\n    };\n    const handleSortEnd = (groupIndex) => ({ oldIndex, newIndex }) => {\n        updateModel((model) => ({\n            ...model,\n            orderedContacts: moveInGroup(orderedContacts, groupIndex, { oldIndex, newIndex })\n        }));\n    };\n\n    const handleClickDetails = (contactID) => {\n        createModal(<ContactDetails contactID={contactID} userKeysList={userKeysList} hasPaidMail={hasPaidMail} />);\n    };\n\n    const handlePreview = (beMergedID, beDeletedIDs) => {\n        const beMergedModelSingle = { [beMergedID]: beMergedModel[beMergedID] };\n        const beDeletedModelSingle = beDeletedIDs.reduce((acc, ID) => {\n            acc[ID] = beDeletedModel[ID];\n            return acc;\n        }, {});\n\n        createModal(\n            <MergeContactPreview\n                contactID={contactID}\n                userKeysList={userKeysList}\n                hasPaidMail={hasPaidMail}\n                beMergedModel={beMergedModelSingle}\n                beDeletedModel={beDeletedModelSingle}\n                updateModel={updateModel}\n            />\n        );\n    };\n\n    return (\n        <>\n            <Alert>\n                {c('Description')\n                    .t`Use Drag and Drop to rank merging priority between contacts. Uncheck the contacts you do not want to merge.`}\n            </Alert>\n            <Alert type=\"warning\">\n                {c('Description')\n                    .t`You can mark for deletion the contacts that you do not want neither to merge nor to keep.\n                    Deletion will only take place after the merge button is clicked`}\n            </Alert>\n            <MergeTable\n                onSortEnd={handleSortEnd}\n                contacts={orderedContacts}\n                isChecked={isChecked}\n                beDeleted={beDeleted}\n                onClickCheckbox={handleToggleCheck}\n                onClickDetails={handleClickDetails}\n                onToggleDelete={handleToggleDelete}\n                onClickPreview={handlePreview}\n            />\n        </>\n    );\n};\n\nMergeModalContent.propTypes = {\n    contactID: PropTypes.string,\n    userKeysList: PropTypes.array.isRequired,\n    hasPaidMail: PropTypes.bool,\n    model: PropTypes.object.isRequired,\n    updateModel: PropTypes.func.isRequired,\n    beMergedModel: PropTypes.shape({ ID: PropTypes.arrayOf(PropTypes.string) }),\n    beDeletedModel: PropTypes.shape({ ID: PropTypes.string })\n};\n\nexport default MergeModalContent;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport { useEventManager, FormModal, ResetButton, PrimaryButton } from 'react-components';\n\nimport MergeModalContent from './MergeModalContent';\nimport MergingModalContent from './MergingModalContent';\n\nconst MergeModal = ({ contacts, contactID, userKeysList, hasPaidMail, ...rest }) => {\n    const { call } = useEventManager();\n\n    const [isMerging, setIsMerging] = useState(false);\n    const [mergeFinished, setMergeFinished] = useState(false);\n    const [model, setModel] = useState(() => ({\n        orderedContacts: contacts,\n        isChecked: contacts.flat().reduce((acc, { ID }) => {\n            acc[ID] = true;\n            return acc;\n        }, {}),\n        beDeleted: contacts.flat().reduce((acc, { ID }) => {\n            acc[ID] = false;\n            return acc;\n        }, {})\n    }));\n\n    const { orderedContacts, isChecked, beDeleted } = model;\n\n    useEffect(() => {\n        // close the modal if all contacts have been merged from preview\n        if (!orderedContacts.flat().length) {\n            rest.onClose();\n        }\n    }, [orderedContacts]);\n\n    // beMergedModel = { 'ID of be-merged contact': [IDs to be merged] }\n    // beDeletedModel = { 'ID of be-deleted contact': 'ID to navigate to in case it is the current ID' }\n    const { beMergedModel, beDeletedModel, totalBeMerged } = useMemo(\n        () =>\n            orderedContacts.reduce(\n                (acc, group) => {\n                    const groupIDs = group.map(({ ID }) => ID);\n                    const beMergedIDs = groupIDs.map((ID) => isChecked[ID] && !beDeleted[ID] && ID).filter(Boolean);\n                    const beDeletedIDs = groupIDs.map((ID) => beDeleted[ID] && ID).filter(Boolean);\n                    const willBeMerged = beMergedIDs.length > 1;\n\n                    if (willBeMerged) {\n                        acc.beMergedModel[beMergedIDs[0]] = beMergedIDs;\n                        acc.totalBeMerged += beMergedIDs.length;\n                    }\n                    for (const ID of beDeletedIDs) {\n                        // route to merged contact or to /contacts if no associated contact is merged\n                        acc.beDeletedModel[ID] = willBeMerged ? beMergedIDs[0] : '';\n                    }\n                    return acc;\n                },\n                { beMergedModel: {}, beDeletedModel: {}, totalBeMerged: 0 }\n            ),\n        [orderedContacts, isChecked, beDeleted]\n    );\n\n    const { content, ...modalProps } = (() => {\n        // Display table with mergeable contacts\n        if (!isMerging) {\n            const submit = (\n                <PrimaryButton type=\"submit\" disabled={!totalBeMerged}>{c('Action').t`Merge`}</PrimaryButton>\n            );\n\n            const handleSubmit = () => setIsMerging(true);\n\n            return {\n                title: c('Title').t`Merge contacts`,\n                content: (\n                    <MergeModalContent\n                        contactID={contactID}\n                        userKeysList={userKeysList}\n                        hasPaidMail={!!hasPaidMail}\n                        model={model}\n                        updateModel={setModel}\n                        beMergedModel={beMergedModel}\n                        beDeletedModel={beDeletedModel}\n                    />\n                ),\n                submit,\n                onSubmit: handleSubmit,\n                ...rest\n            };\n        }\n\n        // Display progress bar while merging contacts\n        const close = !mergeFinished && <ResetButton>{c('Action').t`Cancel`}</ResetButton>;\n        const submit = (\n            <PrimaryButton type=\"submit\" loading={!mergeFinished}>\n                {c('Action').t`Close`}\n            </PrimaryButton>\n        );\n\n        const handleFinish = async () => {\n            await call();\n            setMergeFinished(true);\n        };\n\n        return {\n            title: c('Title').t`Merging contacts`,\n            hasClose: false,\n            content: (\n                <MergingModalContent\n                    contactID={contactID}\n                    userKeysList={userKeysList}\n                    beMergedModel={beMergedModel}\n                    beDeletedModel={beDeletedModel}\n                    totalBeMerged={totalBeMerged}\n                    onFinish={handleFinish}\n                />\n            ),\n            close,\n            submit,\n            onSubmit: rest.onClose,\n            ...rest\n        };\n    })();\n\n    return <FormModal {...modalProps}>{content}</FormModal>;\n};\n\nMergeModal.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.array).isRequired,\n    contactID: PropTypes.string,\n    userKeysList: PropTypes.array.isRequired,\n    hasPaidMail: PropTypes.oneOfType(PropTypes.bool)\n};\n\nexport default MergeModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { c, msgid } from 'ttag';\nimport { useApi, useNotifications, useEventManager, useLoading, Alert, ErrorButton, FormModal } from 'react-components';\n\nimport { clearContacts, deleteContacts } from 'proton-shared/lib/api/contacts';\nimport { allSucceded } from 'proton-shared/lib/api/helpers/response';\n\nconst DeleteModal = ({ contactIDs = [], deleteAll, onDelete, ...rest }) => {\n    const api = useApi();\n    const { createNotification } = useNotifications();\n    const { call } = useEventManager();\n    const [loadingDelete, withLoadingDelete] = useLoading();\n\n    const submit = <ErrorButton type=\"submit\" loading={loadingDelete}>{c('Action').t`Delete`}</ErrorButton>;\n\n    const handleDelete = async () => {\n        if (deleteAll) {\n            await api(clearContacts());\n            onDelete && onDelete();\n            await call();\n            rest.onClose();\n            return createNotification({ text: c('Success').t`Contacts deleted` });\n        }\n        const apiSuccess = allSucceded(await api(deleteContacts(contactIDs)));\n        onDelete && onDelete();\n        await call();\n        rest.onClose();\n        if (!apiSuccess) {\n            return createNotification({ text: c('Error').t`Some contacts could not be deleted`, type: 'warning' });\n        }\n        createNotification({\n            text: c('Success').ngettext(msgid`Contact deleted`, `Contacts deleted`, contactIDs.length)\n        });\n    };\n    return (\n        <FormModal\n            title={c('Title').t`Delete`}\n            onSubmit={() => withLoadingDelete(handleDelete())}\n            submit={submit}\n            loading={loadingDelete}\n            {...rest}\n        >\n            <Alert type=\"warning\">\n                {c('Warning').ngettext(\n                    msgid`This action will permanently delete the selected contact. Are you sure you want to delete this contact?`,\n                    `This action will permanently delete selected contacts. Are you sure you want to delete these contacts?`,\n                    contactIDs.length\n                )}\n            </Alert>\n        </FormModal>\n    );\n};\n\nDeleteModal.propTypes = {\n    contactIDs: PropTypes.arrayOf(PropTypes.string),\n    deleteAll: PropTypes.bool,\n    onDelete: PropTypes.func\n};\n\nexport default DeleteModal;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppsSidebar, StorageSpaceStatus, Href } from 'react-components';\nimport { c } from 'ttag';\n\nconst PrivateLayout = ({ children, title }) => {\n    useEffect(() => {\n        document.title = `${title} - ProtonContacts`;\n    }, [title]);\n\n    return (\n        <div className=\"flex flex-nowrap no-scroll\">\n            <AppsSidebar\n                items={[\n                    <StorageSpaceStatus key=\"storage\">\n                        <Href url=\"/settings/subscription\" target=\"_self\" className=\"pm-button pm-button--primary\">\n                            {c('Action').t`Upgrade`}\n                        </Href>\n                    </StorageSpaceStatus>\n                ]}\n            />\n            <div className=\"content flex-item-fluid h100v reset4print\">{children}</div>\n        </div>\n    );\n};\n\nPrivateLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string\n};\n\nexport default PrivateLayout;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { c } from 'ttag';\nimport {\n    Loader,\n    useContactEmails,\n    useContacts,\n    useUser,\n    useUserKeys,\n    useContactGroups,\n    useActiveBreakpoint,\n    useModals,\n    useToggle,\n    ErrorBoundary\n} from 'react-components';\nimport { normalize } from 'proton-shared/lib/helpers/string';\nimport { toMap } from 'proton-shared/lib/helpers/object';\nimport { extractMergeable } from '../helpers/merge';\n\nimport ContactsList from '../components/ContactsList';\nimport Contact from '../components/Contact';\nimport ContactPlaceholder from '../components/ContactPlaceholder';\nimport ContactToolbar from '../components/ContactToolbar';\nimport PrivateHeader from '../content/PrivateHeader';\nimport PrivateSidebar from '../content/PrivateSidebar';\nimport MergeModal from '../components/merge/MergeModal';\nimport ImportModal from '../components/import/ImportModal';\nimport ExportModal from '../components/ExportModal';\nimport DeleteModal from '../components/delete/DeleteModal';\nimport PrivateLayout from '../content/PrivateLayout';\n\nconst ContactsContainer = ({ location, history }) => {\n    const { state: expanded, toggle: onToggleExpand, set: setExpand } = useToggle();\n    const { createModal } = useModals();\n    const [search, updateSearch] = useState('');\n    const normalizedSearch = normalize(search);\n    const [contactEmails, loadingContactEmails] = useContactEmails();\n    const [contacts, loadingContacts] = useContacts();\n    const [contactGroups, loadingContactGroups] = useContactGroups();\n    const [checkedContacts, setCheckedContacts] = useState(Object.create(null));\n    const [user] = useUser();\n    const [userKeysList, loadingUserKeys] = useUserKeys(user);\n\n    const { isDesktop, isNarrow } = useActiveBreakpoint();\n\n    const contactID = useMemo(() => {\n        const [, contactID] = location.pathname.split('/contacts/');\n        return contactID;\n    }, [location]);\n\n    const contactGroupID = useMemo(() => {\n        const params = new URLSearchParams(location.search);\n        return params.get('contactGroupID');\n    }, [location.search]);\n\n    const { contactGroupName, totalContactsInGroup } = useMemo(() => {\n        if (!contactGroups || !contactGroupID) {\n            return Object.create(null);\n        }\n        const contactGroup = contactGroups.find(({ ID }) => ID === contactGroupID);\n        return {\n            contactGroupName: contactGroup.Name,\n            totalContactsInGroup: contacts.filter(({ LabelIDs = [] }) => LabelIDs.includes(contactGroupID)).length\n        };\n    }, [contacts, contactGroupID]);\n\n    const hasChecked = useMemo(() => {\n        return Object.keys(checkedContacts).some((key) => checkedContacts[key]);\n    }, [checkedContacts]);\n\n    useEffect(() => {\n        // clean checked contacts if navigating to a contact group\n        setCheckedContacts(Object.create(null));\n        setExpand(false);\n        // clean also the search\n        updateSearch('');\n    }, [contactGroupID]);\n\n    const contactEmailsMap = useMemo(() => {\n        if (!Array.isArray(contactEmails)) {\n            return {};\n        }\n        return contactEmails.reduce((acc, contactEmail) => {\n            const { ContactID } = contactEmail;\n            if (!acc[ContactID]) {\n                acc[ContactID] = [];\n            }\n            acc[ContactID].push(contactEmail);\n            return acc;\n        }, Object.create(null));\n    }, [contactEmails]);\n\n    const contactGroupsMap = useMemo(() => toMap(contactGroups), [contactGroups]);\n\n    const filteredContacts = useMemo(() => {\n        if (!Array.isArray(contacts)) {\n            return [];\n        }\n        return contacts.filter(({ Name, ID, LabelIDs }) => {\n            const emails = contactEmailsMap[ID] ? contactEmailsMap[ID].map(({ Email }) => Email).join(' ') : '';\n            const searchFilter = normalizedSearch.length\n                ? normalize(`${Name} ${emails}`).includes(normalizedSearch)\n                : true;\n\n            const groupFilter = contactGroupID ? LabelIDs.includes(contactGroupID) : true;\n\n            return searchFilter && groupFilter;\n        });\n    }, [contacts, contactGroupID, normalizedSearch, contactEmailsMap]);\n\n    const formattedContacts = useMemo(() => {\n        return filteredContacts.map((contact) => {\n            const { ID } = contact;\n            return {\n                ...contact,\n                emails: (contactEmailsMap[ID] || []).map(({ Email }) => Email),\n                isChecked: !!checkedContacts[ID]\n            };\n        });\n    }, [filteredContacts, checkedContacts, contactEmailsMap]);\n\n    const mergeableContacts = useMemo(() => extractMergeable(formattedContacts), [formattedContacts]);\n    const canMerge = mergeableContacts.length > 0;\n    const { hasPaidMail } = user;\n\n    const filteredCheckedIDs = useMemo(() => {\n        return formattedContacts.filter(({ isChecked }) => isChecked).map(({ ID }) => ID);\n    }, [formattedContacts, contactID]);\n\n    const hasCheckedAllFiltered = useMemo(() => {\n        const filteredContactsLength = filteredContacts.length;\n        return !!filteredContactsLength && filteredCheckedIDs.length === filteredContactsLength;\n    }, [filteredContacts, filteredCheckedIDs]);\n\n    const activeIDs = useMemo(() => {\n        {\n            return !filteredCheckedIDs.length && contactID ? [contactID] : filteredCheckedIDs;\n        }\n    }, [filteredCheckedIDs, contactID]);\n\n    const handleCheck = (contactIDs = [], checked = false) => {\n        const update = contactIDs.reduce((acc, contactID) => {\n            acc[contactID] = checked;\n            return acc;\n        }, Object.create(null));\n        setCheckedContacts({ ...checkedContacts, ...update });\n    };\n\n    const handleClearSearch = () => {\n        updateSearch('');\n    };\n\n    const handleCheckAllFiltered = (checked = false) => {\n        handleCheck(\n            filteredContacts.map(({ ID }) => ID),\n            checked\n        );\n    };\n\n    const handleUncheckAll = () => {\n        handleCheckAllFiltered(false);\n    };\n\n    const handleDelete = () => {\n        const deleteAll = activeIDs.length === contacts.length;\n        const onDelete = () => {\n            if (deleteAll) {\n                history.replace({ ...location, state: { ignoreClose: true }, pathname: '/contacts' });\n                return setCheckedContacts(Object.create(null));\n            }\n            if (activeIDs.length === filteredContacts.length) {\n                handleClearSearch();\n            }\n            if (contactID && activeIDs.includes(contactID)) {\n                history.replace({ ...location, state: { ignoreClose: true }, pathname: '/contacts' });\n            }\n            handleCheck(filteredCheckedIDs, false);\n        };\n        createModal(<DeleteModal contactIDs={activeIDs} deleteAll={deleteAll} onDelete={onDelete} />);\n    };\n\n    const handleMerge = () => {\n        createModal(\n            <MergeModal\n                contacts={mergeableContacts}\n                contactID={contactID}\n                userKeysList={userKeysList}\n                hasPaidMail={!!hasPaidMail}\n            />\n        );\n    };\n    const handleImport = () => createModal(<ImportModal userKeysList={userKeysList} />);\n    const handleExport = (contactGroupID) =>\n        createModal(<ExportModal contactGroupID={contactGroupID} userKeysList={userKeysList} />);\n    const handleGroups = () => history.replace('/contacts/settings/groups');\n\n    const isLoading = loadingContactEmails || loadingContacts || loadingContactGroups || loadingUserKeys;\n    const contactsLength = contacts ? contacts.length : 0;\n    const noHeader = isNarrow && contactID ? '--noHeader' : '';\n\n    const contactComponent = contactID && !!contactsLength && !hasChecked && (\n        <ErrorBoundary key={contactID}>\n            <Contact\n                contactID={contactID}\n                contactEmails={contactEmailsMap[contactID]}\n                contactGroupsMap={contactGroupsMap}\n                userKeysList={userKeysList}\n            />\n        </ErrorBoundary>\n    );\n\n    const contactsListComponent = (isDesktop || !contactComponent) && (\n        <ContactsList\n            emptyAddressBook={!contactsLength}\n            contactID={contactID}\n            contactGroupID={contactGroupID}\n            totalContacts={contactsLength}\n            totalContactsInGroup={totalContactsInGroup}\n            contacts={formattedContacts}\n            contactGroupsMap={contactGroupsMap}\n            user={user}\n            userKeysList={userKeysList}\n            loadingUserKeys={loadingUserKeys}\n            onCheck={handleCheck}\n            onClearSearch={handleClearSearch}\n            onClearSelection={handleUncheckAll}\n            isDesktop={isDesktop}\n        />\n    );\n\n    const contactPlaceHolderComponent = isDesktop && !contactComponent && !!formattedContacts.length && (\n        <ContactPlaceholder\n            history={history}\n            user={user}\n            userKeysList={userKeysList}\n            loadingUserKeys={loadingUserKeys}\n            totalContacts={contactsLength}\n            totalContactsInGroup={totalContactsInGroup}\n            selectedContacts={filteredCheckedIDs.length}\n            contactGroupID={contactGroupID}\n            contactGroupName={contactGroupName}\n            onUncheck={handleUncheckAll}\n            canMerge={canMerge}\n            onMerge={handleMerge}\n            onImport={handleImport}\n            onExport={handleExport}\n            onGroups={handleGroups}\n        />\n    );\n\n    return (\n        <PrivateLayout title={contactGroupName || c('Title').t`Contacts`}>\n            {(!isNarrow || !contactID) && (\n                <PrivateHeader\n                    title={c('Title').t`Contacts`}\n                    expanded={expanded}\n                    onToggleExpand={onToggleExpand}\n                    search={search}\n                    onSearch={updateSearch}\n                    onClearSearch={handleClearSearch}\n                    isNarrow={isNarrow}\n                    history={history}\n                />\n            )}\n            <div className=\"flex flex-nowrap\">\n                <PrivateSidebar\n                    url=\"/contacts\"\n                    history={history}\n                    user={user}\n                    expanded={expanded}\n                    onToggleExpand={onToggleExpand}\n                    onClearSearch={handleClearSearch}\n                    totalContacts={contactsLength}\n                    contactGroups={contactGroups}\n                    userKeysList={userKeysList}\n                />\n                <div className=\"main flex-item-fluid\">\n                    <ContactToolbar\n                        user={user}\n                        contactEmailsMap={contactEmailsMap}\n                        activeIDs={activeIDs}\n                        checked={hasCheckedAllFiltered}\n                        onCheck={handleCheckAllFiltered}\n                        onDelete={handleDelete}\n                        simplified={!!contactID && !isDesktop}\n                    />\n                    <div className={`main-area--withToolbar${noHeader} no-scroll flex flex-nowrap`}>\n                        {isLoading ? (\n                            <Loader />\n                        ) : (\n                            <>\n                                {contactsListComponent}\n                                {contactComponent}\n                                {contactPlaceHolderComponent}\n                            </>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </PrivateLayout>\n    );\n};\n\nContactsContainer.propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired\n};\n\nexport default ContactsContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SettingsTitle } from 'react-components';\n\nconst SettingsPage = ({ title, children }) => {\n    return (\n        <main className=\"main-area-content relative flex-item-fluid\">\n            <SettingsTitle>{title}</SettingsTitle>\n            <div className=\"container-section-sticky\">{children}</div>\n        </main>\n    );\n};\n\nSettingsPage.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport default SettingsPage;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { SubTitle, Row, Field, Label, AutoSaveContactsToggle, Info, useMailSettings } from 'react-components';\n\nconst ContactsSection = () => {\n    const [{ AutoSaveContacts } = {}] = useMailSettings();\n    return (\n        <>\n            <SubTitle>{c('Title').t`Contacts`}</SubTitle>\n            <Row>\n                <Label htmlFor=\"saveContactToggle\">\n                    <span className=\"mr0-5\">{c('Label').t`Automatically save contacts`}</span>\n                    <Info url=\"https://protonmail.com/support/knowledge-base/autosave-contact-list/\" />\n                </Label>\n                <Field>\n                    <AutoSaveContactsToggle autoSaveContacts={!!AutoSaveContacts} id=\"saveContactToggle\" />\n                </Field>\n            </Row>\n        </>\n    );\n};\n\nexport default ContactsSection;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport SettingsPage from './SettingsPage';\nimport ContactsSection from '../components/ContactsSection';\n\nconst GeneralPage = () => {\n    return (\n        <SettingsPage title={c('Title').t`General`}>\n            <ContactsSection />\n        </SettingsPage>\n    );\n};\n\nexport default GeneralPage;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {\n    DropdownActions,\n    ConfirmModal,\n    Alert,\n    useContactGroups,\n    useContactEmails,\n    useNotifications,\n    useModals,\n    useApi,\n    useEventManager,\n    OrderableTable,\n    OrderableTableHeader,\n    OrderableTableBody,\n    OrderableTableRow\n} from 'react-components';\nimport { c, msgid } from 'ttag';\nimport { deleteLabel, orderContactGroup } from 'proton-shared/lib/api/labels';\nimport { move } from 'proton-shared/lib/helpers/array';\n\nimport ContactGroupModal from './ContactGroupModal';\nimport ContactGroupIcon from './ContactGroupIcon';\n\nconst ContactGroupsTable = () => {\n    const [contactGroups] = useContactGroups();\n    const [contactEmails] = useContactEmails();\n    const { createNotification } = useNotifications();\n    const { createModal } = useModals();\n    const api = useApi();\n    const { call } = useEventManager();\n\n    const [list = [], setContactGroups] = useState(contactGroups);\n\n    useEffect(() => {\n        setContactGroups(contactGroups);\n    }, [contactGroups]);\n\n    const handleConfirmDeletion = (ID) => async () => {\n        await api(deleteLabel(ID));\n        await call();\n        createNotification({\n            text: c('Contact group notification').t`Contact group removed`\n        });\n    };\n\n    const handleSortEnd = useCallback(\n        async ({ oldIndex, newIndex }) => {\n            try {\n                const newList = move(list, oldIndex, newIndex);\n                setContactGroups(newList);\n                await api(orderContactGroup({ LabelIDs: newList.map(({ ID }) => ID) }));\n                call();\n            } catch (error) {\n                setContactGroups(contactGroups);\n            }\n        },\n        [list, contactGroups]\n    );\n\n    const header = [c('Table header').t`Name`, c('Table header').t`Group size`, c('Table header').t`Actions`];\n\n    return (\n        <OrderableTable className=\"noborder\" onSortEnd={handleSortEnd}>\n            <OrderableTableHeader cells={header} />\n            <OrderableTableBody>\n                {list.map(({ ID, Name, Color }, index) => {\n                    const countEmailAddresses = (contactEmails || []).filter(({ LabelIDs = [] }) =>\n                        LabelIDs.includes(ID)\n                    ).length;\n                    const list = [\n                        {\n                            text: c('Action').t`Edit`,\n                            onClick() {\n                                createModal(<ContactGroupModal contactGroupID={ID} />);\n                            }\n                        },\n                        {\n                            text: c('Action').t`Delete`,\n                            onClick() {\n                                createModal(\n                                    <ConfirmModal\n                                        onConfirm={handleConfirmDeletion(ID)}\n                                        title={c('Title').t`Delete contact group`}\n                                    >\n                                        <Alert type=\"warning\">\n                                            <p>{c('Info').t`Are you sure you want to delete this contact group?`}</p>\n                                            <p>{c('Info')\n                                                .t`Contacts in the group aren't deleted if the contact group is deleted.`}</p>\n                                        </Alert>\n                                    </ConfirmModal>\n                                );\n                            }\n                        }\n                    ];\n                    const cells = [\n                        <div key={ID} className=\"flex\">\n                            <span className=\"ellipsis\">\n                                <ContactGroupIcon name={Name} color={Color} /> {Name}\n                            </span>\n                        </div>,\n                        c('Info').ngettext(\n                            msgid`${countEmailAddresses} email address`,\n                            `${countEmailAddresses} email addresses`,\n                            countEmailAddresses\n                        ),\n                        <DropdownActions key={ID} className=\"pm-button--small\" list={list} />\n                    ];\n                    return <OrderableTableRow key={ID} index={index} cells={cells} />;\n                })}\n            </OrderableTableBody>\n        </OrderableTable>\n    );\n};\n\nexport default ContactGroupsTable;\n","import React from 'react';\nimport { c } from 'ttag';\nimport { SubTitle, PrimaryButton, Alert, useModals } from 'react-components';\n\nimport ContactGroupsTable from './ContactGroupsTable';\nimport ContactGroupModal from './ContactGroupModal';\n\nconst ContactGroupsSection = () => {\n    const { createModal } = useModals();\n    const handleCreate = () => createModal(<ContactGroupModal />);\n    return (\n        <>\n            <SubTitle>{c('Title').t`Contact groups`}</SubTitle>\n            <Alert>{c('Info')\n                .t`A group can contain multiple email addresses from the same contact. Please note that a sending limit may apply and prevent you from sending emails to excessively large groups.`}</Alert>\n            <div className=\"mb1\">\n                <PrimaryButton onClick={handleCreate}>{c('Action').t`Add group`}</PrimaryButton>\n            </div>\n            <ContactGroupsTable />\n        </>\n    );\n};\n\nexport default ContactGroupsSection;\n","import React from 'react';\nimport { c } from 'ttag';\n\nimport ContactGroupsSection from '../components/ContactGroupsSection';\nimport SettingsPage from './SettingsPage';\n\nconst ContactGroupsPage = () => {\n    return (\n        <SettingsPage title={c('Title').t`Contact groups`}>\n            <ContactGroupsSection />\n        </SettingsPage>\n    );\n};\n\nexport default ContactGroupsPage;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Sidebar, MainAreaContext, useUser, useToggle, useActiveBreakpoint } from 'react-components';\nimport { Route, Switch, Redirect } from 'react-router';\nimport { c } from 'ttag';\n\nimport PrivateHeader from '../content/PrivateHeader';\nimport GeneralPage from '../pages/GeneralPage';\nimport ContactGroupsPage from '../pages/ContactGroupsPage';\nimport PrivateLayout from '../content/PrivateLayout';\n\nconst SettingsContainer = ({ location }) => {\n    const mainAreaRef = useRef();\n    const [{ hasPaidMail }] = useUser();\n    const { state: expanded, toggle: onToggleExpand, set: setExpand } = useToggle();\n    const { isNarrow } = useActiveBreakpoint();\n\n    useEffect(() => {\n        setExpand(false);\n        mainAreaRef.current.scrollTop = 0;\n    }, [location.pathname]);\n\n    const list = [\n        { link: '/contacts/settings/general', icon: 'settings-singular', text: c('Link').t`General` },\n        hasPaidMail && { link: '/contacts/settings/groups', icon: 'contacts-groups', text: c('Link').t`Contact groups` }\n    ].filter(Boolean);\n\n    const mobileLinks = [\n        { to: '/inbox', icon: 'protonmail', external: true, current: false },\n        { to: '/contacts', icon: 'protoncontacts', external: false, current: true }\n    ];\n\n    return (\n        <PrivateLayout title={c('Title').t`Contact settings`}>\n            <PrivateHeader\n                inSettings={true}\n                title={c('Title').t`Settings`}\n                expanded={expanded}\n                onToggleExpand={onToggleExpand}\n                isNarrow={isNarrow}\n            />\n            <div className=\"flex flex-nowrap\">\n                <Sidebar\n                    url=\"/contacts\"\n                    list={list}\n                    expanded={expanded}\n                    onToggleExpand={onToggleExpand}\n                    mobileLinks={mobileLinks}\n                />\n                <div className=\"main flex-item-fluid main-area\" ref={mainAreaRef}>\n                    <div className=\"flex flex-reverse\">\n                        <MainAreaContext.Provider value={mainAreaRef}>\n                            <Switch>\n                                <Route path=\"/contacts/settings/general\" component={GeneralPage} />\n                                <Route path=\"/contacts/settings/groups\" component={ContactGroupsPage} />\n                                <Redirect to=\"/contacts/settings/general\" />\n                            </Switch>\n                        </MainAreaContext.Provider>\n                    </div>\n                </div>\n            </div>\n        </PrivateLayout>\n    );\n};\n\nSettingsContainer.propTypes = {\n    location: PropTypes.object.isRequired\n};\n\nexport default SettingsContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, StandardPrivateApp } from 'react-components';\nimport { Redirect, Route, Switch } from 'react-router';\nimport {\n    UserModel,\n    ContactsModel,\n    ContactEmailsModel,\n    ContactGroupsModel,\n    UserSettingsModel,\n    SubscriptionModel,\n    MailSettingsModel\n} from 'proton-shared/lib/models';\n\nimport ContactsProvider from '../containers/ContactProvider';\nimport ContactsContainer from '../containers/ContactsContainer';\nimport SettingsContainer from '../containers/SettingsContainer';\n\nconst EVENT_MODELS = [\n    UserModel,\n    UserSettingsModel,\n    MailSettingsModel,\n    ContactsModel,\n    SubscriptionModel,\n    ContactEmailsModel,\n    ContactGroupsModel\n];\n\nconst PRELOAD_MODELS = [UserSettingsModel, UserModel];\n\nconst PrivateApp = ({ onLogout }) => {\n    return (\n        <StandardPrivateApp\n            onLogout={onLogout}\n            locales={{} /* todo */}\n            preloadModels={PRELOAD_MODELS}\n            eventModels={EVENT_MODELS}\n        >\n            <ContactsProvider>\n                <ErrorBoundary>\n                    <Switch>\n                        <Route\n                            path=\"/contacts/settings\"\n                            render={({ location }) => <SettingsContainer location={location} />}\n                        />\n                        <Route\n                            path=\"/contacts\"\n                            render={({ location, history }) => (\n                                <ContactsContainer location={location} history={history} />\n                            )}\n                        />\n                        <Redirect to=\"/contacts\" />\n                    </Switch>\n                </ErrorBoundary>\n            </ContactsProvider>\n        </StandardPrivateApp>\n    );\n};\n\nPrivateApp.propTypes = {\n    onLogout: PropTypes.func.isRequired\n};\n\nexport default PrivateApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport { StandardPublicApp, LoginForm, ModalsChildren } from 'react-components';\n\nconst PublicApp = ({ onLogin }) => {\n    return (\n        <StandardPublicApp>\n            <ModalsChildren />\n            <Switch>\n                <Route render={() => <LoginForm onLogin={onLogin} />} />\n            </Switch>\n        </StandardPublicApp>\n    );\n};\n\nPublicApp.propTypes = {\n    onLogin: PropTypes.func.isRequired\n};\n\nexport default PublicApp;\n","import { hot } from 'react-hot-loader/root';\nimport React from 'react';\nimport { ProtonApp, LoaderPage, useAuthentication } from 'react-components';\nimport { redirectTo } from 'proton-shared/lib/helpers/browser';\nimport sentry from 'proton-shared/lib/helpers/sentry';\n\nimport * as config from './config';\nimport PrivateApp from './content/PrivateApp';\nimport PublicApp from './content/PublicApp';\n\nimport './app.scss';\n\nsentry(config);\n\nconst Redirect = () => {\n    redirectTo();\n    return <LoaderPage />;\n};\n\nconst Setup = () => {\n    const { UID, login, logout } = useAuthentication();\n\n    if (UID) {\n        return <PrivateApp onLogout={logout} />;\n    }\n\n    if (PL_IS_STANDALONE) {\n        return <PublicApp onLogin={login} />;\n    }\n\n    return <Redirect />;\n};\n\nconst App = () => {\n    return (\n        <ProtonApp config={config}>\n            <Setup />\n        </ProtonApp>\n    );\n};\n\nexport default hot(App);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('.app-root'));\n","var map = {\n\t\"./3-d-secure.svg\": \"0gKn\",\n\t\"./american-express-safekey.svg\": \"Jui7\",\n\t\"./cc-american-express.svg\": \"/qD2\",\n\t\"./cc-dankort.svg\": \"0T0d\",\n\t\"./cc-diners-club.svg\": \"vuvo\",\n\t\"./cc-discover.svg\": \"AZZk\",\n\t\"./cc-forbrugs.svg\": \"k2eZ\",\n\t\"./cc-jcb.svg\": \"7Amw\",\n\t\"./cc-maestro.svg\": \"lXKh\",\n\t\"./cc-mastercard.svg\": \"ZUPP\",\n\t\"./cc-paypal.svg\": \"egYP\",\n\t\"./cc-unionpay.svg\": \"ma7A\",\n\t\"./cc-visa.svg\": \"vO2o\",\n\t\"./cc-visaelectron.svg\": \"RMFI\",\n\t\"./discover-protectbuy.svg\": \"qsy5\",\n\t\"./mastercard-securecode.svg\": \"6Bn0\",\n\t\"./verified-by-visa.svg\": \"Q7qE\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5FMj\";","var map = {\n\t\"./af/index.js\": [\n\t\t\"IqAn\",\n\t\t11\n\t],\n\t\"./ar-DZ/index.js\": [\n\t\t\"JVC1\",\n\t\t12\n\t],\n\t\"./ar-SA/index.js\": [\n\t\t\"xMju\",\n\t\t13\n\t],\n\t\"./be/index.js\": [\n\t\t\"YEhR\",\n\t\t3\n\t],\n\t\"./bg/index.js\": [\n\t\t\"isx8\",\n\t\t4\n\t],\n\t\"./bn/index.js\": [\n\t\t\"+b7I\",\n\t\t14\n\t],\n\t\"./ca/index.js\": [\n\t\t\"Vwa+\",\n\t\t15\n\t],\n\t\"./cs/index.js\": [\n\t\t\"dvhP\",\n\t\t16\n\t],\n\t\"./cy/index.js\": [\n\t\t\"HQUR\",\n\t\t17\n\t],\n\t\"./da/index.js\": [\n\t\t\"7ur/\",\n\t\t18\n\t],\n\t\"./de/index.js\": [\n\t\t\"bgw5\",\n\t\t19\n\t],\n\t\"./el/index.js\": [\n\t\t\"dH0v\",\n\t\t20\n\t],\n\t\"./en-AU/index.js\": [\n\t\t\"VHew\",\n\t\t21\n\t],\n\t\"./en-CA/index.js\": [\n\t\t\"wXhn\",\n\t\t22\n\t],\n\t\"./en-GB/index.js\": [\n\t\t\"nwJ3\",\n\t\t23\n\t],\n\t\"./en-US/index.js\": [\n\t\t\"IogR\",\n\t\t24\n\t],\n\t\"./eo/index.js\": [\n\t\t\"UB7v\",\n\t\t25\n\t],\n\t\"./es/index.js\": [\n\t\t\"/S0t\",\n\t\t26\n\t],\n\t\"./et/index.js\": [\n\t\t\"Br0m\",\n\t\t27\n\t],\n\t\"./fa-IR/index.js\": [\n\t\t\"gEFy\",\n\t\t28\n\t],\n\t\"./fi/index.js\": [\n\t\t\"ndVD\",\n\t\t29\n\t],\n\t\"./fr-CA/index.js\": [\n\t\t\"KTij\",\n\t\t30\n\t],\n\t\"./fr/index.js\": [\n\t\t\"LKA2\",\n\t\t31\n\t],\n\t\"./gl/index.js\": [\n\t\t\"4bge\",\n\t\t32\n\t],\n\t\"./gu/index.js\": [\n\t\t\"3t4y\",\n\t\t33\n\t],\n\t\"./he/index.js\": [\n\t\t\"75M+\",\n\t\t34\n\t],\n\t\"./hi/index.js\": [\n\t\t\"CUe2\",\n\t\t35\n\t],\n\t\"./hr/index.js\": [\n\t\t\"L9Jq\",\n\t\t36\n\t],\n\t\"./hu/index.js\": [\n\t\t\"Nm+E\",\n\t\t37\n\t],\n\t\"./hy/index.js\": [\n\t\t\"netp\",\n\t\t38\n\t],\n\t\"./id/index.js\": [\n\t\t\"A6C3\",\n\t\t39\n\t],\n\t\"./is/index.js\": [\n\t\t\"N4bE\",\n\t\t40\n\t],\n\t\"./it/index.js\": [\n\t\t\"hmb4\",\n\t\t41\n\t],\n\t\"./ja/index.js\": [\n\t\t\"uAXs\",\n\t\t42\n\t],\n\t\"./ka/index.js\": [\n\t\t\"pwL5\",\n\t\t43\n\t],\n\t\"./kk/index.js\": [\n\t\t\"zGPi\",\n\t\t5\n\t],\n\t\"./ko/index.js\": [\n\t\t\"iW8+\",\n\t\t44\n\t],\n\t\"./lt/index.js\": [\n\t\t\"xj+b\",\n\t\t45\n\t],\n\t\"./lv/index.js\": [\n\t\t\"x5pY\",\n\t\t6\n\t],\n\t\"./ms/index.js\": [\n\t\t\"gUWk\",\n\t\t46\n\t],\n\t\"./nb/index.js\": [\n\t\t\"73vv\",\n\t\t47\n\t],\n\t\"./nl/index.js\": [\n\t\t\"hCQt\",\n\t\t48\n\t],\n\t\"./nn/index.js\": [\n\t\t\"vORL\",\n\t\t49\n\t],\n\t\"./pl/index.js\": [\n\t\t\"B6yL\",\n\t\t7\n\t],\n\t\"./pt-BR/index.js\": [\n\t\t\"2dYp\",\n\t\t50\n\t],\n\t\"./pt/index.js\": [\n\t\t\"gdks\",\n\t\t51\n\t],\n\t\"./ro/index.js\": [\n\t\t\"r2yp\",\n\t\t52\n\t],\n\t\"./ru/index.js\": [\n\t\t\"nz/o\",\n\t\t8\n\t],\n\t\"./sk/index.js\": [\n\t\t\"Wqan\",\n\t\t9\n\t],\n\t\"./sl/index.js\": [\n\t\t\"KYSo\",\n\t\t53\n\t],\n\t\"./sr/index.js\": [\n\t\t\"7mU3\",\n\t\t54\n\t],\n\t\"./sv/index.js\": [\n\t\t\"hxgj\",\n\t\t55\n\t],\n\t\"./ta/index.js\": [\n\t\t\"1ssA\",\n\t\t56\n\t],\n\t\"./te/index.js\": [\n\t\t\"SGoj\",\n\t\t57\n\t],\n\t\"./th/index.js\": [\n\t\t\"Pk+z\",\n\t\t58\n\t],\n\t\"./tr/index.js\": [\n\t\t\"3ZWG\",\n\t\t59\n\t],\n\t\"./ug/index.js\": [\n\t\t\"yT3n\",\n\t\t60\n\t],\n\t\"./uk/index.js\": [\n\t\t\"LCGg\",\n\t\t10\n\t],\n\t\"./vi/index.js\": [\n\t\t\"dGQT\",\n\t\t61\n\t],\n\t\"./zh-CN/index.js\": [\n\t\t\"UJqf\",\n\t\t62\n\t],\n\t\"./zh-TW/index.js\": [\n\t\t\"zn9v\",\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"YO3j\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}